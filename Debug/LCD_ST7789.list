
LCD_ST7789.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000523c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ddf0  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231bc  080231bc  00040078  2**0
                  CONTENTS
  4 .ARM          00000008  080231bc  080231bc  000331bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231c4  080231c4  00040078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080231c4  080231c4  000331c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080231c8  080231c8  000331c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080231cc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000078  08023244  00040078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08023244  00040220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e4b  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000290d  00000000  00000000  00053ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  00056800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00057868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fb6  00000000  00000000  00058788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6d2  00000000  00000000  0007b73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7e57  00000000  00000000  00088e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  00160ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053b4 	.word	0x080053b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080053b4 	.word	0x080053b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b0af      	sub	sp, #188	; 0xbc
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fdb3 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 fae1 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fbbb 	bl	8000d08 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000592:	f000 fb83 	bl	8000c9c <MX_SPI2_Init>
  MX_RTC_Init();
 8000596:	f000 fb5b 	bl	8000c50 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // включаем под�?ветку ди�?пле�? BLK
//	HAL_GPIO_WritePin( BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET );

  // ST7789 display initialization procedure
  ST7789_Init();
 800059a:	f000 fc41 	bl	8000e20 <ST7789_Init>

  // Setting the display rotation is optional because mode 1 is set by default (there are 4 modes in total: 1, 2, 3, 4)
  ST7789_rotation( 1 );
 800059e:	2001      	movs	r0, #1
 80005a0:	f001 fb96 	bl	8001cd0 <ST7789_rotation>

  int hour = 12, minute = 34, second = 56; // Khởi tạo gi�? phút giây ban đầu
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005aa:	2322      	movs	r3, #34	; 0x22
 80005ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80005b0:	2338      	movs	r3, #56	; 0x38
 80005b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  // Vẽ n�?n và mặt đồng hồ chỉ 1 lần
  ST7789_DrawImage(0, 0, 240, 240, logoRGB);
 80005b6:	4b65      	ldr	r3, [pc, #404]	; (800074c <main+0x1cc>)
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	23f0      	movs	r3, #240	; 0xf0
 80005bc:	22f0      	movs	r2, #240	; 0xf0
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fc9f 	bl	8000f04 <ST7789_DrawImage>
  ST7789_DrawRectangleFilled(40, 40, 200, 200, RGB565(30, 30, 30));
 80005c6:	f641 03e3 	movw	r3, #6371	; 0x18e3
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	23c8      	movs	r3, #200	; 0xc8
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	2128      	movs	r1, #40	; 0x28
 80005d2:	2028      	movs	r0, #40	; 0x28
 80005d4:	f000 ff1f 	bl	8001416 <ST7789_DrawRectangleFilled>
  ST7789_DrawRectangle(40, 40, 200, 200, ST7789_WHITE);
 80005d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	23c8      	movs	r3, #200	; 0xc8
 80005e0:	22c8      	movs	r2, #200	; 0xc8
 80005e2:	2128      	movs	r1, #40	; 0x28
 80005e4:	2028      	movs	r0, #40	; 0x28
 80005e6:	f000 feb9 	bl	800135c <ST7789_DrawRectangle>

  // Vẽ các vạch gi�? chỉ 1 lần
  int cx = (40 + 200) / 2;
 80005ea:	2378      	movs	r3, #120	; 0x78
 80005ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int cy = (40 + 200) / 2;
 80005f0:	2378      	movs	r3, #120	; 0x78
 80005f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (int i = 0; i < 12; i++) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80005fc:	e06f      	b.n	80006de <main+0x15e>
      float angle = (i * 30 - 90) * 3.14159f / 180.0f;
 80005fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	3b5a      	subs	r3, #90	; 0x5a
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000614:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000750 <main+0x1d0>
 8000618:	ee27 7a87 	vmul.f32	s14, s15, s14
 800061c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000754 <main+0x1d4>
 8000620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000624:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      int x1 = cx + (int)(60 * cosf(angle));
 8000628:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800062c:	f004 f936 	bl	800489c <cosf>
 8000630:	eeb0 7a40 	vmov.f32	s14, s0
 8000634:	eddf 7a48 	vldr	s15, [pc, #288]	; 8000758 <main+0x1d8>
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000648:	4413      	add	r3, r2
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
      int y1 = cy + (int)(60 * sinf(angle));
 800064c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000650:	f004 f964 	bl	800491c <sinf>
 8000654:	eeb0 7a40 	vmov.f32	s14, s0
 8000658:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8000758 <main+0x1d8>
 800065c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000664:	ee17 2a90 	vmov	r2, s15
 8000668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800066c:	4413      	add	r3, r2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
      int x2 = cx + (int)(70 * cosf(angle));
 8000670:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000674:	f004 f912 	bl	800489c <cosf>
 8000678:	eeb0 7a40 	vmov.f32	s14, s0
 800067c:	eddf 7a37 	vldr	s15, [pc, #220]	; 800075c <main+0x1dc>
 8000680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000688:	ee17 2a90 	vmov	r2, s15
 800068c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000690:	4413      	add	r3, r2
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
      int y2 = cy + (int)(70 * sinf(angle));
 8000694:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000698:	f004 f940 	bl	800491c <sinf>
 800069c:	eeb0 7a40 	vmov.f32	s14, s0
 80006a0:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800075c <main+0x1dc>
 80006a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ac:	ee17 2a90 	vmov	r2, s15
 80006b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006b4:	4413      	add	r3, r2
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
      ST7789_DrawLine(x1, y1, x2, y2, ST7789_WHITE);
 80006b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006ba:	b218      	sxth	r0, r3
 80006bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006be:	b219      	sxth	r1, r3
 80006c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c6:	b21c      	sxth	r4, r3
 80006c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4623      	mov	r3, r4
 80006d0:	f000 ff6a 	bl	80015a8 <ST7789_DrawLine>
  for (int i = 0; i < 12; i++) {
 80006d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006d8:	3301      	adds	r3, #1
 80006da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006e2:	2b0b      	cmp	r3, #11
 80006e4:	dd8b      	ble.n	80005fe <main+0x7e>
  }

  char timeStrOld[16] = "";
 80006e6:	2300      	movs	r3, #0
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
 80006ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  while (1) {
      // Xóa kim cũ bằng màu n�?n đồng hồ (hoặc vẽ đè)
      // (Có thể lưu lại t�?a độ kim cũ để xóa chính xác hơn)
      // Ở đây đơn giản là vẽ lại vùng đồng hồ nh�? quanh tâm
      ST7789_DrawRectangleFilled(cx-71, cy-71, cx+71, cy+71, RGB565(30, 30, 30));
 80006f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	3b47      	subs	r3, #71	; 0x47
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b218      	sxth	r0, r3
 8000702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b47      	subs	r3, #71	; 0x47
 800070a:	b29b      	uxth	r3, r3
 800070c:	b219      	sxth	r1, r3
 800070e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000712:	b29b      	uxth	r3, r3
 8000714:	3347      	adds	r3, #71	; 0x47
 8000716:	b29b      	uxth	r3, r3
 8000718:	b21a      	sxth	r2, r3
 800071a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800071e:	b29b      	uxth	r3, r3
 8000720:	3347      	adds	r3, #71	; 0x47
 8000722:	b29b      	uxth	r3, r3
 8000724:	b21c      	sxth	r4, r3
 8000726:	f641 03e3 	movw	r3, #6371	; 0x18e3
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	4623      	mov	r3, r4
 800072e:	f000 fe72 	bl	8001416 <ST7789_DrawRectangleFilled>
      ST7789_DrawRectangle(40, 40, 200, 200, ST7789_WHITE);
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	23c8      	movs	r3, #200	; 0xc8
 800073a:	22c8      	movs	r2, #200	; 0xc8
 800073c:	2128      	movs	r1, #40	; 0x28
 800073e:	2028      	movs	r0, #40	; 0x28
 8000740:	f000 fe0c 	bl	800135c <ST7789_DrawRectangle>
      for (int i = 0; i < 12; i++) {
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800074a:	e079      	b.n	8000840 <main+0x2c0>
 800074c:	08006b7c 	.word	0x08006b7c
 8000750:	40490fd0 	.word	0x40490fd0
 8000754:	43340000 	.word	0x43340000
 8000758:	42700000 	.word	0x42700000
 800075c:	428c0000 	.word	0x428c0000
          float angle = (i * 30 - 90) * 3.14159f / 180.0f;
 8000760:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000764:	4613      	mov	r3, r2
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	3b5a      	subs	r3, #90	; 0x5a
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000776:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8000750 <main+0x1d0>
 800077a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077e:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8000754 <main+0x1d4>
 8000782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000786:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          int x1 = cx + (int)(60 * cosf(angle));
 800078a:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800078e:	f004 f885 	bl	800489c <cosf>
 8000792:	eeb0 7a40 	vmov.f32	s14, s0
 8000796:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8000758 <main+0x1d8>
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007aa:	4413      	add	r3, r2
 80007ac:	663b      	str	r3, [r7, #96]	; 0x60
          int y1 = cy + (int)(60 * sinf(angle));
 80007ae:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007b2:	f004 f8b3 	bl	800491c <sinf>
 80007b6:	eeb0 7a40 	vmov.f32	s14, s0
 80007ba:	ed5f 7a19 	vldr	s15, [pc, #-100]	; 8000758 <main+0x1d8>
 80007be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c6:	ee17 2a90 	vmov	r2, s15
 80007ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007ce:	4413      	add	r3, r2
 80007d0:	65fb      	str	r3, [r7, #92]	; 0x5c
          int x2 = cx + (int)(70 * cosf(angle));
 80007d2:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007d6:	f004 f861 	bl	800489c <cosf>
 80007da:	eeb0 7a40 	vmov.f32	s14, s0
 80007de:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 800075c <main+0x1dc>
 80007e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ea:	ee17 2a90 	vmov	r2, s15
 80007ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007f2:	4413      	add	r3, r2
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
          int y2 = cy + (int)(70 * sinf(angle));
 80007f6:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007fa:	f004 f88f 	bl	800491c <sinf>
 80007fe:	eeb0 7a40 	vmov.f32	s14, s0
 8000802:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 800075c <main+0x1dc>
 8000806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800080a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800080e:	ee17 2a90 	vmov	r2, s15
 8000812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000816:	4413      	add	r3, r2
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
          ST7789_DrawLine(x1, y1, x2, y2, ST7789_WHITE);
 800081a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081c:	b218      	sxth	r0, r3
 800081e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000820:	b219      	sxth	r1, r3
 8000822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000824:	b21a      	sxth	r2, r3
 8000826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000828:	b21c      	sxth	r4, r3
 800082a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	4623      	mov	r3, r4
 8000832:	f000 feb9 	bl	80015a8 <ST7789_DrawLine>
      for (int i = 0; i < 12; i++) {
 8000836:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800083a:	3301      	adds	r3, #1
 800083c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000844:	2b0b      	cmp	r3, #11
 8000846:	dd8b      	ble.n	8000760 <main+0x1e0>
      }

      // Vẽ kim gi�?
      float angle_h = ((hour % 12) + minute / 60.0f) * 30.0f - 90.0f;
 8000848:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800084c:	4bb6      	ldr	r3, [pc, #728]	; (8000b28 <main+0x5a8>)
 800084e:	fb83 1302 	smull	r1, r3, r3, r2
 8000852:	1059      	asrs	r1, r3, #1
 8000854:	17d3      	asrs	r3, r2, #31
 8000856:	1ac9      	subs	r1, r1, r3
 8000858:	460b      	mov	r3, r1
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	440b      	add	r3, r1
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	1ad1      	subs	r1, r2, r3
 8000862:	ee07 1a90 	vmov	s15, r1
 8000866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800086a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000876:	ed9f 6aad 	vldr	s12, [pc, #692]	; 8000b2c <main+0x5ac>
 800087a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800087e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000882:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000b30 <main+0x5b0>
 800088e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000892:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
      angle_h = angle_h * 3.14159f / 180.0f;
 8000896:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800089a:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000b34 <main+0x5b4>
 800089e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a2:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8000b38 <main+0x5b8>
 80008a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008aa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
      int hx = cx + (int)(40 * cosf(angle_h));
 80008ae:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80008b2:	f003 fff3 	bl	800489c <cosf>
 80008b6:	eeb0 7a40 	vmov.f32	s14, s0
 80008ba:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8000b3c <main+0x5bc>
 80008be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c6:	ee17 2a90 	vmov	r2, s15
 80008ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008ce:	4413      	add	r3, r2
 80008d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      int hy = cy + (int)(40 * sinf(angle_h));
 80008d4:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80008d8:	f004 f820 	bl	800491c <sinf>
 80008dc:	eeb0 7a40 	vmov.f32	s14, s0
 80008e0:	eddf 7a96 	vldr	s15, [pc, #600]	; 8000b3c <main+0x5bc>
 80008e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ec:	ee17 2a90 	vmov	r2, s15
 80008f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008f4:	4413      	add	r3, r2
 80008f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      ST7789_DrawLine(cx, cy, hx, hy, RGB565(255, 0, 0));
 80008fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008fe:	b218      	sxth	r0, r3
 8000900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000904:	b219      	sxth	r1, r3
 8000906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800090a:	b21a      	sxth	r2, r3
 800090c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000910:	b21c      	sxth	r4, r3
 8000912:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	4623      	mov	r3, r4
 800091a:	f000 fe45 	bl	80015a8 <ST7789_DrawLine>

      // Vẽ kim phút
      float angle_m = (minute + second / 60.0f) * 6.0f - 90.0f;
 800091e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000936:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8000b2c <main+0x5ac>
 800093a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800093e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000942:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000b30 <main+0x5b0>
 800094e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000952:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      angle_m = angle_m * 3.14159f / 180.0f;
 8000956:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800095a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000b34 <main+0x5b4>
 800095e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000962:	eddf 6a75 	vldr	s13, [pc, #468]	; 8000b38 <main+0x5b8>
 8000966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800096a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      int mx = cx + (int)(55 * cosf(angle_m));
 800096e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000972:	f003 ff93 	bl	800489c <cosf>
 8000976:	eeb0 7a40 	vmov.f32	s14, s0
 800097a:	eddf 7a71 	vldr	s15, [pc, #452]	; 8000b40 <main+0x5c0>
 800097e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 2a90 	vmov	r2, s15
 800098a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800098e:	4413      	add	r3, r2
 8000990:	67bb      	str	r3, [r7, #120]	; 0x78
      int my = cy + (int)(55 * sinf(angle_m));
 8000992:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000996:	f003 ffc1 	bl	800491c <sinf>
 800099a:	eeb0 7a40 	vmov.f32	s14, s0
 800099e:	eddf 7a68 	vldr	s15, [pc, #416]	; 8000b40 <main+0x5c0>
 80009a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009aa:	ee17 2a90 	vmov	r2, s15
 80009ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009b2:	4413      	add	r3, r2
 80009b4:	677b      	str	r3, [r7, #116]	; 0x74
      ST7789_DrawLine(cx, cy, mx, my, RGB565(0, 255, 0));
 80009b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009ba:	b218      	sxth	r0, r3
 80009bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009c0:	b219      	sxth	r1, r3
 80009c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009c8:	b21c      	sxth	r4, r3
 80009ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4623      	mov	r3, r4
 80009d2:	f000 fde9 	bl	80015a8 <ST7789_DrawLine>

      // Vẽ kim giây
      float angle_s = second * 6.0f - 90.0f;
 80009d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000b30 <main+0x5b0>
 80009ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
      angle_s = angle_s * 3.14159f / 180.0f;
 80009f6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80009fa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000b34 <main+0x5b4>
 80009fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a02:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000b38 <main+0x5b8>
 8000a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a0a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
      int sx = cx + (int)(65 * cosf(angle_s));
 8000a0e:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000a12:	f003 ff43 	bl	800489c <cosf>
 8000a16:	eeb0 7a40 	vmov.f32	s14, s0
 8000a1a:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8000b44 <main+0x5c4>
 8000a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a26:	ee17 2a90 	vmov	r2, s15
 8000a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a2e:	4413      	add	r3, r2
 8000a30:	66fb      	str	r3, [r7, #108]	; 0x6c
      int sy = cy + (int)(65 * sinf(angle_s));
 8000a32:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000a36:	f003 ff71 	bl	800491c <sinf>
 8000a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8000a3e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8000b44 <main+0x5c4>
 8000a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a4a:	ee17 2a90 	vmov	r2, s15
 8000a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a52:	4413      	add	r3, r2
 8000a54:	66bb      	str	r3, [r7, #104]	; 0x68
      ST7789_DrawLine(cx, cy, sx, sy, RGB565(0, 200, 255));
 8000a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a5a:	b218      	sxth	r0, r3
 8000a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a60:	b219      	sxth	r1, r3
 8000a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a68:	b21c      	sxth	r4, r3
 8000a6a:	f240 635f 	movw	r3, #1631	; 0x65f
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4623      	mov	r3, r4
 8000a72:	f000 fd99 	bl	80015a8 <ST7789_DrawLine>

      // Vẽ tâm đồng hồ
      ST7789_DrawCircleFilled(cx, cy, 4, ST7789_WHITE);
 8000a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a7a:	b218      	sxth	r0, r3
 8000a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a80:	b219      	sxth	r1, r3
 8000a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a86:	2204      	movs	r2, #4
 8000a88:	f000 fe3e 	bl	8001708 <ST7789_DrawCircleFilled>

      // Xóa số cũ (vẽ đè bằng màu n�?n)
      ST7789_DrawRectangleFilled(70, 210, 170, 230, RGB565(30,30,30));
 8000a8c:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	23e6      	movs	r3, #230	; 0xe6
 8000a94:	22aa      	movs	r2, #170	; 0xaa
 8000a96:	21d2      	movs	r1, #210	; 0xd2
 8000a98:	2046      	movs	r0, #70	; 0x46
 8000a9a:	f000 fcbc 	bl	8001416 <ST7789_DrawRectangleFilled>
      // Hiển thị số gi�?/phút/giây dạng số ở dưới
      char timeStr[16];
      sprintf(timeStr, "%02d:%02d:%02d", hour, minute, second);
 8000a9e:	1d38      	adds	r0, r7, #4
 8000aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000aaa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000aae:	4926      	ldr	r1, [pc, #152]	; (8000b48 <main+0x5c8>)
 8000ab0:	f003 faf8 	bl	80040a4 <siprintf>
      ST7789_print(70, 210, ST7789_CYAN, RGB565(30,30,30), 1, &Font_11x18, 1, timeStr);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	9303      	str	r3, [sp, #12]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <main+0x5cc>)
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8000ac8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000acc:	21d2      	movs	r1, #210	; 0xd2
 8000ace:	2046      	movs	r0, #70	; 0x46
 8000ad0:	f001 f83a 	bl	8001b48 <ST7789_print>

      // Tăng th�?i gian (giả lập, nếu không có RTC)
      HAL_Delay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f001 fb4d 	bl	8002174 <HAL_Delay>
      second++;
 8000ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      if (second >= 60) { second = 0; minute++; }
 8000ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ae8:	2b3b      	cmp	r3, #59	; 0x3b
 8000aea:	dd07      	ble.n	8000afc <main+0x57c>
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000af6:	3301      	adds	r3, #1
 8000af8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      if (minute >= 60) { minute = 0; hour++; }
 8000afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b00:	2b3b      	cmp	r3, #59	; 0x3b
 8000b02:	dd07      	ble.n	8000b14 <main+0x594>
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (hour >= 24)   { hour = 0; }
 8000b14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b18:	2b17      	cmp	r3, #23
 8000b1a:	f77f adec 	ble.w	80006f6 <main+0x176>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  while (1) {
 8000b24:	e5e7      	b.n	80006f6 <main+0x176>
 8000b26:	bf00      	nop
 8000b28:	2aaaaaab 	.word	0x2aaaaaab
 8000b2c:	42700000 	.word	0x42700000
 8000b30:	42b40000 	.word	0x42b40000
 8000b34:	40490fd0 	.word	0x40490fd0
 8000b38:	43340000 	.word	0x43340000
 8000b3c:	42200000 	.word	0x42200000
 8000b40:	425c0000 	.word	0x425c0000
 8000b44:	42820000 	.word	0x42820000
 8000b48:	080053cc 	.word	0x080053cc
 8000b4c:	20000000 	.word	0x20000000

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b098      	sub	sp, #96	; 0x60
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b5a:	2230      	movs	r2, #48	; 0x30
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fa97 	bl	8004092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <SystemClock_Config+0xf8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <SystemClock_Config+0xf8>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <SystemClock_Config+0xf8>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <SystemClock_Config+0xfc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <SystemClock_Config+0xfc>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <SystemClock_Config+0xfc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bd6:	2354      	movs	r3, #84	; 0x54
 8000bd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bde:	2304      	movs	r3, #4
 8000be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fd7c 	bl	80026e4 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bf2:	f000 f911 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2102      	movs	r1, #2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 ffd6 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c1e:	f000 f8fb 	bl	8000e18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 f9b1 	bl	8002f98 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c3c:	f000 f8ec 	bl	8000e18 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3760      	adds	r7, #96	; 0x60
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <MX_RTC_Init+0x48>)
 8000c58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c62:	227f      	movs	r2, #127	; 0x7f
 8000c64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_RTC_Init+0x44>)
 8000c80:	f002 fa6c 	bl	800315c <HAL_RTC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c8a:	f000 f8c5 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001b8 	.word	0x200001b8
 8000c98:	40002800 	.word	0x40002800

08000c9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <MX_SPI2_Init+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ccc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000ce8:	220a      	movs	r2, #10
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_SPI2_Init+0x64>)
 8000cee:	f002 fb1a 	bl	8003326 <HAL_SPI_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cf8:	f000 f88e 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000015c 	.word	0x2000015c
 8000d04:	40003800 	.word	0x40003800

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_GPIO_Init+0xe0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	21c0      	movs	r1, #192	; 0xc0
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_GPIO_Init+0xe4>)
 8000d94:	f001 fc8c 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_GPIO_Init+0xe8>)
 8000da0:	f001 fc86 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000da4:	23c0      	movs	r3, #192	; 0xc0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0xe4>)
 8000dbc:	f001 fade 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_GPIO_Init+0xe8>)
 8000dda:	f001 facf 	bl	800237c <HAL_GPIO_Init>

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e06:	f001 f995 	bl	8002134 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40001400 	.word	0x40001400

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0x6>

08000e20 <ST7789_Init>:


//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);
 8000e24:	20c8      	movs	r0, #200	; 0xc8
 8000e26:	f001 f9a5 	bl	8002174 <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <ST7789_Init+0x2c>)
 8000e2c:	22f0      	movs	r2, #240	; 0xf0
 8000e2e:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <ST7789_Init+0x30>)
 8000e32:	22f0      	movs	r2, #240	; 0xf0
 8000e34:	801a      	strh	r2, [r3, #0]

  ST7789_Select();
 8000e36:	f000 f80f 	bl	8000e58 <ST7789_Select>

  ST7789_HardReset();
 8000e3a:	f000 f8b7 	bl	8000fac <ST7789_HardReset>
  ST7789_ExecuteCommandList(init_cmds);
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <ST7789_Init+0x34>)
 8000e40:	f000 f818 	bl	8000e74 <ST7789_ExecuteCommandList>

  ST7789_Unselect();
 8000e44:	f000 f80f 	bl	8000e66 <ST7789_Unselect>

#if FRAME_BUFFER
	ST7789_ClearFrameBuffer();
#endif

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000098 	.word	0x20000098
 8000e50:	2000009a 	.word	0x2000009a
 8000e54:	08022d7c 	.word	0x08022d7c

08000e58 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void ST7789_Select(void) {
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif

}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void ST7789_Unselect(void) {
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------

	#endif

}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
static void ST7789_ExecuteCommandList(const uint8_t *addr) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000e86:	e034      	b.n	8000ef2 <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 8000e92:	7afb      	ldrb	r3, [r7, #11]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f89d 	bl	8000fd4 <ST7789_SendCmd>

        numArgs = *addr++;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000ea4:	7abb      	ldrb	r3, [r7, #10]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eac:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000eb6:	7abb      	ldrb	r3, [r7, #10]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8000ebc:	7abb      	ldrb	r3, [r7, #10]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f8c7 	bl	8001054 <ST7789_SendDataMASS>
            addr += numArgs;
 8000ec6:	7abb      	ldrb	r3, [r7, #10]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00e      	beq.n	8000ef2 <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	2bff      	cmp	r3, #255	; 0xff
 8000ee2:	d102      	bne.n	8000eea <ST7789_ExecuteCommandList+0x76>
 8000ee4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ee8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000eea:	89bb      	ldrh	r3, [r7, #12]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 f941 	bl	8002174 <HAL_Delay>
    while(numCommands--) {
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	73fa      	strb	r2, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1c5      	bne.n	8000e88 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ST7789_DrawImage>:


//==============================================================================
// Процедура вывода цветного изображения на дисплей
//==============================================================================
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4623      	mov	r3, r4
 8000f14:	80fb      	strh	r3, [r7, #6]
 8000f16:	4603      	mov	r3, r0
 8000f18:	80bb      	strh	r3, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	807b      	strh	r3, [r7, #2]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	803b      	strh	r3, [r7, #0]

    if((x >= ST7789_Width) || (y >= ST7789_Height)){
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <ST7789_DrawImage+0xa0>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d233      	bcs.n	8000f94 <ST7789_DrawImage+0x90>
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <ST7789_DrawImage+0xa4>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	88ba      	ldrh	r2, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d22e      	bcs.n	8000f94 <ST7789_DrawImage+0x90>
		return;
	}

    if((x + w - 1) >= ST7789_Width){
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <ST7789_DrawImage+0xa0>)
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	4293      	cmp	r3, r2
 8000f44:	da28      	bge.n	8000f98 <ST7789_DrawImage+0x94>
		return;
	}

    if((y + h - 1) >= ST7789_Height){
 8000f46:	88ba      	ldrh	r2, [r7, #4]
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <ST7789_DrawImage+0xa4>)
 8000f50:	8812      	ldrh	r2, [r2, #0]
 8000f52:	4293      	cmp	r3, r2
 8000f54:	da22      	bge.n	8000f9c <ST7789_DrawImage+0x98>
				buff_frame[( y + i ) * ST7789_Width + x + j] = *data;
				data++;
			}
		}
#else	//если попиксельный вывод
    ST7789_SetWindow(x, y, x+w-1, y+h-1);
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29c      	uxth	r4, r3
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	883b      	ldrh	r3, [r7, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	88b9      	ldrh	r1, [r7, #4]
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	4622      	mov	r2, r4
 8000f74:	f000 f924 	bl	80011c0 <ST7789_SetWindow>

		ST7789_Select();
 8000f78:	f7ff ff6e 	bl	8000e58 <ST7789_Select>

    ST7789_SendDataMASS((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	883a      	ldrh	r2, [r7, #0]
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	69b8      	ldr	r0, [r7, #24]
 8000f8a:	f000 f863 	bl	8001054 <ST7789_SendDataMASS>

    ST7789_Unselect();
 8000f8e:	f7ff ff6a 	bl	8000e66 <ST7789_Unselect>
 8000f92:	e004      	b.n	8000f9e <ST7789_DrawImage+0x9a>
		return;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <ST7789_DrawImage+0x9a>
		return;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <ST7789_DrawImage+0x9a>
		return;
 8000f9c:	bf00      	nop
#endif
}
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	20000098 	.word	0x20000098
 8000fa8:	2000009a 	.word	0x2000009a

08000fac <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <ST7789_HardReset+0x24>)
 8000fb6:	f001 fb7b 	bl	80026b0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fba:	2014      	movs	r0, #20
 8000fbc:	f001 f8da 	bl	8002174 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <ST7789_HardReset+0x24>)
 8000fc6:	f001 fb73 	bl	80026b0 <HAL_GPIO_WritePin>

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline static void ST7789_SendCmd(uint8_t Cmd){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <ST7789_SendCmd+0x44>)
 8000fe4:	f001 fb64 	bl	80026b0 <HAL_GPIO_WritePin>

		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 8000fe8:	1df9      	adds	r1, r7, #7
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	2201      	movs	r2, #1
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <ST7789_SendCmd+0x48>)
 8000ff2:	f002 f9fc 	bl	80033ee <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8000ff6:	bf00      	nop
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <ST7789_SendCmd+0x48>)
 8000ffa:	f002 fb2c 	bl	8003656 <HAL_SPI_GetState>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d1f9      	bne.n	8000ff8 <ST7789_SendCmd+0x24>

		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <ST7789_SendCmd+0x44>)
 800100a:	f001 fb51 	bl	80026b0 <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;

	#endif
	//-----------------------------------------------------------------------------------

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020000 	.word	0x40020000
 800101c:	2000015c 	.word	0x2000015c

08001020 <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline static void ST7789_SendData(uint8_t Data ){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 800102a:	1df9      	adds	r1, r7, #7
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	2201      	movs	r2, #1
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <ST7789_SendData+0x30>)
 8001034:	f002 f9db 	bl	80033ee <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001038:	bf00      	nop
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <ST7789_SendData+0x30>)
 800103c:	f002 fb0b 	bl	8003656 <HAL_SPI_GetState>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d1f9      	bne.n	800103a <ST7789_SendData+0x1a>
*/		//================================================================================

	#endif
	//-----------------------------------------------------------------------------------

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000015c 	.word	0x2000015c

08001054 <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline static void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		if( buff_size <= 0xFFFF ){
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d21a      	bcs.n	800109c <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4816      	ldr	r0, [pc, #88]	; (80010cc <ST7789_SendDataMASS+0x78>)
 8001072:	f002 f9bc 	bl	80033ee <HAL_SPI_Transmit>
 8001076:	e01d      	b.n	80010b4 <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4812      	ldr	r0, [pc, #72]	; (80010cc <ST7789_SendDataMASS+0x78>)
 8001084:	f002 f9b3 	bl	80033ee <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800108e:	3bff      	subs	r3, #255	; 0xff
 8001090:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001098:	33ff      	adds	r3, #255	; 0xff
 800109a:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d2e9      	bcs.n	8001078 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <ST7789_SendDataMASS+0x78>)
 80010b0:	f002 f99d 	bl	80033ee <HAL_SPI_Transmit>
		}

		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 80010b4:	bf00      	nop
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <ST7789_SendDataMASS+0x78>)
 80010b8:	f002 facd 	bl	8003656 <HAL_SPI_GetState>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d1f9      	bne.n	80010b6 <ST7789_SendDataMASS+0x62>
*/		//================================================================================

	#endif
	//-----------------------------------------------------------------------------------

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000015c 	.word	0x2000015c

080010d0 <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]

  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <ST7789_FillScreen+0x2c>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <ST7789_FillScreen+0x30>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b219      	sxth	r1, r3
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	460b      	mov	r3, r1
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f808 	bl	8001104 <ST7789_FillRect>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000098 	.word	0x20000098
 8001100:	2000009a 	.word	0x2000009a

08001104 <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]

  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 8001122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <ST7789_FillRect+0xb4>)
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	4293      	cmp	r3, r2
 800112c:	da40      	bge.n	80011b0 <ST7789_FillRect+0xac>
 800112e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <ST7789_FillRect+0xb8>)
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	4293      	cmp	r3, r2
 8001138:	da3a      	bge.n	80011b0 <ST7789_FillRect+0xac>
	  return;
  }

  if ((x + w) > ST7789_Width){
 800113a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800113e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <ST7789_FillRect+0xb4>)
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	4293      	cmp	r3, r2
 800114a:	dd05      	ble.n	8001158 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <ST7789_FillRect+0xb4>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	807b      	strh	r3, [r7, #2]
  }

  if ((y + h) > ST7789_Height){
 8001158:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800115c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001160:	4413      	add	r3, r2
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <ST7789_FillRect+0xb8>)
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	4293      	cmp	r3, r2
 8001168:	dd05      	ble.n	8001176 <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <ST7789_FillRect+0xb8>)
 800116c:	881a      	ldrh	r2, [r3, #0]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	803b      	strh	r3, [r7, #0]
				buff_frame[( y + i ) * ST7789_Width + x + j] = ((color & 0xFF)<<8) | (color >> 8 );
			}
		}
	}
#else	//если попиксельный вывод
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	88b9      	ldrh	r1, [r7, #4]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29c      	uxth	r4, r3
 8001186:	88ba      	ldrh	r2, [r7, #4]
 8001188:	883b      	ldrh	r3, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	4622      	mov	r2, r4
 8001194:	f000 f814 	bl	80011c0 <ST7789_SetWindow>

  ST7789_RamWrite(&color, (h * w));
 8001198:	f9b7 3000 	ldrsh.w	r3, [r7]
 800119c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	f107 0018 	add.w	r0, r7, #24
 80011aa:	f000 f82f 	bl	800120c <ST7789_RamWrite>
 80011ae:	e000      	b.n	80011b2 <ST7789_FillRect+0xae>
	  return;
 80011b0:	bf00      	nop
#endif
}
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	20000098 	.word	0x20000098
 80011bc:	2000009a 	.word	0x2000009a

080011c0 <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
static void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	80bb      	strh	r3, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	807b      	strh	r3, [r7, #2]
 80011da:	4613      	mov	r3, r2
 80011dc:	803b      	strh	r3, [r7, #0]

	ST7789_Select();
 80011de:	f7ff fe3b 	bl	8000e58 <ST7789_Select>

	ST7789_ColumnSet(x0, x1);
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f833 	bl	8001254 <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 80011ee:	883a      	ldrh	r2, [r7, #0]
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f86f 	bl	80012d8 <ST7789_RowSet>

	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 80011fa:	202c      	movs	r0, #44	; 0x2c
 80011fc:	f7ff feea 	bl	8000fd4 <ST7789_SendCmd>

	ST7789_Unselect();
 8001200:	f7ff fe31 	bl	8000e66 <ST7789_Unselect>

}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}

0800120c <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
static void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]

  ST7789_Select();
 8001216:	f7ff fe1f 	bl	8000e58 <ST7789_Select>

  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	b29b      	uxth	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	737b      	strb	r3, [r7, #13]

  while (Len--){
 800122e:	e005      	b.n	800123c <ST7789_RamWrite+0x30>
	  ST7789_SendDataMASS( buff, 2);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff0c 	bl	8001054 <ST7789_SendDataMASS>
  while (Len--){
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	603a      	str	r2, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f4      	bne.n	8001230 <ST7789_RamWrite+0x24>
  }

  ST7789_Unselect();
 8001246:	f7ff fe0e 	bl	8000e66 <ST7789_Unselect>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
static void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]

  if (ColumnStart > ColumnEnd){
 8001264:	88fa      	ldrh	r2, [r7, #6]
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	d82a      	bhi.n	80012c2 <ST7789_ColumnSet+0x6e>
    return;
  }

  if (ColumnEnd > ST7789_Width){
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <ST7789_ColumnSet+0x7c>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	88ba      	ldrh	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d827      	bhi.n	80012c6 <ST7789_ColumnSet+0x72>
    return;
  }

  ColumnStart += ST7789_X_Start;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <ST7789_ColumnSet+0x80>)
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4413      	add	r3, r2
 800127e:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <ST7789_ColumnSet+0x80>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	80bb      	strh	r3, [r7, #4]

  ST7789_SendCmd(ST7789_CASET);
 800128a:	202a      	movs	r0, #42	; 0x2a
 800128c:	f7ff fea2 	bl	8000fd4 <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b29b      	uxth	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fec1 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff febc 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff feb5 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb0 	bl	8001020 <ST7789_SendData>
 80012c0:	e002      	b.n	80012c8 <ST7789_ColumnSet+0x74>
    return;
 80012c2:	bf00      	nop
 80012c4:	e000      	b.n	80012c8 <ST7789_ColumnSet+0x74>
    return;
 80012c6:	bf00      	nop

}
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000098 	.word	0x20000098
 80012d4:	20000094 	.word	0x20000094

080012d8 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
static void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	80fb      	strh	r3, [r7, #6]
 80012e4:	4613      	mov	r3, r2
 80012e6:	80bb      	strh	r3, [r7, #4]

  if (RowStart > RowEnd){
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d82a      	bhi.n	8001346 <ST7789_RowSet+0x6e>
    return;
  }

  if (RowEnd > ST7789_Height){
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <ST7789_RowSet+0x7c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d827      	bhi.n	800134a <ST7789_RowSet+0x72>
    return;
  }

  RowStart += ST7789_Y_Start;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <ST7789_RowSet+0x80>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4413      	add	r3, r2
 8001302:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <ST7789_RowSet+0x80>)
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	80bb      	strh	r3, [r7, #4]

  ST7789_SendCmd(ST7789_RASET);
 800130e:	202b      	movs	r0, #43	; 0x2b
 8001310:	f7ff fe60 	bl	8000fd4 <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe7f 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe7a 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe73 	bl	8001020 <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe6e 	bl	8001020 <ST7789_SendData>
 8001344:	e002      	b.n	800134c <ST7789_RowSet+0x74>
    return;
 8001346:	bf00      	nop
 8001348:	e000      	b.n	800134c <ST7789_RowSet+0x74>
    return;
 800134a:	bf00      	nop

}
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000009a 	.word	0x2000009a
 8001358:	20000096 	.word	0x20000096

0800135c <ST7789_DrawRectangle>:


//==============================================================================
// Процедура рисования прямоугольника ( пустотелый )
//==============================================================================
void ST7789_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b085      	sub	sp, #20
 8001360:	af02      	add	r7, sp, #8
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4623      	mov	r3, r4
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4603      	mov	r3, r0
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	803b      	strh	r3, [r7, #0]

  ST7789_DrawLine(x1, y1, x1, y2, color);
 800137a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800137e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001382:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001386:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800138a:	8b3b      	ldrh	r3, [r7, #24]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	f000 f90a 	bl	80015a8 <ST7789_DrawLine>
  ST7789_DrawLine(x2, y1, x2, y2, color);
 8001394:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001398:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800139c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013a0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80013a4:	8b3b      	ldrh	r3, [r7, #24]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4623      	mov	r3, r4
 80013aa:	f000 f8fd 	bl	80015a8 <ST7789_DrawLine>
  ST7789_DrawLine(x1, y1, x2, y1, color);
 80013ae:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80013b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013be:	8b3b      	ldrh	r3, [r7, #24]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4623      	mov	r3, r4
 80013c4:	f000 f8f0 	bl	80015a8 <ST7789_DrawLine>
  ST7789_DrawLine(x1, y2, x2, y2, color);
 80013c8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80013cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80013d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013d8:	8b3b      	ldrh	r3, [r7, #24]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4623      	mov	r3, r4
 80013de:	f000 f8e3 	bl	80015a8 <ST7789_DrawLine>

}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}

080013ea <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
static void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]

  int16_t TempValue = *pValue1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	801a      	strh	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8001416:	b590      	push	{r4, r7, lr}
 8001418:	b085      	sub	sp, #20
 800141a:	af02      	add	r7, sp, #8
 800141c:	4604      	mov	r4, r0
 800141e:	4608      	mov	r0, r1
 8001420:	4611      	mov	r1, r2
 8001422:	461a      	mov	r2, r3
 8001424:	4623      	mov	r3, r4
 8001426:	80fb      	strh	r3, [r7, #6]
 8001428:	4603      	mov	r3, r0
 800142a:	80bb      	strh	r3, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	803b      	strh	r3, [r7, #0]

  if (x1 > x2){
 8001434:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143c:	429a      	cmp	r2, r3
 800143e:	dd05      	ble.n	800144c <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 8001440:	1cba      	adds	r2, r7, #2
 8001442:	1dbb      	adds	r3, r7, #6
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ffcf 	bl	80013ea <SwapInt16Values>
  }

  if (y1 > y2){
 800144c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001450:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001454:	429a      	cmp	r2, r3
 8001456:	dd05      	ble.n	8001464 <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 8001458:	463a      	mov	r2, r7
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffc3 	bl	80013ea <SwapInt16Values>
  }

  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 8001464:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001468:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800146c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001470:	b29a      	uxth	r2, r3
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	b29b      	uxth	r3, r3
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b29b      	uxth	r3, r3
 800147c:	b21c      	sxth	r4, r3
 800147e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001482:	b29a      	uxth	r2, r3
 8001484:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	b21a      	sxth	r2, r3
 8001490:	8b3b      	ldrh	r3, [r7, #24]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	4622      	mov	r2, r4
 8001498:	f7ff fe34 	bl	8001104 <ST7789_FillRect>
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
static void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	803b      	strh	r3, [r7, #0]

  const int16_t deltaX = abs(x2 - x1);
 80014c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bfb8      	it	lt
 80014d0:	425b      	neglt	r3, r3
 80014d2:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 80014d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bfb8      	it	lt
 80014e2:	425b      	neglt	r3, r3
 80014e4:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 80014e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	da01      	bge.n	80014f6 <ST7789_DrawLine_Slow+0x52>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e001      	b.n	80014fa <ST7789_DrawLine_Slow+0x56>
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80014fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001500:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001504:	429a      	cmp	r2, r3
 8001506:	da01      	bge.n	800150c <ST7789_DrawLine_Slow+0x68>
 8001508:	2301      	movs	r3, #1
 800150a:	e001      	b.n	8001510 <ST7789_DrawLine_Slow+0x6c>
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8001512:	8aba      	ldrh	r2, [r7, #20]
 8001514:	8a7b      	ldrh	r3, [r7, #18]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 800151c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800151e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001522:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f8bc 	bl	80016a4 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 800152c:	e02c      	b.n	8001588 <ST7789_DrawLine_Slow+0xe4>

    ST7789_DrawPixel(x1, y1, color);
 800152e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001530:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f8b3 	bl	80016a4 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	81bb      	strh	r3, [r7, #12]

    if (error2 > -deltaY) {
 8001546:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800154a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800154e:	425b      	negs	r3, r3
 8001550:	429a      	cmp	r2, r3
 8001552:	dd09      	ble.n	8001568 <ST7789_DrawLine_Slow+0xc4>

      error -= deltaY;
 8001554:	8afa      	ldrh	r2, [r7, #22]
 8001556:	8a7b      	ldrh	r3, [r7, #18]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	8a3b      	ldrh	r3, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 8001568:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800156c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	da09      	bge.n	8001588 <ST7789_DrawLine_Slow+0xe4>

      error += deltaX;
 8001574:	8afa      	ldrh	r2, [r7, #22]
 8001576:	8abb      	ldrh	r3, [r7, #20]
 8001578:	4413      	add	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 800157e:	88ba      	ldrh	r2, [r7, #4]
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 8001588:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800158c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001590:	429a      	cmp	r2, r3
 8001592:	d1cc      	bne.n	800152e <ST7789_DrawLine_Slow+0x8a>
 8001594:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001598:	f9b7 3000 	ldrsh.w	r3, [r7]
 800159c:	429a      	cmp	r2, r3
 800159e:	d1c6      	bne.n	800152e <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd90      	pop	{r4, r7, pc}

080015a8 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4604      	mov	r4, r0
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4623      	mov	r3, r4
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	4603      	mov	r3, r0
 80015bc:	80bb      	strh	r3, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	807b      	strh	r3, [r7, #2]
 80015c2:	4613      	mov	r3, r2
 80015c4:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 80015c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d129      	bne.n	8001626 <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 80015d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd11      	ble.n	8001602 <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 80015de:	88ba      	ldrh	r2, [r7, #4]
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	f9b7 1000 	ldrsh.w	r1, [r7]
 80015f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015f4:	8b3b      	ldrh	r3, [r7, #24]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fd82 	bl	8001104 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}

    return;
 8001600:	e04c      	b.n	800169c <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 8001602:	883a      	ldrh	r2, [r7, #0]
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	3301      	adds	r3, #1
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21a      	sxth	r2, r3
 8001610:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001614:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	2201      	movs	r2, #1
 8001620:	f7ff fd70 	bl	8001104 <ST7789_FillRect>
    return;
 8001624:	e03a      	b.n	800169c <ST7789_DrawLine+0xf4>
  }

  if (y1 == y2){
 8001626:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800162a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800162e:	429a      	cmp	r2, r3
 8001630:	d127      	bne.n	8001682 <ST7789_DrawLine+0xda>

    if (x1 > x2){
 8001632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800163a:	429a      	cmp	r2, r3
 800163c:	dd10      	ble.n	8001660 <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	3301      	adds	r3, #1
 8001648:	b29b      	uxth	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001650:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001654:	8b3b      	ldrh	r3, [r7, #24]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	f7ff fd53 	bl	8001104 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}

    return;
 800165e:	e01d      	b.n	800169c <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	3301      	adds	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	b21a      	sxth	r2, r3
 800166e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001672:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001676:	8b3b      	ldrh	r3, [r7, #24]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	f7ff fd42 	bl	8001104 <ST7789_FillRect>
    return;
 8001680:	e00c      	b.n	800169c <ST7789_DrawLine+0xf4>
  }

  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 8001682:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001686:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800168a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800168e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001692:	8b3b      	ldrh	r3, [r7, #24]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	f7ff ff04 	bl	80014a4 <ST7789_DrawLine_Slow>
}
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
	...

080016a4 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
 80016ae:	460b      	mov	r3, r1
 80016b0:	80bb      	strh	r3, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	807b      	strh	r3, [r7, #2]

  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db1b      	blt.n	80016f6 <ST7789_DrawPixel+0x52>
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <ST7789_DrawPixel+0x5c>)
 80016c4:	8812      	ldrh	r2, [r2, #0]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	da15      	bge.n	80016f6 <ST7789_DrawPixel+0x52>
 80016ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db11      	blt.n	80016f6 <ST7789_DrawPixel+0x52>
 80016d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <ST7789_DrawPixel+0x60>)
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	4293      	cmp	r3, r2
 80016dc:	da0b      	bge.n	80016f6 <ST7789_DrawPixel+0x52>
  }

#if FRAME_BUFFER	// если включен буфер кадра
	buff_frame[y * ST7789_Width + x] = ((color & 0xFF)<<8) | (color >> 8 );
#else	//если попиксельный вывод
  ST7789_SetWindow(x, y, x, y);
 80016de:	88f8      	ldrh	r0, [r7, #6]
 80016e0:	88b9      	ldrh	r1, [r7, #4]
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	f7ff fd6b 	bl	80011c0 <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 80016ea:	1cbb      	adds	r3, r7, #2
 80016ec:	2101      	movs	r1, #1
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fd8c 	bl	800120c <ST7789_RamWrite>
 80016f4:	e000      	b.n	80016f8 <ST7789_DrawPixel+0x54>
    return;
 80016f6:	bf00      	nop
#endif
}
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000098 	.word	0x20000098
 8001704:	2000009a 	.word	0x2000009a

08001708 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af02      	add	r7, sp, #8
 800170e:	4604      	mov	r4, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	4603      	mov	r3, r0
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]

  int x = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  int y = radius;
 800172a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800172e:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 8001730:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	f1c3 0301 	rsb	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
  int error = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 8001740:	e075      	b.n	800182e <ST7789_DrawCircleFilled+0x126>

    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	b29a      	uxth	r2, r3
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	b218      	sxth	r0, r3
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	b29b      	uxth	r3, r3
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	b219      	sxth	r1, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	b29a      	uxth	r2, r3
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	b21c      	sxth	r4, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	b29a      	uxth	r2, r3
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	b21a      	sxth	r2, r3
 8001772:	883b      	ldrh	r3, [r7, #0]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	4622      	mov	r2, r4
 800177a:	f7ff ff15 	bl	80015a8 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 800177e:	88fa      	ldrh	r2, [r7, #6]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	b29b      	uxth	r3, r3
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	b218      	sxth	r0, r3
 800178a:	88ba      	ldrh	r2, [r7, #4]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	b29b      	uxth	r3, r3
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	b29b      	uxth	r3, r3
 8001794:	b219      	sxth	r1, r3
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	b29b      	uxth	r3, r3
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b21c      	sxth	r4, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	883b      	ldrh	r3, [r7, #0]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	4622      	mov	r2, r4
 80017b6:	f7ff fef7 	bl	80015a8 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da0c      	bge.n	80017e6 <ST7789_DrawCircleFilled+0xde>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	dc09      	bgt.n	80017e6 <ST7789_DrawCircleFilled+0xde>

      ++x;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	3301      	adds	r3, #1
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
      continue;
 80017e4:	e023      	b.n	800182e <ST7789_DrawCircleFilled+0x126>
    }

    error = 2 * (delta - x) - 1;
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]

    if (delta > 0 && error > 0) {
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0d      	ble.n	8001814 <ST7789_DrawCircleFilled+0x10c>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	dd0a      	ble.n	8001814 <ST7789_DrawCircleFilled+0x10c>

      --y;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3b01      	subs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	f1c3 0301 	rsb	r3, r3, #1
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
      continue;
 8001812:	e00c      	b.n	800182e <ST7789_DrawCircleFilled+0x126>
    }

    ++x;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4413      	add	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
    --y;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3b01      	subs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da86      	bge.n	8001742 <ST7789_DrawCircleFilled+0x3a>
  }
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	803b      	strh	r3, [r7, #0]

	uint32_t i, b, j;

	uint32_t X = x, Y = y;
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

	uint8_t xx, yy;

	if( multiplier < 1 ){
 8001862:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <ST7789_DrawChar+0x34>
		multiplier = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 8001870:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <ST7789_DrawChar+0x278>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	4413      	add	r3, r2
 800187e:	4299      	cmp	r1, r3
 8001880:	da09      	bge.n	8001896 <ST7789_DrawChar+0x5a>
 8001882:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <ST7789_DrawChar+0x27c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800188c:	7852      	ldrb	r2, [r2, #1]
 800188e:	4413      	add	r3, r2
 8001890:	4299      	cmp	r1, r3
 8001892:	f2c0 8154 	blt.w	8001b3e <ST7789_DrawChar+0x302>


			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e149      	b.n	8001b30 <ST7789_DrawChar+0x2f4>

				if( ch < 127 ){
 800189c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018a0:	2b7e      	cmp	r3, #126	; 0x7e
 80018a2:	d810      	bhi.n	80018c6 <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018ac:	3b20      	subs	r3, #32
 80018ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018b0:	7849      	ldrb	r1, [r1, #1]
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	440b      	add	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	e0b8      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch > 191 ){
 80018c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018ca:	2bbf      	cmp	r3, #191	; 0xbf
 80018cc:	d910      	bls.n	80018f0 <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом
					// только кирилицу то нужно добавлять 95 если шрифт
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 80018ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018d6:	3b60      	subs	r3, #96	; 0x60
 80018d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018da:	7849      	ldrb	r1, [r1, #1]
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	440b      	add	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	e0a3      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 80018f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018f4:	2ba8      	cmp	r3, #168	; 0xa8
 80018f6:	d110      	bne.n	800191a <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё )
					b = Font->data[( 160 ) * Font->FontHeight + i];
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fe:	785b      	ldrb	r3, [r3, #1]
 8001900:	4619      	mov	r1, r3
 8001902:	460b      	mov	r3, r1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	015b      	lsls	r3, r3, #5
 800190a:	4619      	mov	r1, r3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	440b      	add	r3, r1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	e08e      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 800191a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800191e:	2bb8      	cmp	r3, #184	; 0xb8
 8001920:	d111      	bne.n	8001946 <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё )
					b = Font->data[( 161 ) * Font->FontHeight + i];
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	461a      	mov	r2, r3
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	015b      	lsls	r3, r3, #5
 8001934:	4413      	add	r3, r2
 8001936:	461a      	mov	r2, r3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e078      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------

				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 8001946:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800194a:	2baa      	cmp	r3, #170	; 0xaa
 800194c:	d10f      	bne.n	800196e <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	4619      	mov	r1, r3
 8001958:	23a2      	movs	r3, #162	; 0xa2
 800195a:	fb03 f301 	mul.w	r3, r3, r1
 800195e:	4619      	mov	r1, r3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	440b      	add	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	e064      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 800196e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001972:	2baf      	cmp	r3, #175	; 0xaf
 8001974:	d10f      	bne.n	8001996 <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	4619      	mov	r1, r3
 8001980:	23a3      	movs	r3, #163	; 0xa3
 8001982:	fb03 f301 	mul.w	r3, r3, r1
 8001986:	4619      	mov	r1, r3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	440b      	add	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	e050      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001996:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800199a:	2bb2      	cmp	r3, #178	; 0xb2
 800199c:	d10f      	bne.n	80019be <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 800199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	4619      	mov	r1, r3
 80019a8:	23a4      	movs	r3, #164	; 0xa4
 80019aa:	fb03 f301 	mul.w	r3, r3, r1
 80019ae:	4619      	mov	r1, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	440b      	add	r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	e03c      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 80019be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019c2:	2bb3      	cmp	r3, #179	; 0xb3
 80019c4:	d111      	bne.n	80019ea <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	4619      	mov	r1, r3
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0159      	lsls	r1, r3, #5
 80019d8:	440b      	add	r3, r1
 80019da:	4619      	mov	r1, r3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	440b      	add	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	e026      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 80019ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019ee:	2bba      	cmp	r3, #186	; 0xba
 80019f0:	d10f      	bne.n	8001a12 <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 80019f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	785b      	ldrb	r3, [r3, #1]
 80019fa:	4619      	mov	r1, r3
 80019fc:	23a6      	movs	r3, #166	; 0xa6
 80019fe:	fb03 f301 	mul.w	r3, r3, r1
 8001a02:	4619      	mov	r1, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	440b      	add	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e012      	b.n	8001a38 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 8001a12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a16:	2bbf      	cmp	r3, #191	; 0xbf
 8001a18:	d10e      	bne.n	8001a38 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	4619      	mov	r1, r3
 8001a24:	23a7      	movs	r3, #167	; 0xa7
 8001a26:	fb03 f301 	mul.w	r3, r3, r1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------

				for (j = 0; j < Font->FontWidth; j++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e068      	b.n	8001b10 <ST7789_DrawChar+0x2d4>

					if ((b << j) & 0x8000) {
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d028      	beq.n	8001aa0 <ST7789_DrawChar+0x264>

						for (yy = 0; yy < multiplier; yy++){
 8001a4e:	2300      	movs	r3, #0
 8001a50:	72bb      	strb	r3, [r7, #10]
 8001a52:	e01f      	b.n	8001a94 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 8001a54:	2300      	movs	r3, #0
 8001a56:	72fb      	strb	r3, [r7, #11]
 8001a58:	e014      	b.n	8001a84 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b218      	sxth	r0, r3
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff fe13 	bl	80016a4 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	3301      	adds	r3, #1
 8001a82:	72fb      	strb	r3, [r7, #11]
 8001a84:	7afa      	ldrb	r2, [r7, #11]
 8001a86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3e5      	bcc.n	8001a5a <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 8001a8e:	7abb      	ldrb	r3, [r7, #10]
 8001a90:	3301      	adds	r3, #1
 8001a92:	72bb      	strb	r3, [r7, #10]
 8001a94:	7aba      	ldrb	r2, [r7, #10]
 8001a96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3da      	bcc.n	8001a54 <ST7789_DrawChar+0x218>
 8001a9e:	e02f      	b.n	8001b00 <ST7789_DrawChar+0x2c4>
							}
						}

					}
					else if( TransparentBg ){
 8001aa0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02b      	beq.n	8001b00 <ST7789_DrawChar+0x2c4>

						for (yy = 0; yy < multiplier; yy++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	72bb      	strb	r3, [r7, #10]
 8001aac:	e023      	b.n	8001af6 <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72fb      	strb	r3, [r7, #11]
 8001ab2:	e018      	b.n	8001ae6 <ST7789_DrawChar+0x2aa>
 8001ab4:	20000098 	.word	0x20000098
 8001ab8:	2000009a 	.word	0x2000009a
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b218      	sxth	r0, r3
 8001aca:	7abb      	ldrb	r3, [r7, #10]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	883a      	ldrh	r2, [r7, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff fde2 	bl	80016a4 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	72fb      	strb	r3, [r7, #11]
 8001ae6:	7afa      	ldrb	r2, [r7, #11]
 8001ae8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3e5      	bcc.n	8001abc <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8001af0:	7abb      	ldrb	r3, [r7, #10]
 8001af2:	3301      	adds	r3, #1
 8001af4:	72bb      	strb	r3, [r7, #10]
 8001af6:	7aba      	ldrb	r2, [r7, #10]
 8001af8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3d6      	bcc.n	8001aae <ST7789_DrawChar+0x272>
							}
						}

					}
					X = X + multiplier;
 8001b00:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d390      	bcc.n	8001a3e <ST7789_DrawChar+0x202>
				}
				X = x;
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8001b20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	461a      	mov	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	f4ff aeaf 	bcc.w	800189c <ST7789_DrawChar+0x60>
			}
	}
}
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop

08001b48 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]
 8001b62:	4613      	mov	r3, r2
 8001b64:	803b      	strh	r3, [r7, #0]

	if( multiplier < 1 ){
 8001b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <ST7789_print+0x2c>
		multiplier = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}

	unsigned char buff_char;

	uint16_t len = strlen(str);
 8001b74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81bb      	strh	r3, [r7, #12]

	while (len--) {
 8001b7e:	e09c      	b.n	8001cba <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2bbf      	cmp	r3, #191	; 0xbf
 8001b86:	d977      	bls.n	8001c78 <ST7789_print+0x130>

			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2bd0      	cmp	r3, #208	; 0xd0
 8001b8e:	d002      	beq.n	8001b96 <ST7789_print+0x4e>
 8001b90:	2bd1      	cmp	r3, #209	; 0xd1
 8001b92:	d02c      	beq.n	8001bee <ST7789_print+0xa6>
 8001b94:	e05b      	b.n	8001c4e <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b8f      	cmp	r3, #143	; 0x8f
 8001ba2:	d908      	bls.n	8001bb6 <ST7789_print+0x6e>
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2bbf      	cmp	r3, #191	; 0xbf
 8001baa:	d804      	bhi.n	8001bb6 <ST7789_print+0x6e>
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001bb4:	e048      	b.n	8001c48 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b81      	cmp	r3, #129	; 0x81
 8001bbc:	d102      	bne.n	8001bc4 <ST7789_print+0x7c>
 8001bbe:	23a8      	movs	r3, #168	; 0xa8
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e044      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b84      	cmp	r3, #132	; 0x84
 8001bca:	d102      	bne.n	8001bd2 <ST7789_print+0x8a>
 8001bcc:	23aa      	movs	r3, #170	; 0xaa
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e03d      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b86      	cmp	r3, #134	; 0x86
 8001bd8:	d102      	bne.n	8001be0 <ST7789_print+0x98>
 8001bda:	23b2      	movs	r3, #178	; 0xb2
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e036      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b87      	cmp	r3, #135	; 0x87
 8001be6:	d12f      	bne.n	8001c48 <ST7789_print+0x100>
 8001be8:	23af      	movs	r3, #175	; 0xaf
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e02f      	b.n	8001c4e <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da08      	bge.n	8001c10 <ST7789_print+0xc8>
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b8f      	cmp	r3, #143	; 0x8f
 8001c04:	d804      	bhi.n	8001c10 <ST7789_print+0xc8>
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	3370      	adds	r3, #112	; 0x70
 8001c0c:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001c0e:	e01d      	b.n	8001c4c <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b91      	cmp	r3, #145	; 0x91
 8001c16:	d102      	bne.n	8001c1e <ST7789_print+0xd6>
 8001c18:	23b8      	movs	r3, #184	; 0xb8
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e017      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b94      	cmp	r3, #148	; 0x94
 8001c24:	d102      	bne.n	8001c2c <ST7789_print+0xe4>
 8001c26:	23ba      	movs	r3, #186	; 0xba
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e010      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b96      	cmp	r3, #150	; 0x96
 8001c32:	d102      	bne.n	8001c3a <ST7789_print+0xf2>
 8001c34:	23b3      	movs	r3, #179	; 0xb3
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e009      	b.n	8001c4e <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b97      	cmp	r3, #151	; 0x97
 8001c40:	d104      	bne.n	8001c4c <ST7789_print+0x104>
 8001c42:	23bf      	movs	r3, #191	; 0xbf
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e002      	b.n	8001c4e <ST7789_print+0x106>
					break;
 8001c48:	bf00      	nop
 8001c4a:	e000      	b.n	8001c4e <ST7789_print+0x106>
					break;
 8001c4c:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001c4e:	89bb      	ldrh	r3, [r7, #12]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	81bb      	strh	r3, [r7, #12]

			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8001c54:	883c      	ldrh	r4, [r7, #0]
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	88b9      	ldrh	r1, [r7, #4]
 8001c5a:	88f8      	ldrh	r0, [r7, #6]
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4623      	mov	r3, r4
 8001c72:	f7ff fde3 	bl	800183c <ST7789_DrawChar>
 8001c76:	e011      	b.n	8001c9c <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	883c      	ldrh	r4, [r7, #0]
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	88b9      	ldrh	r1, [r7, #4]
 8001c82:	88f8      	ldrh	r0, [r7, #6]
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4623      	mov	r3, r4
 8001c98:	f7ff fdd0 	bl	800183c <ST7789_DrawChar>
		}

		x = x + (Font->FontWidth * multiplier);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	fb12 f303 	smulbb	r3, r2, r3
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8001cba:	89bb      	ldrh	r3, [r7, #12]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	81ba      	strh	r2, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f af5d 	bne.w	8001b80 <ST7789_print+0x38>
	}
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
	...

08001cd0 <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]

	ST7789_Select();
 8001cda:	f7ff f8bd 	bl	8000e58 <ST7789_Select>

	ST7789_SendCmd(ST7789_MADCTL);
 8001cde:	2036      	movs	r0, #54	; 0x36
 8001ce0:	f7ff f978 	bl	8000fd4 <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d857      	bhi.n	8001d9c <ST7789_rotation+0xcc>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <ST7789_rotation+0x24>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d2b 	.word	0x08001d2b
 8001cfc:	08001d51 	.word	0x08001d51
 8001d00:	08001d77 	.word	0x08001d77
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_RGB);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff f98b 	bl	8001020 <ST7789_SendData>
				ST7789_Width = 240;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <ST7789_rotation+0xdc>)
 8001d0c:	22f0      	movs	r2, #240	; 0xf0
 8001d0e:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <ST7789_rotation+0xe0>)
 8001d12:	22f0      	movs	r2, #240	; 0xf0
 8001d14:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <ST7789_rotation+0xe4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <ST7789_rotation+0xe8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff f9d4 	bl	80010d0 <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001d28:	e039      	b.n	8001d9e <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d2a:	2060      	movs	r0, #96	; 0x60
 8001d2c:	f7ff f978 	bl	8001020 <ST7789_SendData>
				ST7789_Width = 240;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <ST7789_rotation+0xdc>)
 8001d32:	22f0      	movs	r2, #240	; 0xf0
 8001d34:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <ST7789_rotation+0xe0>)
 8001d38:	22f0      	movs	r2, #240	; 0xf0
 8001d3a:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <ST7789_rotation+0xe4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <ST7789_rotation+0xe8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff f9c1 	bl	80010d0 <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001d4e:	e026      	b.n	8001d9e <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001d50:	20c0      	movs	r0, #192	; 0xc0
 8001d52:	f7ff f965 	bl	8001020 <ST7789_SendData>
				ST7789_Width = 240;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <ST7789_rotation+0xdc>)
 8001d58:	22f0      	movs	r2, #240	; 0xf0
 8001d5a:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <ST7789_rotation+0xe0>)
 8001d5e:	22f0      	movs	r2, #240	; 0xf0
 8001d60:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <ST7789_rotation+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 80;
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <ST7789_rotation+0xe8>)
 8001d6a:	2250      	movs	r2, #80	; 0x50
 8001d6c:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff f9ae 	bl	80010d0 <ST7789_FillScreen>
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================

		 break;
 8001d74:	e013      	b.n	8001d9e <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d76:	20a0      	movs	r0, #160	; 0xa0
 8001d78:	f7ff f952 	bl	8001020 <ST7789_SendData>
				ST7789_Width = 240;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <ST7789_rotation+0xdc>)
 8001d7e:	22f0      	movs	r2, #240	; 0xf0
 8001d80:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <ST7789_rotation+0xe0>)
 8001d84:	22f0      	movs	r2, #240	; 0xf0
 8001d86:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 80;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <ST7789_rotation+0xe4>)
 8001d8a:	2250      	movs	r2, #80	; 0x50
 8001d8c:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <ST7789_rotation+0xe8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff f99b 	bl	80010d0 <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001d9a:	e000      	b.n	8001d9e <ST7789_rotation+0xce>

	   default:
		 break;
 8001d9c:	bf00      	nop
	  }

	  ST7789_Unselect();
 8001d9e:	f7ff f862 	bl	8000e66 <ST7789_Unselect>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000098 	.word	0x20000098
 8001db0:	2000009a 	.word	0x2000009a
 8001db4:	20000094 	.word	0x20000094
 8001db8:	20000096 	.word	0x20000096

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_MspInit+0x54>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_MspInit+0x54>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_MspInit+0x54>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_MspInit+0x54>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_MspInit+0x54>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_MspInit+0x54>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	210f      	movs	r1, #15
 8001dfe:	f06f 0001 	mvn.w	r0, #1
 8001e02:	f000 fa91 	bl	8002328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_RTC_MspInit+0x24>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d102      	bne.n	8001e2c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RTC_MspInit+0x28>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40002800 	.word	0x40002800
 8001e3c:	42470e3c 	.word	0x42470e3c

08001e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_SPI_MspInit+0xc0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d14a      	bne.n	8001ef8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_SPI_MspInit+0xc4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <HAL_SPI_MspInit+0xc8>)
 8001ed2:	f000 fa53 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <HAL_SPI_MspInit+0xcc>)
 8001ef4:	f000 fa42 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020400 	.word	0x40020400

08001f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	2037      	movs	r0, #55	; 0x37
 8001f26:	f000 f9ff 	bl	8002328 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f2a:	2037      	movs	r0, #55	; 0x37
 8001f2c:	f000 fa18 	bl	8002360 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_InitTick+0xa4>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_InitTick+0xa4>)
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_InitTick+0xa4>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f4c:	f107 0210 	add.w	r2, r7, #16
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 ffec 	bl	8002f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f5c:	f000 ffd6 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8001f60:	4603      	mov	r3, r0
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_InitTick+0xa8>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	3b01      	subs	r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_InitTick+0xac>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <HAL_InitTick+0xb0>)
 8001f78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_InitTick+0xac>)
 8001f7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f80:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_InitTick+0xac>)
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_InitTick+0xac>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_InitTick+0xac>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <HAL_InitTick+0xac>)
 8001f96:	f001 fc19 	bl	80037cc <HAL_TIM_Base_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001fa0:	4806      	ldr	r0, [pc, #24]	; (8001fbc <HAL_InitTick+0xac>)
 8001fa2:	f001 fc48 	bl	8003836 <HAL_TIM_Base_Start_IT>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3730      	adds	r7, #48	; 0x30
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	200001d8 	.word	0x200001d8
 8001fc0:	40001400 	.word	0x40001400

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM7_IRQHandler+0x10>)
 8001ff6:	f001 fc42 	bl	800387e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200001d8 	.word	0x200001d8

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f001 fff8 	bl	8004028 <__errno>
 8002038:	4602      	mov	r2, r0
 800203a:	230c      	movs	r3, #12
 800203c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20020000 	.word	0x20020000
 8002064:	00000400 	.word	0x00000400
 8002068:	2000009c 	.word	0x2000009c
 800206c:	20000220 	.word	0x20000220

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <SystemInit+0x28>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <SystemInit+0x28>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SystemInit+0x28>)
 8002086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208a:	609a      	str	r2, [r3, #8]
#endif
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020a2:	e003      	b.n	80020ac <LoopCopyDataInit>

080020a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020aa:	3104      	adds	r1, #4

080020ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020ac:	480b      	ldr	r0, [pc, #44]	; (80020dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020b4:	d3f6      	bcc.n	80020a4 <CopyDataInit>
  ldr  r2, =_sbss
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020b8:	e002      	b.n	80020c0 <LoopFillZerobss>

080020ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020bc:	f842 3b04 	str.w	r3, [r2], #4

080020c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020c4:	d3f9      	bcc.n	80020ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020c6:	f7ff ffd3 	bl	8002070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f001 ffb3 	bl	8004034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe fa57 	bl	8000580 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020d8:	080231cc 	.word	0x080231cc
  ldr  r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020e0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80020e4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80020e8:	20000220 	.word	0x20000220

080020ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_Init+0x40>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_Init+0x40>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_Init+0x40>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 f8fa 	bl	8002312 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff fef6 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff fe4a 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00

08002134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x20>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_IncTick+0x24>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_IncTick+0x24>)
 8002146:	6013      	str	r3, [r2, #0]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000010 	.word	0x20000010
 8002158:	20000218 	.word	0x20000218

0800215c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return uwTick;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_GetTick+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000218 	.word	0x20000218

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff ffee 	bl	800215c <HAL_GetTick>
 8002180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d005      	beq.n	800219a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_Delay+0x40>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219a:	bf00      	nop
 800219c:	f7ff ffde 	bl	800215c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d8f7      	bhi.n	800219c <HAL_Delay+0x28>
  {
  }
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000010 	.word	0x20000010

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ff4c 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233a:	f7ff ff61 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800233e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7ff ffb1 	bl	80022ac <NVIC_EncodePriority>
 800234a:	4602      	mov	r2, r0
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff80 	bl	8002258 <__NVIC_SetPriority>
}
 8002358:	bf00      	nop
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff54 	bl	800221c <__NVIC_EnableIRQ>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e16b      	b.n	8002670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 815a 	bne.w	800266a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d00b      	beq.n	80023d6 <HAL_GPIO_Init+0x5a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d007      	beq.n	80023d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ca:	2b11      	cmp	r3, #17
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b12      	cmp	r3, #18
 80023d4:	d130      	bne.n	8002438 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0201 	and.w	r2, r3, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0xfc>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b12      	cmp	r3, #18
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80b4 	beq.w	800266a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <HAL_GPIO_Init+0x308>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <HAL_GPIO_Init+0x308>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <HAL_GPIO_Init+0x308>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a5a      	ldr	r2, [pc, #360]	; (8002688 <HAL_GPIO_Init+0x30c>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_GPIO_Init+0x310>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a50      	ldr	r2, [pc, #320]	; (8002690 <HAL_GPIO_Init+0x314>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x222>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <HAL_GPIO_Init+0x318>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x21e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <HAL_GPIO_Init+0x31c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x21a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4d      	ldr	r2, [pc, #308]	; (800269c <HAL_GPIO_Init+0x320>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x216>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <HAL_GPIO_Init+0x324>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x212>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <HAL_GPIO_Init+0x328>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4a      	ldr	r2, [pc, #296]	; (80026a8 <HAL_GPIO_Init+0x32c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x20a>
 8002582:	2307      	movs	r3, #7
 8002584:	e00e      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002586:	2308      	movs	r3, #8
 8002588:	e00c      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800258a:	2306      	movs	r3, #6
 800258c:	e00a      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800258e:	2305      	movs	r3, #5
 8002590:	e008      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002592:	2304      	movs	r3, #4
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 8002596:	2303      	movs	r3, #3
 8002598:	e004      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800259a:	2302      	movs	r3, #2
 800259c:	e002      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x228>
 80025a2:	2300      	movs	r3, #0
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	f002 0203 	and.w	r2, r2, #3
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	4093      	lsls	r3, r2
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b4:	4934      	ldr	r1, [pc, #208]	; (8002688 <HAL_GPIO_Init+0x30c>)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c2:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_GPIO_Init+0x330>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e6:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_GPIO_Init+0x330>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_GPIO_Init+0x330>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002616:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_GPIO_Init+0x330>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_GPIO_Init+0x330>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	f67f ae90 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002678:	bf00      	nop
 800267a:	3724      	adds	r7, #36	; 0x24
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e25b      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d075      	beq.n	80027ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002702:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00c      	beq.n	8002728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b9d      	ldr	r3, [pc, #628]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b99      	ldr	r3, [pc, #612]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05b      	beq.n	80027ec <HAL_RCC_OscConfig+0x108>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d157      	bne.n	80027ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e236      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x74>
 800274a:	4b91      	ldr	r3, [pc, #580]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a90      	ldr	r2, [pc, #576]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b8b      	ldr	r3, [pc, #556]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a8a      	ldr	r2, [pc, #552]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a87      	ldr	r2, [pc, #540]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 800277c:	4b84      	ldr	r3, [pc, #528]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a83      	ldr	r2, [pc, #524]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fcde 	bl	800215c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fcda 	bl	800215c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1fb      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b76      	ldr	r3, [pc, #472]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xc0>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fcca 	bl	800215c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff fcc6 	bl	800215c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1e7      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0xe8>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002806:	4b62      	ldr	r3, [pc, #392]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1bb      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4952      	ldr	r1, [pc, #328]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_OscConfig+0x2b0>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7ff fc7f 	bl	800215c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f7ff fc7b 	bl	800215c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e19c      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4940      	ldr	r1, [pc, #256]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0x2b0>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff fc5e 	bl	800215c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a4:	f7ff fc5a 	bl	800215c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e17b      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d030      	beq.n	8002930 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_RCC_OscConfig+0x2b4>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7ff fc3e 	bl	800215c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff fc3a 	bl	800215c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e15b      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x200>
 8002902:	e015      	b.n	8002930 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x2b4>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fc27 	bl	800215c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7ff fc23 	bl	800215c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e144      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a0 	beq.w	8002a7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10f      	bne.n	800296e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x2b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d121      	bne.n	80029be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_RCC_OscConfig+0x2b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a07      	ldr	r2, [pc, #28]	; (800299c <HAL_RCC_OscConfig+0x2b8>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002986:	f7ff fbe9 	bl	800215c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	e011      	b.n	80029b2 <HAL_RCC_OscConfig+0x2ce>
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	42470000 	.word	0x42470000
 8002998:	42470e80 	.word	0x42470e80
 800299c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7ff fbdc 	bl	800215c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0fd      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCC_OscConfig+0x4d4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
 80029c6:	4b7d      	ldr	r3, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e01c      	b.n	8002a0e <HAL_RCC_OscConfig+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x312>
 80029dc:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a76      	ldr	r2, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	e00b      	b.n	8002a0e <HAL_RCC_OscConfig+0x32a>
 80029f6:	4b71      	ldr	r3, [pc, #452]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a70      	ldr	r2, [pc, #448]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	4b6e      	ldr	r3, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a6d      	ldr	r2, [pc, #436]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d015      	beq.n	8002a42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff fba1 	bl	800215c <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff fb9d 	bl	800215c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0bc      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ee      	beq.n	8002a1e <HAL_RCC_OscConfig+0x33a>
 8002a40:	e014      	b.n	8002a6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fb8b 	bl	800215c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7ff fb87 	bl	800215c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0a6      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ee      	bne.n	8002a4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a51      	ldr	r2, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8092 	beq.w	8002bac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a88:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d05c      	beq.n	8002b4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d141      	bne.n	8002b20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_OscConfig+0x4dc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fb5b 	bl	800215c <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7ff fb57 	bl	800215c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e078      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	019b      	lsls	r3, r3, #6
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	4933      	ldr	r1, [pc, #204]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x4dc>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7ff fb30 	bl	800215c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b00:	f7ff fb2c 	bl	800215c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e04d      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x41c>
 8002b1e:	e045      	b.n	8002bac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_OscConfig+0x4dc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff fb19 	bl	800215c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7ff fb15 	bl	800215c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e036      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x44a>
 8002b4c:	e02e      	b.n	8002bac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e029      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_RCC_OscConfig+0x4d8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d115      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	42470060 	.word	0x42470060

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cc      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90c      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d044      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d119      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e067      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4934      	ldr	r1, [pc, #208]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7ff fa52 	bl	800215c <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7ff fa4e 	bl	800215c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4601      	mov	r1, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff f8d0 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08022da0 	.word	0x08022da0
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da6:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d007      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x32>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d008      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x38>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 808d 	bne.w	8002ed6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	; (8002eec <HAL_RCC_GetSysClockFreq+0x15c>)
 8002dbe:	60bb      	str	r3, [r7, #8]
       break;
 8002dc0:	e08c      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dc4:	60bb      	str	r3, [r7, #8]
      break;
 8002dc6:	e089      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd2:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d023      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	ea03 0501 	and.w	r5, r3, r1
 8002df4:	ea04 0602 	and.w	r6, r4, r2
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dfa:	fb02 f106 	mul.w	r1, r2, r6
 8002dfe:	2200      	movs	r2, #0
 8002e00:	fb02 f205 	mul.w	r2, r2, r5
 8002e04:	440a      	add	r2, r1
 8002e06:	493a      	ldr	r1, [pc, #232]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e08:	fba5 0101 	umull	r0, r1, r5, r1
 8002e0c:	1853      	adds	r3, r2, r1
 8002e0e:	4619      	mov	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f04f 0400 	mov.w	r4, #0
 8002e16:	461a      	mov	r2, r3
 8002e18:	4623      	mov	r3, r4
 8002e1a:	f7fd fa31 	bl	8000280 <__aeabi_uldivmod>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	460c      	mov	r4, r1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e049      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	f04f 0400 	mov.w	r4, #0
 8002e30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	ea03 0501 	and.w	r5, r3, r1
 8002e3c:	ea04 0602 	and.w	r6, r4, r2
 8002e40:	4629      	mov	r1, r5
 8002e42:	4632      	mov	r2, r6
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	f04f 0400 	mov.w	r4, #0
 8002e4c:	0154      	lsls	r4, r2, #5
 8002e4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e52:	014b      	lsls	r3, r1, #5
 8002e54:	4619      	mov	r1, r3
 8002e56:	4622      	mov	r2, r4
 8002e58:	1b49      	subs	r1, r1, r5
 8002e5a:	eb62 0206 	sbc.w	r2, r2, r6
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	0194      	lsls	r4, r2, #6
 8002e68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e6c:	018b      	lsls	r3, r1, #6
 8002e6e:	1a5b      	subs	r3, r3, r1
 8002e70:	eb64 0402 	sbc.w	r4, r4, r2
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e82:	00d9      	lsls	r1, r3, #3
 8002e84:	460b      	mov	r3, r1
 8002e86:	4614      	mov	r4, r2
 8002e88:	195b      	adds	r3, r3, r5
 8002e8a:	eb44 0406 	adc.w	r4, r4, r6
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	02a2      	lsls	r2, r4, #10
 8002e98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e9c:	0299      	lsls	r1, r3, #10
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f04f 0400 	mov.w	r4, #0
 8002eac:	461a      	mov	r2, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	f7fd f9e6 	bl	8000280 <__aeabi_uldivmod>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	60bb      	str	r3, [r7, #8]
      break;
 8002ed4:	e002      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ed8:	60bb      	str	r3, [r7, #8]
      break;
 8002eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002edc:	68bb      	ldr	r3, [r7, #8]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	00f42400 	.word	0x00f42400
 8002ef0:	017d7840 	.word	0x017d7840

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000008 	.word	0x20000008

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f14:	4601      	mov	r1, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4a03      	ldr	r2, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08022db0 	.word	0x08022db0

08002f34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	220f      	movs	r2, #15
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_GetClockConfig+0x5c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_RCC_GetClockConfig+0x5c>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RCC_GetClockConfig+0x5c>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	08db      	lsrs	r3, r3, #3
 8002f6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_RCC_GetClockConfig+0x60>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d035      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fc0:	4b62      	ldr	r3, [pc, #392]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fc6:	f7ff f8c9 	bl	800215c <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fce:	f7ff f8c5 	bl	800215c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0b0      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	019a      	lsls	r2, r3, #6
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	071b      	lsls	r3, r3, #28
 8002ff8:	4955      	ldr	r1, [pc, #340]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003006:	f7ff f8a9 	bl	800215c <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800300e:	f7ff f8a5 	bl	800215c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e090      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003020:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8083 	beq.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	4b44      	ldr	r3, [pc, #272]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a43      	ldr	r2, [pc, #268]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003056:	4b3f      	ldr	r3, [pc, #252]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003062:	f7ff f87b 	bl	800215c <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7ff f877 	bl	800215c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e062      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800307c:	4b35      	ldr	r3, [pc, #212]	; (8003154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02f      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d114      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030ce:	f7ff f845 	bl	800215c <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d4:	e00a      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7ff f841 	bl	800215c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e02a      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ee      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003104:	d10d      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	490d      	ldr	r1, [pc, #52]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
 8003120:	e005      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003128:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800312c:	6093      	str	r3, [r2, #8]
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	4905      	ldr	r1, [pc, #20]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800313c:	4313      	orrs	r3, r2
 800313e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	42470068 	.word	0x42470068
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	42470e40 	.word	0x42470e40

0800315c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e083      	b.n	8003276 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7f5b      	ldrb	r3, [r3, #29]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe fe48 	bl	8001e14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	22ca      	movs	r2, #202	; 0xca
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2253      	movs	r2, #83	; 0x53
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f897 	bl	80032ce <RTC_EnterInitMode>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e05e      	b.n	8003276 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6919      	ldr	r1, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	041a      	lsls	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003216:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10e      	bne.n	8003244 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f829 	bl	800327e <HAL_RTC_WaitForSynchro>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	22ff      	movs	r2, #255	; 0xff
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2204      	movs	r2, #4
 800323e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e018      	b.n	8003276 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003298:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800329a:	f7fe ff5f 	bl	800215c <HAL_GetTick>
 800329e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032a0:	e009      	b.n	80032b6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032a2:	f7fe ff5b 	bl	800215c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b0:	d901      	bls.n	80032b6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e007      	b.n	80032c6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d119      	bne.n	800331c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032f2:	f7fe ff33 	bl	800215c <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032f8:	e009      	b.n	800330e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032fa:	f7fe ff2f 	bl	800215c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003308:	d901      	bls.n	800330e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e007      	b.n	800331e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ee      	beq.n	80032fa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e056      	b.n	80033e6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe fd74 	bl	8001e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	ea42 0103 	orr.w	r1, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0104 	and.w	r1, r3, #4
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Transmit+0x22>
 800340c:	2302      	movs	r3, #2
 800340e:	e11e      	b.n	800364e <HAL_SPI_Transmit+0x260>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fe fea0 	bl	800215c <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e103      	b.n	800363c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x52>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e0fa      	b.n	800363c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348c:	d107      	bne.n	800349e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d007      	beq.n	80034bc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c4:	d14b      	bne.n	800355e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_Transmit+0xe6>
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d13e      	bne.n	8003552 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034f8:	e02b      	b.n	8003552 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d112      	bne.n	800352e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	881a      	ldrh	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	1c9a      	adds	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	86da      	strh	r2, [r3, #54]	; 0x36
 800352c:	e011      	b.n	8003552 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800352e:	f7fe fe15 	bl	800215c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d803      	bhi.n	8003546 <HAL_SPI_Transmit+0x158>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d102      	bne.n	800354c <HAL_SPI_Transmit+0x15e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003550:	e074      	b.n	800363c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ce      	bne.n	80034fa <HAL_SPI_Transmit+0x10c>
 800355c:	e04c      	b.n	80035f8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_SPI_Transmit+0x17e>
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d140      	bne.n	80035ee <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003592:	e02c      	b.n	80035ee <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d113      	bne.n	80035ca <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80035c8:	e011      	b.n	80035ee <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ca:	f7fe fdc7 	bl	800215c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d803      	bhi.n	80035e2 <HAL_SPI_Transmit+0x1f4>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d102      	bne.n	80035e8 <HAL_SPI_Transmit+0x1fa>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ec:	e026      	b.n	800363c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1cd      	bne.n	8003594 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f8a3 	bl	8003748 <SPI_EndRxTxTransaction>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e000      	b.n	800363c <HAL_SPI_Transmit+0x24e>
  }

error:
 800363a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800364c:	7ffb      	ldrb	r3, [r7, #31]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003664:	b2db      	uxtb	r3, r3
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003682:	e04c      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d048      	beq.n	800371e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800368c:	f7fe fd66 	bl	800215c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d902      	bls.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d13d      	bne.n	800371e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ba:	d111      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c4:	d004      	beq.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d107      	bne.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d10f      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e00f      	b.n	800373e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	429a      	cmp	r2, r3
 800373a:	d1a3      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <SPI_EndRxTxTransaction+0x7c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <SPI_EndRxTxTransaction+0x80>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0d5b      	lsrs	r3, r3, #21
 8003760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003772:	d112      	bne.n	800379a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	2180      	movs	r1, #128	; 0x80
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff ff77 	bl	8003672 <SPI_WaitFlagStateUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f043 0220 	orr.w	r2, r3, #32
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e00f      	b.n	80037ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d0f2      	beq.n	800379a <SPI_EndRxTxTransaction+0x52>
 80037b4:	e000      	b.n	80037b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80037b6:	bf00      	nop
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000008 	.word	0x20000008
 80037c8:	165e9f81 	.word	0x165e9f81

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e01d      	b.n	800381a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f815 	bl	8003822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 f968 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b06      	cmp	r3, #6
 800385e:	d007      	beq.n	8003870 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d122      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d11b      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0202 	mvn.w	r2, #2
 80038aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8ee 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80038c6:	e005      	b.n	80038d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8e0 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8f1 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d122      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d11b      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0204 	mvn.w	r2, #4
 80038fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8c4 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 800391a:	e005      	b.n	8003928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8b6 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8c7 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d122      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d11b      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0208 	mvn.w	r2, #8
 8003952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f89a 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 800396e:	e005      	b.n	800397c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f88c 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f89d 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d122      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d11b      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0210 	mvn.w	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2208      	movs	r2, #8
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f870 	bl	8003aa2 <HAL_TIM_IC_CaptureCallback>
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f862 	bl	8003a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f873 	bl	8003ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10e      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0201 	mvn.w	r2, #1
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fd f9f9 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d10e      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f903 	bl	8003c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d10e      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f838 	bl	8003aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0220 	mvn.w	r2, #32
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8cd 	bl	8003c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d027      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d023      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_Base_SetConfig+0x128>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <TIM_Base_SetConfig+0x134>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <TIM_Base_SetConfig+0x138>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a23      	ldr	r2, [pc, #140]	; (8003c1c <TIM_Base_SetConfig+0x13c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40010400 	.word	0x40010400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800
 8003c14:	40001800 	.word	0x40001800
 8003c18:	40001c00 	.word	0x40001c00
 8003c1c:	40002000 	.word	0x40002000

08003c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6852      	ldr	r2, [r2, #4]
 8003cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d103      	bne.n	8003cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	1e5a      	subs	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cee:	4b4e      	ldr	r3, [pc, #312]	; (8003e28 <xTaskIncrementTick+0x144>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 8087 	bne.w	8003e06 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <xTaskIncrementTick+0x148>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d00:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <xTaskIncrementTick+0x148>)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11f      	bne.n	8003d4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d0c:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <xTaskIncrementTick+0x14c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	e7fe      	b.n	8003d28 <xTaskIncrementTick+0x44>
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <xTaskIncrementTick+0x14c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <xTaskIncrementTick+0x150>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3e      	ldr	r2, [pc, #248]	; (8003e30 <xTaskIncrementTick+0x14c>)
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4a3e      	ldr	r2, [pc, #248]	; (8003e34 <xTaskIncrementTick+0x150>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	; (8003e38 <xTaskIncrementTick+0x154>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <xTaskIncrementTick+0x154>)
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f000 f8de 	bl	8003f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <xTaskIncrementTick+0x158>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d348      	bcc.n	8003de8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <xTaskIncrementTick+0x14c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d60:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <xTaskIncrementTick+0x158>)
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295
 8003d66:	601a      	str	r2, [r3, #0]
					break;
 8003d68:	e03e      	b.n	8003de8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6a:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <xTaskIncrementTick+0x14c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d203      	bcs.n	8003d8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d82:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <xTaskIncrementTick+0x158>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d88:	e02e      	b.n	8003de8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff7e 	bl	8003c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff75 	bl	8003c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	2201      	movs	r2, #1
 8003dac:	409a      	lsls	r2, r3
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <xTaskIncrementTick+0x15c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	4a22      	ldr	r2, [pc, #136]	; (8003e40 <xTaskIncrementTick+0x15c>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <xTaskIncrementTick+0x160>)
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7ff ff3a 	bl	8003c48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <xTaskIncrementTick+0x164>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3b9      	bcc.n	8003d56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003de2:	2301      	movs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003de6:	e7b6      	b.n	8003d56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003de8:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <xTaskIncrementTick+0x164>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	4915      	ldr	r1, [pc, #84]	; (8003e44 <xTaskIncrementTick+0x160>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d907      	bls.n	8003e10 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e004      	b.n	8003e10 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <xTaskIncrementTick+0x168>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <xTaskIncrementTick+0x168>)
 8003e0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <xTaskIncrementTick+0x16c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e1c:	697b      	ldr	r3, [r7, #20]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000150 	.word	0x20000150
 8003e2c:	20000138 	.word	0x20000138
 8003e30:	20000130 	.word	0x20000130
 8003e34:	20000134 	.word	0x20000134
 8003e38:	20000148 	.word	0x20000148
 8003e3c:	2000014c 	.word	0x2000014c
 8003e40:	2000013c 	.word	0x2000013c
 8003e44:	200000a4 	.word	0x200000a4
 8003e48:	200000a0 	.word	0x200000a0
 8003e4c:	20000140 	.word	0x20000140
 8003e50:	20000144 	.word	0x20000144

08003e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <vTaskSwitchContext+0xa0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <vTaskSwitchContext+0xa4>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e68:	e03e      	b.n	8003ee8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <vTaskSwitchContext+0xa4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e70:	4b22      	ldr	r3, [pc, #136]	; (8003efc <vTaskSwitchContext+0xa8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	f1c3 031f 	rsb	r3, r3, #31
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	491e      	ldr	r1, [pc, #120]	; (8003f00 <vTaskSwitchContext+0xac>)
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <vTaskSwitchContext+0x5a>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	e7fe      	b.n	8003eac <vTaskSwitchContext+0x58>
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <vTaskSwitchContext+0xac>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d104      	bne.n	8003ede <vTaskSwitchContext+0x8a>
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <vTaskSwitchContext+0xb0>)
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	20000150 	.word	0x20000150
 8003ef8:	20000144 	.word	0x20000144
 8003efc:	2000013c 	.word	0x2000013c
 8003f00:	200000a4 	.word	0x200000a4
 8003f04:	200000a0 	.word	0x200000a0

08003f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <prvResetNextTaskUnblockTime+0x38>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvResetNextTaskUnblockTime+0x3c>)
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f20:	e008      	b.n	8003f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <prvResetNextTaskUnblockTime+0x38>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <prvResetNextTaskUnblockTime+0x3c>)
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	20000130 	.word	0x20000130
 8003f44:	2000014c 	.word	0x2000014c
	...

08003f50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst2>:
 8003f70:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
	...

08003f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f80:	f3ef 8009 	mrs	r0, PSP
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <pxCurrentTCBConst>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	f01e 0f10 	tst.w	lr, #16
 8003f90:	bf08      	it	eq
 8003f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9a:	6010      	str	r0, [r2, #0]
 8003f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fa4:	f380 8811 	msr	BASEPRI, r0
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f7ff ff50 	bl	8003e54 <vTaskSwitchContext>
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f380 8811 	msr	BASEPRI, r0
 8003fbc:	bc09      	pop	{r0, r3}
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6808      	ldr	r0, [r1, #0]
 8003fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc6:	f01e 0f10 	tst.w	lr, #16
 8003fca:	bf08      	it	eq
 8003fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fd0:	f380 8809 	msr	PSP, r0
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	f3af 8000 	nop.w

08003fe0 <pxCurrentTCBConst>:
 8003fe0:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004000:	f7ff fe70 	bl	8003ce4 <xTaskIncrementTick>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <SysTick_Handler+0x3c>)
 800400c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <__errno>:
 8004028:	4b01      	ldr	r3, [pc, #4]	; (8004030 <__errno+0x8>)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000014 	.word	0x20000014

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4e0d      	ldr	r6, [pc, #52]	; (800406c <__libc_init_array+0x38>)
 8004038:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403a:	1ba4      	subs	r4, r4, r6
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	2500      	movs	r5, #0
 8004040:	42a5      	cmp	r5, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	4e0b      	ldr	r6, [pc, #44]	; (8004074 <__libc_init_array+0x40>)
 8004046:	4c0c      	ldr	r4, [pc, #48]	; (8004078 <__libc_init_array+0x44>)
 8004048:	f001 f9b4 	bl	80053b4 <_init>
 800404c:	1ba4      	subs	r4, r4, r6
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	2500      	movs	r5, #0
 8004052:	42a5      	cmp	r5, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405c:	4798      	blx	r3
 800405e:	3501      	adds	r5, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004066:	4798      	blx	r3
 8004068:	3501      	adds	r5, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	080231c4 	.word	0x080231c4
 8004070:	080231c4 	.word	0x080231c4
 8004074:	080231c4 	.word	0x080231c4
 8004078:	080231c8 	.word	0x080231c8

0800407c <memcpy>:
 800407c:	b510      	push	{r4, lr}
 800407e:	1e43      	subs	r3, r0, #1
 8004080:	440a      	add	r2, r1
 8004082:	4291      	cmp	r1, r2
 8004084:	d100      	bne.n	8004088 <memcpy+0xc>
 8004086:	bd10      	pop	{r4, pc}
 8004088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004090:	e7f7      	b.n	8004082 <memcpy+0x6>

08004092 <memset>:
 8004092:	4402      	add	r2, r0
 8004094:	4603      	mov	r3, r0
 8004096:	4293      	cmp	r3, r2
 8004098:	d100      	bne.n	800409c <memset+0xa>
 800409a:	4770      	bx	lr
 800409c:	f803 1b01 	strb.w	r1, [r3], #1
 80040a0:	e7f9      	b.n	8004096 <memset+0x4>
	...

080040a4 <siprintf>:
 80040a4:	b40e      	push	{r1, r2, r3}
 80040a6:	b500      	push	{lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	ab1d      	add	r3, sp, #116	; 0x74
 80040ac:	9002      	str	r0, [sp, #8]
 80040ae:	9006      	str	r0, [sp, #24]
 80040b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040b4:	4809      	ldr	r0, [pc, #36]	; (80040dc <siprintf+0x38>)
 80040b6:	9107      	str	r1, [sp, #28]
 80040b8:	9104      	str	r1, [sp, #16]
 80040ba:	4909      	ldr	r1, [pc, #36]	; (80040e0 <siprintf+0x3c>)
 80040bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80040c0:	9105      	str	r1, [sp, #20]
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	a902      	add	r1, sp, #8
 80040c8:	f000 f866 	bl	8004198 <_svfiprintf_r>
 80040cc:	9b02      	ldr	r3, [sp, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	b01c      	add	sp, #112	; 0x70
 80040d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d8:	b003      	add	sp, #12
 80040da:	4770      	bx	lr
 80040dc:	20000014 	.word	0x20000014
 80040e0:	ffff0208 	.word	0xffff0208

080040e4 <__ssputs_r>:
 80040e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	688e      	ldr	r6, [r1, #8]
 80040ea:	429e      	cmp	r6, r3
 80040ec:	4682      	mov	sl, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	4690      	mov	r8, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	d837      	bhi.n	8004166 <__ssputs_r+0x82>
 80040f6:	898a      	ldrh	r2, [r1, #12]
 80040f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040fc:	d031      	beq.n	8004162 <__ssputs_r+0x7e>
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	6909      	ldr	r1, [r1, #16]
 8004102:	1a6f      	subs	r7, r5, r1
 8004104:	6965      	ldr	r5, [r4, #20]
 8004106:	2302      	movs	r3, #2
 8004108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800410c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004110:	f109 0301 	add.w	r3, r9, #1
 8004114:	443b      	add	r3, r7
 8004116:	429d      	cmp	r5, r3
 8004118:	bf38      	it	cc
 800411a:	461d      	movcc	r5, r3
 800411c:	0553      	lsls	r3, r2, #21
 800411e:	d530      	bpl.n	8004182 <__ssputs_r+0x9e>
 8004120:	4629      	mov	r1, r5
 8004122:	f000 fb21 	bl	8004768 <_malloc_r>
 8004126:	4606      	mov	r6, r0
 8004128:	b950      	cbnz	r0, 8004140 <__ssputs_r+0x5c>
 800412a:	230c      	movs	r3, #12
 800412c:	f8ca 3000 	str.w	r3, [sl]
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	463a      	mov	r2, r7
 8004142:	6921      	ldr	r1, [r4, #16]
 8004144:	f7ff ff9a 	bl	800407c <memcpy>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	6126      	str	r6, [r4, #16]
 8004156:	6165      	str	r5, [r4, #20]
 8004158:	443e      	add	r6, r7
 800415a:	1bed      	subs	r5, r5, r7
 800415c:	6026      	str	r6, [r4, #0]
 800415e:	60a5      	str	r5, [r4, #8]
 8004160:	464e      	mov	r6, r9
 8004162:	454e      	cmp	r6, r9
 8004164:	d900      	bls.n	8004168 <__ssputs_r+0x84>
 8004166:	464e      	mov	r6, r9
 8004168:	4632      	mov	r2, r6
 800416a:	4641      	mov	r1, r8
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	f000 fa93 	bl	8004698 <memmove>
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	1b9b      	subs	r3, r3, r6
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	441e      	add	r6, r3
 800417c:	6026      	str	r6, [r4, #0]
 800417e:	2000      	movs	r0, #0
 8004180:	e7dc      	b.n	800413c <__ssputs_r+0x58>
 8004182:	462a      	mov	r2, r5
 8004184:	f000 fb4a 	bl	800481c <_realloc_r>
 8004188:	4606      	mov	r6, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d1e2      	bne.n	8004154 <__ssputs_r+0x70>
 800418e:	6921      	ldr	r1, [r4, #16]
 8004190:	4650      	mov	r0, sl
 8004192:	f000 fa9b 	bl	80046cc <_free_r>
 8004196:	e7c8      	b.n	800412a <__ssputs_r+0x46>

08004198 <_svfiprintf_r>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	461d      	mov	r5, r3
 800419e:	898b      	ldrh	r3, [r1, #12]
 80041a0:	061f      	lsls	r7, r3, #24
 80041a2:	b09d      	sub	sp, #116	; 0x74
 80041a4:	4680      	mov	r8, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4616      	mov	r6, r2
 80041aa:	d50f      	bpl.n	80041cc <_svfiprintf_r+0x34>
 80041ac:	690b      	ldr	r3, [r1, #16]
 80041ae:	b96b      	cbnz	r3, 80041cc <_svfiprintf_r+0x34>
 80041b0:	2140      	movs	r1, #64	; 0x40
 80041b2:	f000 fad9 	bl	8004768 <_malloc_r>
 80041b6:	6020      	str	r0, [r4, #0]
 80041b8:	6120      	str	r0, [r4, #16]
 80041ba:	b928      	cbnz	r0, 80041c8 <_svfiprintf_r+0x30>
 80041bc:	230c      	movs	r3, #12
 80041be:	f8c8 3000 	str.w	r3, [r8]
 80041c2:	f04f 30ff 	mov.w	r0, #4294967295
 80041c6:	e0c8      	b.n	800435a <_svfiprintf_r+0x1c2>
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	6163      	str	r3, [r4, #20]
 80041cc:	2300      	movs	r3, #0
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	2320      	movs	r3, #32
 80041d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041d6:	2330      	movs	r3, #48	; 0x30
 80041d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041dc:	9503      	str	r5, [sp, #12]
 80041de:	f04f 0b01 	mov.w	fp, #1
 80041e2:	4637      	mov	r7, r6
 80041e4:	463d      	mov	r5, r7
 80041e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041ea:	b10b      	cbz	r3, 80041f0 <_svfiprintf_r+0x58>
 80041ec:	2b25      	cmp	r3, #37	; 0x25
 80041ee:	d13e      	bne.n	800426e <_svfiprintf_r+0xd6>
 80041f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80041f4:	d00b      	beq.n	800420e <_svfiprintf_r+0x76>
 80041f6:	4653      	mov	r3, sl
 80041f8:	4632      	mov	r2, r6
 80041fa:	4621      	mov	r1, r4
 80041fc:	4640      	mov	r0, r8
 80041fe:	f7ff ff71 	bl	80040e4 <__ssputs_r>
 8004202:	3001      	adds	r0, #1
 8004204:	f000 80a4 	beq.w	8004350 <_svfiprintf_r+0x1b8>
 8004208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420a:	4453      	add	r3, sl
 800420c:	9309      	str	r3, [sp, #36]	; 0x24
 800420e:	783b      	ldrb	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 809d 	beq.w	8004350 <_svfiprintf_r+0x1b8>
 8004216:	2300      	movs	r3, #0
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
 800421c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	9307      	str	r3, [sp, #28]
 8004224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004228:	931a      	str	r3, [sp, #104]	; 0x68
 800422a:	462f      	mov	r7, r5
 800422c:	2205      	movs	r2, #5
 800422e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004232:	4850      	ldr	r0, [pc, #320]	; (8004374 <_svfiprintf_r+0x1dc>)
 8004234:	f7fb ffd4 	bl	80001e0 <memchr>
 8004238:	9b04      	ldr	r3, [sp, #16]
 800423a:	b9d0      	cbnz	r0, 8004272 <_svfiprintf_r+0xda>
 800423c:	06d9      	lsls	r1, r3, #27
 800423e:	bf44      	itt	mi
 8004240:	2220      	movmi	r2, #32
 8004242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004246:	071a      	lsls	r2, r3, #28
 8004248:	bf44      	itt	mi
 800424a:	222b      	movmi	r2, #43	; 0x2b
 800424c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004250:	782a      	ldrb	r2, [r5, #0]
 8004252:	2a2a      	cmp	r2, #42	; 0x2a
 8004254:	d015      	beq.n	8004282 <_svfiprintf_r+0xea>
 8004256:	9a07      	ldr	r2, [sp, #28]
 8004258:	462f      	mov	r7, r5
 800425a:	2000      	movs	r0, #0
 800425c:	250a      	movs	r5, #10
 800425e:	4639      	mov	r1, r7
 8004260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004264:	3b30      	subs	r3, #48	; 0x30
 8004266:	2b09      	cmp	r3, #9
 8004268:	d94d      	bls.n	8004306 <_svfiprintf_r+0x16e>
 800426a:	b1b8      	cbz	r0, 800429c <_svfiprintf_r+0x104>
 800426c:	e00f      	b.n	800428e <_svfiprintf_r+0xf6>
 800426e:	462f      	mov	r7, r5
 8004270:	e7b8      	b.n	80041e4 <_svfiprintf_r+0x4c>
 8004272:	4a40      	ldr	r2, [pc, #256]	; (8004374 <_svfiprintf_r+0x1dc>)
 8004274:	1a80      	subs	r0, r0, r2
 8004276:	fa0b f000 	lsl.w	r0, fp, r0
 800427a:	4318      	orrs	r0, r3
 800427c:	9004      	str	r0, [sp, #16]
 800427e:	463d      	mov	r5, r7
 8004280:	e7d3      	b.n	800422a <_svfiprintf_r+0x92>
 8004282:	9a03      	ldr	r2, [sp, #12]
 8004284:	1d11      	adds	r1, r2, #4
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	9103      	str	r1, [sp, #12]
 800428a:	2a00      	cmp	r2, #0
 800428c:	db01      	blt.n	8004292 <_svfiprintf_r+0xfa>
 800428e:	9207      	str	r2, [sp, #28]
 8004290:	e004      	b.n	800429c <_svfiprintf_r+0x104>
 8004292:	4252      	negs	r2, r2
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	9207      	str	r2, [sp, #28]
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	783b      	ldrb	r3, [r7, #0]
 800429e:	2b2e      	cmp	r3, #46	; 0x2e
 80042a0:	d10c      	bne.n	80042bc <_svfiprintf_r+0x124>
 80042a2:	787b      	ldrb	r3, [r7, #1]
 80042a4:	2b2a      	cmp	r3, #42	; 0x2a
 80042a6:	d133      	bne.n	8004310 <_svfiprintf_r+0x178>
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	9203      	str	r2, [sp, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bfb8      	it	lt
 80042b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042b8:	3702      	adds	r7, #2
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	4d2e      	ldr	r5, [pc, #184]	; (8004378 <_svfiprintf_r+0x1e0>)
 80042be:	7839      	ldrb	r1, [r7, #0]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4628      	mov	r0, r5
 80042c4:	f7fb ff8c 	bl	80001e0 <memchr>
 80042c8:	b138      	cbz	r0, 80042da <_svfiprintf_r+0x142>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	1b40      	subs	r0, r0, r5
 80042ce:	fa03 f000 	lsl.w	r0, r3, r0
 80042d2:	9b04      	ldr	r3, [sp, #16]
 80042d4:	4303      	orrs	r3, r0
 80042d6:	3701      	adds	r7, #1
 80042d8:	9304      	str	r3, [sp, #16]
 80042da:	7839      	ldrb	r1, [r7, #0]
 80042dc:	4827      	ldr	r0, [pc, #156]	; (800437c <_svfiprintf_r+0x1e4>)
 80042de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042e2:	2206      	movs	r2, #6
 80042e4:	1c7e      	adds	r6, r7, #1
 80042e6:	f7fb ff7b 	bl	80001e0 <memchr>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d038      	beq.n	8004360 <_svfiprintf_r+0x1c8>
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <_svfiprintf_r+0x1e8>)
 80042f0:	bb13      	cbnz	r3, 8004338 <_svfiprintf_r+0x1a0>
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	3307      	adds	r3, #7
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	3308      	adds	r3, #8
 80042fc:	9303      	str	r3, [sp, #12]
 80042fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004300:	444b      	add	r3, r9
 8004302:	9309      	str	r3, [sp, #36]	; 0x24
 8004304:	e76d      	b.n	80041e2 <_svfiprintf_r+0x4a>
 8004306:	fb05 3202 	mla	r2, r5, r2, r3
 800430a:	2001      	movs	r0, #1
 800430c:	460f      	mov	r7, r1
 800430e:	e7a6      	b.n	800425e <_svfiprintf_r+0xc6>
 8004310:	2300      	movs	r3, #0
 8004312:	3701      	adds	r7, #1
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	4619      	mov	r1, r3
 8004318:	250a      	movs	r5, #10
 800431a:	4638      	mov	r0, r7
 800431c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004320:	3a30      	subs	r2, #48	; 0x30
 8004322:	2a09      	cmp	r2, #9
 8004324:	d903      	bls.n	800432e <_svfiprintf_r+0x196>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0c8      	beq.n	80042bc <_svfiprintf_r+0x124>
 800432a:	9105      	str	r1, [sp, #20]
 800432c:	e7c6      	b.n	80042bc <_svfiprintf_r+0x124>
 800432e:	fb05 2101 	mla	r1, r5, r1, r2
 8004332:	2301      	movs	r3, #1
 8004334:	4607      	mov	r7, r0
 8004336:	e7f0      	b.n	800431a <_svfiprintf_r+0x182>
 8004338:	ab03      	add	r3, sp, #12
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4622      	mov	r2, r4
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <_svfiprintf_r+0x1ec>)
 8004340:	a904      	add	r1, sp, #16
 8004342:	4640      	mov	r0, r8
 8004344:	f3af 8000 	nop.w
 8004348:	f1b0 3fff 	cmp.w	r0, #4294967295
 800434c:	4681      	mov	r9, r0
 800434e:	d1d6      	bne.n	80042fe <_svfiprintf_r+0x166>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	065b      	lsls	r3, r3, #25
 8004354:	f53f af35 	bmi.w	80041c2 <_svfiprintf_r+0x2a>
 8004358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800435a:	b01d      	add	sp, #116	; 0x74
 800435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004360:	ab03      	add	r3, sp, #12
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4622      	mov	r2, r4
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <_svfiprintf_r+0x1ec>)
 8004368:	a904      	add	r1, sp, #16
 800436a:	4640      	mov	r0, r8
 800436c:	f000 f882 	bl	8004474 <_printf_i>
 8004370:	e7ea      	b.n	8004348 <_svfiprintf_r+0x1b0>
 8004372:	bf00      	nop
 8004374:	08022db8 	.word	0x08022db8
 8004378:	08022dbe 	.word	0x08022dbe
 800437c:	08022dc2 	.word	0x08022dc2
 8004380:	00000000 	.word	0x00000000
 8004384:	080040e5 	.word	0x080040e5

08004388 <_printf_common>:
 8004388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	4691      	mov	r9, r2
 800438e:	461f      	mov	r7, r3
 8004390:	688a      	ldr	r2, [r1, #8]
 8004392:	690b      	ldr	r3, [r1, #16]
 8004394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004398:	4293      	cmp	r3, r2
 800439a:	bfb8      	it	lt
 800439c:	4613      	movlt	r3, r2
 800439e:	f8c9 3000 	str.w	r3, [r9]
 80043a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043a6:	4606      	mov	r6, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	b112      	cbz	r2, 80043b2 <_printf_common+0x2a>
 80043ac:	3301      	adds	r3, #1
 80043ae:	f8c9 3000 	str.w	r3, [r9]
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	0699      	lsls	r1, r3, #26
 80043b6:	bf42      	ittt	mi
 80043b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043bc:	3302      	addmi	r3, #2
 80043be:	f8c9 3000 	strmi.w	r3, [r9]
 80043c2:	6825      	ldr	r5, [r4, #0]
 80043c4:	f015 0506 	ands.w	r5, r5, #6
 80043c8:	d107      	bne.n	80043da <_printf_common+0x52>
 80043ca:	f104 0a19 	add.w	sl, r4, #25
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	f8d9 2000 	ldr.w	r2, [r9]
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	42ab      	cmp	r3, r5
 80043d8:	dc28      	bgt.n	800442c <_printf_common+0xa4>
 80043da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	3300      	adds	r3, #0
 80043e2:	bf18      	it	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	0692      	lsls	r2, r2, #26
 80043e8:	d42d      	bmi.n	8004446 <_printf_common+0xbe>
 80043ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ee:	4639      	mov	r1, r7
 80043f0:	4630      	mov	r0, r6
 80043f2:	47c0      	blx	r8
 80043f4:	3001      	adds	r0, #1
 80043f6:	d020      	beq.n	800443a <_printf_common+0xb2>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	68e5      	ldr	r5, [r4, #12]
 80043fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004400:	f003 0306 	and.w	r3, r3, #6
 8004404:	2b04      	cmp	r3, #4
 8004406:	bf08      	it	eq
 8004408:	1aad      	subeq	r5, r5, r2
 800440a:	68a3      	ldr	r3, [r4, #8]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	bf0c      	ite	eq
 8004410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004414:	2500      	movne	r5, #0
 8004416:	4293      	cmp	r3, r2
 8004418:	bfc4      	itt	gt
 800441a:	1a9b      	subgt	r3, r3, r2
 800441c:	18ed      	addgt	r5, r5, r3
 800441e:	f04f 0900 	mov.w	r9, #0
 8004422:	341a      	adds	r4, #26
 8004424:	454d      	cmp	r5, r9
 8004426:	d11a      	bne.n	800445e <_printf_common+0xd6>
 8004428:	2000      	movs	r0, #0
 800442a:	e008      	b.n	800443e <_printf_common+0xb6>
 800442c:	2301      	movs	r3, #1
 800442e:	4652      	mov	r2, sl
 8004430:	4639      	mov	r1, r7
 8004432:	4630      	mov	r0, r6
 8004434:	47c0      	blx	r8
 8004436:	3001      	adds	r0, #1
 8004438:	d103      	bne.n	8004442 <_printf_common+0xba>
 800443a:	f04f 30ff 	mov.w	r0, #4294967295
 800443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004442:	3501      	adds	r5, #1
 8004444:	e7c3      	b.n	80043ce <_printf_common+0x46>
 8004446:	18e1      	adds	r1, r4, r3
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	2030      	movs	r0, #48	; 0x30
 800444c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004450:	4422      	add	r2, r4
 8004452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004456:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800445a:	3302      	adds	r3, #2
 800445c:	e7c5      	b.n	80043ea <_printf_common+0x62>
 800445e:	2301      	movs	r3, #1
 8004460:	4622      	mov	r2, r4
 8004462:	4639      	mov	r1, r7
 8004464:	4630      	mov	r0, r6
 8004466:	47c0      	blx	r8
 8004468:	3001      	adds	r0, #1
 800446a:	d0e6      	beq.n	800443a <_printf_common+0xb2>
 800446c:	f109 0901 	add.w	r9, r9, #1
 8004470:	e7d8      	b.n	8004424 <_printf_common+0x9c>
	...

08004474 <_printf_i>:
 8004474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800447c:	460c      	mov	r4, r1
 800447e:	7e09      	ldrb	r1, [r1, #24]
 8004480:	b085      	sub	sp, #20
 8004482:	296e      	cmp	r1, #110	; 0x6e
 8004484:	4617      	mov	r7, r2
 8004486:	4606      	mov	r6, r0
 8004488:	4698      	mov	r8, r3
 800448a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800448c:	f000 80b3 	beq.w	80045f6 <_printf_i+0x182>
 8004490:	d822      	bhi.n	80044d8 <_printf_i+0x64>
 8004492:	2963      	cmp	r1, #99	; 0x63
 8004494:	d036      	beq.n	8004504 <_printf_i+0x90>
 8004496:	d80a      	bhi.n	80044ae <_printf_i+0x3a>
 8004498:	2900      	cmp	r1, #0
 800449a:	f000 80b9 	beq.w	8004610 <_printf_i+0x19c>
 800449e:	2958      	cmp	r1, #88	; 0x58
 80044a0:	f000 8083 	beq.w	80045aa <_printf_i+0x136>
 80044a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044ac:	e032      	b.n	8004514 <_printf_i+0xa0>
 80044ae:	2964      	cmp	r1, #100	; 0x64
 80044b0:	d001      	beq.n	80044b6 <_printf_i+0x42>
 80044b2:	2969      	cmp	r1, #105	; 0x69
 80044b4:	d1f6      	bne.n	80044a4 <_printf_i+0x30>
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	0605      	lsls	r5, r0, #24
 80044bc:	f103 0104 	add.w	r1, r3, #4
 80044c0:	d52a      	bpl.n	8004518 <_printf_i+0xa4>
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da03      	bge.n	80044d2 <_printf_i+0x5e>
 80044ca:	222d      	movs	r2, #45	; 0x2d
 80044cc:	425b      	negs	r3, r3
 80044ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044d2:	486f      	ldr	r0, [pc, #444]	; (8004690 <_printf_i+0x21c>)
 80044d4:	220a      	movs	r2, #10
 80044d6:	e039      	b.n	800454c <_printf_i+0xd8>
 80044d8:	2973      	cmp	r1, #115	; 0x73
 80044da:	f000 809d 	beq.w	8004618 <_printf_i+0x1a4>
 80044de:	d808      	bhi.n	80044f2 <_printf_i+0x7e>
 80044e0:	296f      	cmp	r1, #111	; 0x6f
 80044e2:	d020      	beq.n	8004526 <_printf_i+0xb2>
 80044e4:	2970      	cmp	r1, #112	; 0x70
 80044e6:	d1dd      	bne.n	80044a4 <_printf_i+0x30>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f043 0320 	orr.w	r3, r3, #32
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	e003      	b.n	80044fa <_printf_i+0x86>
 80044f2:	2975      	cmp	r1, #117	; 0x75
 80044f4:	d017      	beq.n	8004526 <_printf_i+0xb2>
 80044f6:	2978      	cmp	r1, #120	; 0x78
 80044f8:	d1d4      	bne.n	80044a4 <_printf_i+0x30>
 80044fa:	2378      	movs	r3, #120	; 0x78
 80044fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004500:	4864      	ldr	r0, [pc, #400]	; (8004694 <_printf_i+0x220>)
 8004502:	e055      	b.n	80045b0 <_printf_i+0x13c>
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	1d19      	adds	r1, r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6011      	str	r1, [r2, #0]
 800450c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004514:	2301      	movs	r3, #1
 8004516:	e08c      	b.n	8004632 <_printf_i+0x1be>
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6011      	str	r1, [r2, #0]
 800451c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004520:	bf18      	it	ne
 8004522:	b21b      	sxthne	r3, r3
 8004524:	e7cf      	b.n	80044c6 <_printf_i+0x52>
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1d18      	adds	r0, r3, #4
 800452c:	6010      	str	r0, [r2, #0]
 800452e:	0628      	lsls	r0, r5, #24
 8004530:	d501      	bpl.n	8004536 <_printf_i+0xc2>
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	e002      	b.n	800453c <_printf_i+0xc8>
 8004536:	0668      	lsls	r0, r5, #25
 8004538:	d5fb      	bpl.n	8004532 <_printf_i+0xbe>
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	4854      	ldr	r0, [pc, #336]	; (8004690 <_printf_i+0x21c>)
 800453e:	296f      	cmp	r1, #111	; 0x6f
 8004540:	bf14      	ite	ne
 8004542:	220a      	movne	r2, #10
 8004544:	2208      	moveq	r2, #8
 8004546:	2100      	movs	r1, #0
 8004548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800454c:	6865      	ldr	r5, [r4, #4]
 800454e:	60a5      	str	r5, [r4, #8]
 8004550:	2d00      	cmp	r5, #0
 8004552:	f2c0 8095 	blt.w	8004680 <_printf_i+0x20c>
 8004556:	6821      	ldr	r1, [r4, #0]
 8004558:	f021 0104 	bic.w	r1, r1, #4
 800455c:	6021      	str	r1, [r4, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d13d      	bne.n	80045de <_printf_i+0x16a>
 8004562:	2d00      	cmp	r5, #0
 8004564:	f040 808e 	bne.w	8004684 <_printf_i+0x210>
 8004568:	4665      	mov	r5, ip
 800456a:	2a08      	cmp	r2, #8
 800456c:	d10b      	bne.n	8004586 <_printf_i+0x112>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	07db      	lsls	r3, r3, #31
 8004572:	d508      	bpl.n	8004586 <_printf_i+0x112>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	6862      	ldr	r2, [r4, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	bfde      	ittt	le
 800457c:	2330      	movle	r3, #48	; 0x30
 800457e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004582:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004586:	ebac 0305 	sub.w	r3, ip, r5
 800458a:	6123      	str	r3, [r4, #16]
 800458c:	f8cd 8000 	str.w	r8, [sp]
 8004590:	463b      	mov	r3, r7
 8004592:	aa03      	add	r2, sp, #12
 8004594:	4621      	mov	r1, r4
 8004596:	4630      	mov	r0, r6
 8004598:	f7ff fef6 	bl	8004388 <_printf_common>
 800459c:	3001      	adds	r0, #1
 800459e:	d14d      	bne.n	800463c <_printf_i+0x1c8>
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	b005      	add	sp, #20
 80045a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045aa:	4839      	ldr	r0, [pc, #228]	; (8004690 <_printf_i+0x21c>)
 80045ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	1d1d      	adds	r5, r3, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6015      	str	r5, [r2, #0]
 80045ba:	060a      	lsls	r2, r1, #24
 80045bc:	d50b      	bpl.n	80045d6 <_printf_i+0x162>
 80045be:	07ca      	lsls	r2, r1, #31
 80045c0:	bf44      	itt	mi
 80045c2:	f041 0120 	orrmi.w	r1, r1, #32
 80045c6:	6021      	strmi	r1, [r4, #0]
 80045c8:	b91b      	cbnz	r3, 80045d2 <_printf_i+0x15e>
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	f022 0220 	bic.w	r2, r2, #32
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	e7b7      	b.n	8004546 <_printf_i+0xd2>
 80045d6:	064d      	lsls	r5, r1, #25
 80045d8:	bf48      	it	mi
 80045da:	b29b      	uxthmi	r3, r3
 80045dc:	e7ef      	b.n	80045be <_printf_i+0x14a>
 80045de:	4665      	mov	r5, ip
 80045e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80045e4:	fb02 3311 	mls	r3, r2, r1, r3
 80045e8:	5cc3      	ldrb	r3, [r0, r3]
 80045ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045ee:	460b      	mov	r3, r1
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d1f5      	bne.n	80045e0 <_printf_i+0x16c>
 80045f4:	e7b9      	b.n	800456a <_printf_i+0xf6>
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	6825      	ldr	r5, [r4, #0]
 80045fa:	6961      	ldr	r1, [r4, #20]
 80045fc:	1d18      	adds	r0, r3, #4
 80045fe:	6010      	str	r0, [r2, #0]
 8004600:	0628      	lsls	r0, r5, #24
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	d501      	bpl.n	800460a <_printf_i+0x196>
 8004606:	6019      	str	r1, [r3, #0]
 8004608:	e002      	b.n	8004610 <_printf_i+0x19c>
 800460a:	066a      	lsls	r2, r5, #25
 800460c:	d5fb      	bpl.n	8004606 <_printf_i+0x192>
 800460e:	8019      	strh	r1, [r3, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	4665      	mov	r5, ip
 8004616:	e7b9      	b.n	800458c <_printf_i+0x118>
 8004618:	6813      	ldr	r3, [r2, #0]
 800461a:	1d19      	adds	r1, r3, #4
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	681d      	ldr	r5, [r3, #0]
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	2100      	movs	r1, #0
 8004624:	4628      	mov	r0, r5
 8004626:	f7fb fddb 	bl	80001e0 <memchr>
 800462a:	b108      	cbz	r0, 8004630 <_printf_i+0x1bc>
 800462c:	1b40      	subs	r0, r0, r5
 800462e:	6060      	str	r0, [r4, #4]
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	6123      	str	r3, [r4, #16]
 8004634:	2300      	movs	r3, #0
 8004636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463a:	e7a7      	b.n	800458c <_printf_i+0x118>
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	462a      	mov	r2, r5
 8004640:	4639      	mov	r1, r7
 8004642:	4630      	mov	r0, r6
 8004644:	47c0      	blx	r8
 8004646:	3001      	adds	r0, #1
 8004648:	d0aa      	beq.n	80045a0 <_printf_i+0x12c>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	079b      	lsls	r3, r3, #30
 800464e:	d413      	bmi.n	8004678 <_printf_i+0x204>
 8004650:	68e0      	ldr	r0, [r4, #12]
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	4298      	cmp	r0, r3
 8004656:	bfb8      	it	lt
 8004658:	4618      	movlt	r0, r3
 800465a:	e7a3      	b.n	80045a4 <_printf_i+0x130>
 800465c:	2301      	movs	r3, #1
 800465e:	464a      	mov	r2, r9
 8004660:	4639      	mov	r1, r7
 8004662:	4630      	mov	r0, r6
 8004664:	47c0      	blx	r8
 8004666:	3001      	adds	r0, #1
 8004668:	d09a      	beq.n	80045a0 <_printf_i+0x12c>
 800466a:	3501      	adds	r5, #1
 800466c:	68e3      	ldr	r3, [r4, #12]
 800466e:	9a03      	ldr	r2, [sp, #12]
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	42ab      	cmp	r3, r5
 8004674:	dcf2      	bgt.n	800465c <_printf_i+0x1e8>
 8004676:	e7eb      	b.n	8004650 <_printf_i+0x1dc>
 8004678:	2500      	movs	r5, #0
 800467a:	f104 0919 	add.w	r9, r4, #25
 800467e:	e7f5      	b.n	800466c <_printf_i+0x1f8>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ac      	bne.n	80045de <_printf_i+0x16a>
 8004684:	7803      	ldrb	r3, [r0, #0]
 8004686:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800468a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800468e:	e76c      	b.n	800456a <_printf_i+0xf6>
 8004690:	08022dc9 	.word	0x08022dc9
 8004694:	08022dda 	.word	0x08022dda

08004698 <memmove>:
 8004698:	4288      	cmp	r0, r1
 800469a:	b510      	push	{r4, lr}
 800469c:	eb01 0302 	add.w	r3, r1, r2
 80046a0:	d807      	bhi.n	80046b2 <memmove+0x1a>
 80046a2:	1e42      	subs	r2, r0, #1
 80046a4:	4299      	cmp	r1, r3
 80046a6:	d00a      	beq.n	80046be <memmove+0x26>
 80046a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046b0:	e7f8      	b.n	80046a4 <memmove+0xc>
 80046b2:	4283      	cmp	r3, r0
 80046b4:	d9f5      	bls.n	80046a2 <memmove+0xa>
 80046b6:	1881      	adds	r1, r0, r2
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	42d3      	cmn	r3, r2
 80046bc:	d100      	bne.n	80046c0 <memmove+0x28>
 80046be:	bd10      	pop	{r4, pc}
 80046c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046c8:	e7f7      	b.n	80046ba <memmove+0x22>
	...

080046cc <_free_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4605      	mov	r5, r0
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d045      	beq.n	8004760 <_free_r+0x94>
 80046d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d8:	1f0c      	subs	r4, r1, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfb8      	it	lt
 80046de:	18e4      	addlt	r4, r4, r3
 80046e0:	f000 f8d2 	bl	8004888 <__malloc_lock>
 80046e4:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <_free_r+0x98>)
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	4610      	mov	r0, r2
 80046ea:	b933      	cbnz	r3, 80046fa <_free_r+0x2e>
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	6014      	str	r4, [r2, #0]
 80046f0:	4628      	mov	r0, r5
 80046f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f6:	f000 b8c8 	b.w	800488a <__malloc_unlock>
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	d90c      	bls.n	8004718 <_free_r+0x4c>
 80046fe:	6821      	ldr	r1, [r4, #0]
 8004700:	1862      	adds	r2, r4, r1
 8004702:	4293      	cmp	r3, r2
 8004704:	bf04      	itt	eq
 8004706:	681a      	ldreq	r2, [r3, #0]
 8004708:	685b      	ldreq	r3, [r3, #4]
 800470a:	6063      	str	r3, [r4, #4]
 800470c:	bf04      	itt	eq
 800470e:	1852      	addeq	r2, r2, r1
 8004710:	6022      	streq	r2, [r4, #0]
 8004712:	6004      	str	r4, [r0, #0]
 8004714:	e7ec      	b.n	80046f0 <_free_r+0x24>
 8004716:	4613      	mov	r3, r2
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	b10a      	cbz	r2, 8004720 <_free_r+0x54>
 800471c:	42a2      	cmp	r2, r4
 800471e:	d9fa      	bls.n	8004716 <_free_r+0x4a>
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	1858      	adds	r0, r3, r1
 8004724:	42a0      	cmp	r0, r4
 8004726:	d10b      	bne.n	8004740 <_free_r+0x74>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	4401      	add	r1, r0
 800472c:	1858      	adds	r0, r3, r1
 800472e:	4282      	cmp	r2, r0
 8004730:	6019      	str	r1, [r3, #0]
 8004732:	d1dd      	bne.n	80046f0 <_free_r+0x24>
 8004734:	6810      	ldr	r0, [r2, #0]
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	4401      	add	r1, r0
 800473c:	6019      	str	r1, [r3, #0]
 800473e:	e7d7      	b.n	80046f0 <_free_r+0x24>
 8004740:	d902      	bls.n	8004748 <_free_r+0x7c>
 8004742:	230c      	movs	r3, #12
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	e7d3      	b.n	80046f0 <_free_r+0x24>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	1821      	adds	r1, r4, r0
 800474c:	428a      	cmp	r2, r1
 800474e:	bf04      	itt	eq
 8004750:	6811      	ldreq	r1, [r2, #0]
 8004752:	6852      	ldreq	r2, [r2, #4]
 8004754:	6062      	str	r2, [r4, #4]
 8004756:	bf04      	itt	eq
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	605c      	str	r4, [r3, #4]
 800475e:	e7c7      	b.n	80046f0 <_free_r+0x24>
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	20000154 	.word	0x20000154

08004768 <_malloc_r>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	1ccd      	adds	r5, r1, #3
 800476c:	f025 0503 	bic.w	r5, r5, #3
 8004770:	3508      	adds	r5, #8
 8004772:	2d0c      	cmp	r5, #12
 8004774:	bf38      	it	cc
 8004776:	250c      	movcc	r5, #12
 8004778:	2d00      	cmp	r5, #0
 800477a:	4606      	mov	r6, r0
 800477c:	db01      	blt.n	8004782 <_malloc_r+0x1a>
 800477e:	42a9      	cmp	r1, r5
 8004780:	d903      	bls.n	800478a <_malloc_r+0x22>
 8004782:	230c      	movs	r3, #12
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	2000      	movs	r0, #0
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	f000 f87d 	bl	8004888 <__malloc_lock>
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <_malloc_r+0xac>)
 8004790:	6814      	ldr	r4, [r2, #0]
 8004792:	4621      	mov	r1, r4
 8004794:	b991      	cbnz	r1, 80047bc <_malloc_r+0x54>
 8004796:	4c20      	ldr	r4, [pc, #128]	; (8004818 <_malloc_r+0xb0>)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	b91b      	cbnz	r3, 80047a4 <_malloc_r+0x3c>
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f863 	bl	8004868 <_sbrk_r>
 80047a2:	6020      	str	r0, [r4, #0]
 80047a4:	4629      	mov	r1, r5
 80047a6:	4630      	mov	r0, r6
 80047a8:	f000 f85e 	bl	8004868 <_sbrk_r>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d124      	bne.n	80047fa <_malloc_r+0x92>
 80047b0:	230c      	movs	r3, #12
 80047b2:	6033      	str	r3, [r6, #0]
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f868 	bl	800488a <__malloc_unlock>
 80047ba:	e7e4      	b.n	8004786 <_malloc_r+0x1e>
 80047bc:	680b      	ldr	r3, [r1, #0]
 80047be:	1b5b      	subs	r3, r3, r5
 80047c0:	d418      	bmi.n	80047f4 <_malloc_r+0x8c>
 80047c2:	2b0b      	cmp	r3, #11
 80047c4:	d90f      	bls.n	80047e6 <_malloc_r+0x7e>
 80047c6:	600b      	str	r3, [r1, #0]
 80047c8:	50cd      	str	r5, [r1, r3]
 80047ca:	18cc      	adds	r4, r1, r3
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 f85c 	bl	800488a <__malloc_unlock>
 80047d2:	f104 000b 	add.w	r0, r4, #11
 80047d6:	1d23      	adds	r3, r4, #4
 80047d8:	f020 0007 	bic.w	r0, r0, #7
 80047dc:	1ac3      	subs	r3, r0, r3
 80047de:	d0d3      	beq.n	8004788 <_malloc_r+0x20>
 80047e0:	425a      	negs	r2, r3
 80047e2:	50e2      	str	r2, [r4, r3]
 80047e4:	e7d0      	b.n	8004788 <_malloc_r+0x20>
 80047e6:	428c      	cmp	r4, r1
 80047e8:	684b      	ldr	r3, [r1, #4]
 80047ea:	bf16      	itet	ne
 80047ec:	6063      	strne	r3, [r4, #4]
 80047ee:	6013      	streq	r3, [r2, #0]
 80047f0:	460c      	movne	r4, r1
 80047f2:	e7eb      	b.n	80047cc <_malloc_r+0x64>
 80047f4:	460c      	mov	r4, r1
 80047f6:	6849      	ldr	r1, [r1, #4]
 80047f8:	e7cc      	b.n	8004794 <_malloc_r+0x2c>
 80047fa:	1cc4      	adds	r4, r0, #3
 80047fc:	f024 0403 	bic.w	r4, r4, #3
 8004800:	42a0      	cmp	r0, r4
 8004802:	d005      	beq.n	8004810 <_malloc_r+0xa8>
 8004804:	1a21      	subs	r1, r4, r0
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f82e 	bl	8004868 <_sbrk_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d0cf      	beq.n	80047b0 <_malloc_r+0x48>
 8004810:	6025      	str	r5, [r4, #0]
 8004812:	e7db      	b.n	80047cc <_malloc_r+0x64>
 8004814:	20000154 	.word	0x20000154
 8004818:	20000158 	.word	0x20000158

0800481c <_realloc_r>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	4607      	mov	r7, r0
 8004820:	4614      	mov	r4, r2
 8004822:	460e      	mov	r6, r1
 8004824:	b921      	cbnz	r1, 8004830 <_realloc_r+0x14>
 8004826:	4611      	mov	r1, r2
 8004828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800482c:	f7ff bf9c 	b.w	8004768 <_malloc_r>
 8004830:	b922      	cbnz	r2, 800483c <_realloc_r+0x20>
 8004832:	f7ff ff4b 	bl	80046cc <_free_r>
 8004836:	4625      	mov	r5, r4
 8004838:	4628      	mov	r0, r5
 800483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483c:	f000 f826 	bl	800488c <_malloc_usable_size_r>
 8004840:	42a0      	cmp	r0, r4
 8004842:	d20f      	bcs.n	8004864 <_realloc_r+0x48>
 8004844:	4621      	mov	r1, r4
 8004846:	4638      	mov	r0, r7
 8004848:	f7ff ff8e 	bl	8004768 <_malloc_r>
 800484c:	4605      	mov	r5, r0
 800484e:	2800      	cmp	r0, #0
 8004850:	d0f2      	beq.n	8004838 <_realloc_r+0x1c>
 8004852:	4631      	mov	r1, r6
 8004854:	4622      	mov	r2, r4
 8004856:	f7ff fc11 	bl	800407c <memcpy>
 800485a:	4631      	mov	r1, r6
 800485c:	4638      	mov	r0, r7
 800485e:	f7ff ff35 	bl	80046cc <_free_r>
 8004862:	e7e9      	b.n	8004838 <_realloc_r+0x1c>
 8004864:	4635      	mov	r5, r6
 8004866:	e7e7      	b.n	8004838 <_realloc_r+0x1c>

08004868 <_sbrk_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4c06      	ldr	r4, [pc, #24]	; (8004884 <_sbrk_r+0x1c>)
 800486c:	2300      	movs	r3, #0
 800486e:	4605      	mov	r5, r0
 8004870:	4608      	mov	r0, r1
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	f7fd fbc6 	bl	8002004 <_sbrk>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_sbrk_r+0x1a>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	b103      	cbz	r3, 8004882 <_sbrk_r+0x1a>
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	2000021c 	.word	0x2000021c

08004888 <__malloc_lock>:
 8004888:	4770      	bx	lr

0800488a <__malloc_unlock>:
 800488a:	4770      	bx	lr

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr

0800489c <cosf>:
 800489c:	ee10 3a10 	vmov	r3, s0
 80048a0:	b507      	push	{r0, r1, r2, lr}
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <cosf+0x78>)
 80048a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	4293      	cmp	r3, r2
 80048aa:	dc04      	bgt.n	80048b6 <cosf+0x1a>
 80048ac:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004918 <cosf+0x7c>
 80048b0:	f000 f9a2 	bl	8004bf8 <__kernel_cosf>
 80048b4:	e004      	b.n	80048c0 <cosf+0x24>
 80048b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80048ba:	db04      	blt.n	80048c6 <cosf+0x2a>
 80048bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80048c0:	b003      	add	sp, #12
 80048c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80048c6:	4668      	mov	r0, sp
 80048c8:	f000 f86a 	bl	80049a0 <__ieee754_rem_pio2f>
 80048cc:	f000 0003 	and.w	r0, r0, #3
 80048d0:	2801      	cmp	r0, #1
 80048d2:	d007      	beq.n	80048e4 <cosf+0x48>
 80048d4:	2802      	cmp	r0, #2
 80048d6:	d00e      	beq.n	80048f6 <cosf+0x5a>
 80048d8:	b9a0      	cbnz	r0, 8004904 <cosf+0x68>
 80048da:	eddd 0a01 	vldr	s1, [sp, #4]
 80048de:	ed9d 0a00 	vldr	s0, [sp]
 80048e2:	e7e5      	b.n	80048b0 <cosf+0x14>
 80048e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80048e8:	ed9d 0a00 	vldr	s0, [sp]
 80048ec:	f000 fc64 	bl	80051b8 <__kernel_sinf>
 80048f0:	eeb1 0a40 	vneg.f32	s0, s0
 80048f4:	e7e4      	b.n	80048c0 <cosf+0x24>
 80048f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80048fa:	ed9d 0a00 	vldr	s0, [sp]
 80048fe:	f000 f97b 	bl	8004bf8 <__kernel_cosf>
 8004902:	e7f5      	b.n	80048f0 <cosf+0x54>
 8004904:	2001      	movs	r0, #1
 8004906:	eddd 0a01 	vldr	s1, [sp, #4]
 800490a:	ed9d 0a00 	vldr	s0, [sp]
 800490e:	f000 fc53 	bl	80051b8 <__kernel_sinf>
 8004912:	e7d5      	b.n	80048c0 <cosf+0x24>
 8004914:	3f490fd8 	.word	0x3f490fd8
 8004918:	00000000 	.word	0x00000000

0800491c <sinf>:
 800491c:	ee10 3a10 	vmov	r3, s0
 8004920:	b507      	push	{r0, r1, r2, lr}
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <sinf+0x7c>)
 8004924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004928:	4293      	cmp	r3, r2
 800492a:	dc05      	bgt.n	8004938 <sinf+0x1c>
 800492c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800499c <sinf+0x80>
 8004930:	2000      	movs	r0, #0
 8004932:	f000 fc41 	bl	80051b8 <__kernel_sinf>
 8004936:	e004      	b.n	8004942 <sinf+0x26>
 8004938:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800493c:	db04      	blt.n	8004948 <sinf+0x2c>
 800493e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004942:	b003      	add	sp, #12
 8004944:	f85d fb04 	ldr.w	pc, [sp], #4
 8004948:	4668      	mov	r0, sp
 800494a:	f000 f829 	bl	80049a0 <__ieee754_rem_pio2f>
 800494e:	f000 0003 	and.w	r0, r0, #3
 8004952:	2801      	cmp	r0, #1
 8004954:	d008      	beq.n	8004968 <sinf+0x4c>
 8004956:	2802      	cmp	r0, #2
 8004958:	d00d      	beq.n	8004976 <sinf+0x5a>
 800495a:	b9b0      	cbnz	r0, 800498a <sinf+0x6e>
 800495c:	2001      	movs	r0, #1
 800495e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004962:	ed9d 0a00 	vldr	s0, [sp]
 8004966:	e7e4      	b.n	8004932 <sinf+0x16>
 8004968:	eddd 0a01 	vldr	s1, [sp, #4]
 800496c:	ed9d 0a00 	vldr	s0, [sp]
 8004970:	f000 f942 	bl	8004bf8 <__kernel_cosf>
 8004974:	e7e5      	b.n	8004942 <sinf+0x26>
 8004976:	2001      	movs	r0, #1
 8004978:	eddd 0a01 	vldr	s1, [sp, #4]
 800497c:	ed9d 0a00 	vldr	s0, [sp]
 8004980:	f000 fc1a 	bl	80051b8 <__kernel_sinf>
 8004984:	eeb1 0a40 	vneg.f32	s0, s0
 8004988:	e7db      	b.n	8004942 <sinf+0x26>
 800498a:	eddd 0a01 	vldr	s1, [sp, #4]
 800498e:	ed9d 0a00 	vldr	s0, [sp]
 8004992:	f000 f931 	bl	8004bf8 <__kernel_cosf>
 8004996:	e7f5      	b.n	8004984 <sinf+0x68>
 8004998:	3f490fd8 	.word	0x3f490fd8
 800499c:	00000000 	.word	0x00000000

080049a0 <__ieee754_rem_pio2f>:
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	ee10 6a10 	vmov	r6, s0
 80049a6:	4b86      	ldr	r3, [pc, #536]	; (8004bc0 <__ieee754_rem_pio2f+0x220>)
 80049a8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80049ac:	429c      	cmp	r4, r3
 80049ae:	b087      	sub	sp, #28
 80049b0:	4605      	mov	r5, r0
 80049b2:	dc05      	bgt.n	80049c0 <__ieee754_rem_pio2f+0x20>
 80049b4:	2300      	movs	r3, #0
 80049b6:	ed85 0a00 	vstr	s0, [r5]
 80049ba:	6043      	str	r3, [r0, #4]
 80049bc:	2000      	movs	r0, #0
 80049be:	e020      	b.n	8004a02 <__ieee754_rem_pio2f+0x62>
 80049c0:	4b80      	ldr	r3, [pc, #512]	; (8004bc4 <__ieee754_rem_pio2f+0x224>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	dc38      	bgt.n	8004a38 <__ieee754_rem_pio2f+0x98>
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	f024 040f 	bic.w	r4, r4, #15
 80049cc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004bc8 <__ieee754_rem_pio2f+0x228>
 80049d0:	4b7e      	ldr	r3, [pc, #504]	; (8004bcc <__ieee754_rem_pio2f+0x22c>)
 80049d2:	dd18      	ble.n	8004a06 <__ieee754_rem_pio2f+0x66>
 80049d4:	429c      	cmp	r4, r3
 80049d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80049da:	bf09      	itett	eq
 80049dc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004bd0 <__ieee754_rem_pio2f+0x230>
 80049e0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004bd4 <__ieee754_rem_pio2f+0x234>
 80049e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80049e8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004bd8 <__ieee754_rem_pio2f+0x238>
 80049ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80049f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80049f4:	edc0 6a00 	vstr	s13, [r0]
 80049f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8004a00:	2001      	movs	r0, #1
 8004a02:	b007      	add	sp, #28
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a06:	429c      	cmp	r4, r3
 8004a08:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004a0c:	bf09      	itett	eq
 8004a0e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004bd0 <__ieee754_rem_pio2f+0x230>
 8004a12:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004bd4 <__ieee754_rem_pio2f+0x234>
 8004a16:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004a1a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004bd8 <__ieee754_rem_pio2f+0x238>
 8004a1e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004a22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a26:	edc0 6a00 	vstr	s13, [r0]
 8004a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a2e:	edc0 7a01 	vstr	s15, [r0, #4]
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e7e4      	b.n	8004a02 <__ieee754_rem_pio2f+0x62>
 8004a38:	4b68      	ldr	r3, [pc, #416]	; (8004bdc <__ieee754_rem_pio2f+0x23c>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	dc71      	bgt.n	8004b22 <__ieee754_rem_pio2f+0x182>
 8004a3e:	f000 fc03 	bl	8005248 <fabsf>
 8004a42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004be0 <__ieee754_rem_pio2f+0x240>
 8004a46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a52:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004a56:	ee17 0a90 	vmov	r0, s15
 8004a5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004bc8 <__ieee754_rem_pio2f+0x228>
 8004a5e:	eeb1 7a46 	vneg.f32	s14, s12
 8004a62:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004a66:	281f      	cmp	r0, #31
 8004a68:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004bd4 <__ieee754_rem_pio2f+0x234>
 8004a6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004a74:	ee16 3a90 	vmov	r3, s13
 8004a78:	dc1c      	bgt.n	8004ab4 <__ieee754_rem_pio2f+0x114>
 8004a7a:	1e47      	subs	r7, r0, #1
 8004a7c:	4959      	ldr	r1, [pc, #356]	; (8004be4 <__ieee754_rem_pio2f+0x244>)
 8004a7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004a82:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004a86:	428a      	cmp	r2, r1
 8004a88:	d014      	beq.n	8004ab4 <__ieee754_rem_pio2f+0x114>
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	ed95 7a00 	vldr	s14, [r5]
 8004a90:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a9a:	ed85 0a01 	vstr	s0, [r5, #4]
 8004a9e:	dab0      	bge.n	8004a02 <__ieee754_rem_pio2f+0x62>
 8004aa0:	eeb1 7a47 	vneg.f32	s14, s14
 8004aa4:	eeb1 0a40 	vneg.f32	s0, s0
 8004aa8:	ed85 7a00 	vstr	s14, [r5]
 8004aac:	ed85 0a01 	vstr	s0, [r5, #4]
 8004ab0:	4240      	negs	r0, r0
 8004ab2:	e7a6      	b.n	8004a02 <__ieee754_rem_pio2f+0x62>
 8004ab4:	15e4      	asrs	r4, r4, #23
 8004ab6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004aba:	1aa2      	subs	r2, r4, r2
 8004abc:	2a08      	cmp	r2, #8
 8004abe:	dde4      	ble.n	8004a8a <__ieee754_rem_pio2f+0xea>
 8004ac0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004bd0 <__ieee754_rem_pio2f+0x230>
 8004ac4:	eef0 6a40 	vmov.f32	s13, s0
 8004ac8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004acc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004ad0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004ad4:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004bd8 <__ieee754_rem_pio2f+0x238>
 8004ad8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8004adc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004ae0:	eef0 7a40 	vmov.f32	s15, s0
 8004ae4:	ee15 3a90 	vmov	r3, s11
 8004ae8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004aec:	1aa4      	subs	r4, r4, r2
 8004aee:	2c19      	cmp	r4, #25
 8004af0:	dc04      	bgt.n	8004afc <__ieee754_rem_pio2f+0x15c>
 8004af2:	edc5 5a00 	vstr	s11, [r5]
 8004af6:	eeb0 0a66 	vmov.f32	s0, s13
 8004afa:	e7c7      	b.n	8004a8c <__ieee754_rem_pio2f+0xec>
 8004afc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004be8 <__ieee754_rem_pio2f+0x248>
 8004b00:	eeb0 0a66 	vmov.f32	s0, s13
 8004b04:	eea7 0a25 	vfma.f32	s0, s14, s11
 8004b08:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004b0c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004b10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004bec <__ieee754_rem_pio2f+0x24c>
 8004b14:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8004b18:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004b1c:	ed85 7a00 	vstr	s14, [r5]
 8004b20:	e7b4      	b.n	8004a8c <__ieee754_rem_pio2f+0xec>
 8004b22:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004b26:	db06      	blt.n	8004b36 <__ieee754_rem_pio2f+0x196>
 8004b28:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004b2c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004b30:	edc0 7a00 	vstr	s15, [r0]
 8004b34:	e742      	b.n	80049bc <__ieee754_rem_pio2f+0x1c>
 8004b36:	15e2      	asrs	r2, r4, #23
 8004b38:	3a86      	subs	r2, #134	; 0x86
 8004b3a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b46:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004bf0 <__ieee754_rem_pio2f+0x250>
 8004b4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b52:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004b56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b66:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004b6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b76:	edcd 7a05 	vstr	s15, [sp, #20]
 8004b7a:	d11e      	bne.n	8004bba <__ieee754_rem_pio2f+0x21a>
 8004b7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2302      	movne	r3, #2
 8004b8a:	491a      	ldr	r1, [pc, #104]	; (8004bf4 <__ieee754_rem_pio2f+0x254>)
 8004b8c:	9101      	str	r1, [sp, #4]
 8004b8e:	2102      	movs	r1, #2
 8004b90:	9100      	str	r1, [sp, #0]
 8004b92:	a803      	add	r0, sp, #12
 8004b94:	4629      	mov	r1, r5
 8004b96:	f000 f88d 	bl	8004cb4 <__kernel_rem_pio2f>
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	f6bf af31 	bge.w	8004a02 <__ieee754_rem_pio2f+0x62>
 8004ba0:	edd5 7a00 	vldr	s15, [r5]
 8004ba4:	eef1 7a67 	vneg.f32	s15, s15
 8004ba8:	edc5 7a00 	vstr	s15, [r5]
 8004bac:	edd5 7a01 	vldr	s15, [r5, #4]
 8004bb0:	eef1 7a67 	vneg.f32	s15, s15
 8004bb4:	edc5 7a01 	vstr	s15, [r5, #4]
 8004bb8:	e77a      	b.n	8004ab0 <__ieee754_rem_pio2f+0x110>
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e7e5      	b.n	8004b8a <__ieee754_rem_pio2f+0x1ea>
 8004bbe:	bf00      	nop
 8004bc0:	3f490fd8 	.word	0x3f490fd8
 8004bc4:	4016cbe3 	.word	0x4016cbe3
 8004bc8:	3fc90f80 	.word	0x3fc90f80
 8004bcc:	3fc90fd0 	.word	0x3fc90fd0
 8004bd0:	37354400 	.word	0x37354400
 8004bd4:	37354443 	.word	0x37354443
 8004bd8:	2e85a308 	.word	0x2e85a308
 8004bdc:	43490f80 	.word	0x43490f80
 8004be0:	3f22f984 	.word	0x3f22f984
 8004be4:	08022dec 	.word	0x08022dec
 8004be8:	2e85a300 	.word	0x2e85a300
 8004bec:	248d3132 	.word	0x248d3132
 8004bf0:	43800000 	.word	0x43800000
 8004bf4:	08022e6c 	.word	0x08022e6c

08004bf8 <__kernel_cosf>:
 8004bf8:	ee10 3a10 	vmov	r3, s0
 8004bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c08:	da05      	bge.n	8004c16 <__kernel_cosf+0x1e>
 8004c0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004c0e:	ee17 2a90 	vmov	r2, s15
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	d03b      	beq.n	8004c8e <__kernel_cosf+0x96>
 8004c16:	ee20 6a00 	vmul.f32	s12, s0, s0
 8004c1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c94 <__kernel_cosf+0x9c>
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <__kernel_cosf+0xa0>)
 8004c24:	ee66 7a07 	vmul.f32	s15, s12, s14
 8004c28:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004c9c <__kernel_cosf+0xa4>
 8004c2c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8004c30:	4293      	cmp	r3, r2
 8004c32:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004ca0 <__kernel_cosf+0xa8>
 8004c36:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004c3a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004ca4 <__kernel_cosf+0xac>
 8004c3e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004c42:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004ca8 <__kernel_cosf+0xb0>
 8004c46:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004c4a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cac <__kernel_cosf+0xb4>
 8004c4e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004c52:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004c56:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004c5a:	eee6 0a07 	vfma.f32	s1, s12, s14
 8004c5e:	dc04      	bgt.n	8004c6a <__kernel_cosf+0x72>
 8004c60:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8004c64:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004c68:	4770      	bx	lr
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <__kernel_cosf+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfda      	itte	le
 8004c70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004c74:	ee07 3a10 	vmovle	s14, r3
 8004c78:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8004c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c80:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004c84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004c88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004c8c:	4770      	bx	lr
 8004c8e:	eeb0 0a66 	vmov.f32	s0, s13
 8004c92:	4770      	bx	lr
 8004c94:	ad47d74e 	.word	0xad47d74e
 8004c98:	3e999999 	.word	0x3e999999
 8004c9c:	310f74f6 	.word	0x310f74f6
 8004ca0:	b493f27c 	.word	0xb493f27c
 8004ca4:	37d00d01 	.word	0x37d00d01
 8004ca8:	bab60b61 	.word	0xbab60b61
 8004cac:	3d2aaaab 	.word	0x3d2aaaab
 8004cb0:	3f480000 	.word	0x3f480000

08004cb4 <__kernel_rem_pio2f>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	ed2d 8b04 	vpush	{d8-d9}
 8004cbc:	b0d7      	sub	sp, #348	; 0x15c
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	4bbe      	ldr	r3, [pc, #760]	; (8004fbc <__kernel_rem_pio2f+0x308>)
 8004cc4:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004cc6:	9002      	str	r0, [sp, #8]
 8004cc8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8004ccc:	9865      	ldr	r0, [sp, #404]	; 0x194
 8004cce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8004fcc <__kernel_rem_pio2f+0x318>
 8004cd2:	1ed1      	subs	r1, r2, #3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	fb91 f1f3 	sdiv	r1, r1, r3
 8004cda:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8004cde:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004ce2:	1c4c      	adds	r4, r1, #1
 8004ce4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004ce8:	eba1 050a 	sub.w	r5, r1, sl
 8004cec:	aa1a      	add	r2, sp, #104	; 0x68
 8004cee:	eb09 070a 	add.w	r7, r9, sl
 8004cf2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8004cf6:	4696      	mov	lr, r2
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	42bb      	cmp	r3, r7
 8004cfc:	dd0f      	ble.n	8004d1e <__kernel_rem_pio2f+0x6a>
 8004cfe:	af42      	add	r7, sp, #264	; 0x108
 8004d00:	2200      	movs	r2, #0
 8004d02:	454a      	cmp	r2, r9
 8004d04:	dc27      	bgt.n	8004d56 <__kernel_rem_pio2f+0xa2>
 8004d06:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8004d0a:	eb0b 0302 	add.w	r3, fp, r2
 8004d0e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8004d12:	9d02      	ldr	r5, [sp, #8]
 8004d14:	eddf 7aad 	vldr	s15, [pc, #692]	; 8004fcc <__kernel_rem_pio2f+0x318>
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	e015      	b.n	8004d4a <__kernel_rem_pio2f+0x96>
 8004d1e:	42dd      	cmn	r5, r3
 8004d20:	bf5d      	ittte	pl
 8004d22:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8004d26:	ee07 2a90 	vmovpl	s15, r2
 8004d2a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004d2e:	eef0 7a47 	vmovmi.f32	s15, s14
 8004d32:	ecee 7a01 	vstmia	lr!, {s15}
 8004d36:	3301      	adds	r3, #1
 8004d38:	e7df      	b.n	8004cfa <__kernel_rem_pio2f+0x46>
 8004d3a:	ecf5 6a01 	vldmia	r5!, {s13}
 8004d3e:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004d46:	f10c 0c01 	add.w	ip, ip, #1
 8004d4a:	45d4      	cmp	ip, sl
 8004d4c:	ddf5      	ble.n	8004d3a <__kernel_rem_pio2f+0x86>
 8004d4e:	ece7 7a01 	vstmia	r7!, {s15}
 8004d52:	3201      	adds	r2, #1
 8004d54:	e7d5      	b.n	8004d02 <__kernel_rem_pio2f+0x4e>
 8004d56:	ab06      	add	r3, sp, #24
 8004d58:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8004fc8 <__kernel_rem_pio2f+0x314>
 8004d62:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004fc4 <__kernel_rem_pio2f+0x310>
 8004d66:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	464d      	mov	r5, r9
 8004d6e:	ab56      	add	r3, sp, #344	; 0x158
 8004d70:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004d74:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004d78:	3f01      	subs	r7, #1
 8004d7a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004d7e:	00bf      	lsls	r7, r7, #2
 8004d80:	ab56      	add	r3, sp, #344	; 0x158
 8004d82:	19da      	adds	r2, r3, r7
 8004d84:	3a4c      	subs	r2, #76	; 0x4c
 8004d86:	2300      	movs	r3, #0
 8004d88:	1ae9      	subs	r1, r5, r3
 8004d8a:	2900      	cmp	r1, #0
 8004d8c:	dc4c      	bgt.n	8004e28 <__kernel_rem_pio2f+0x174>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 faa4 	bl	80052dc <scalbnf>
 8004d94:	eeb0 8a40 	vmov.f32	s16, s0
 8004d98:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004d9c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004da0:	f000 fa5a 	bl	8005258 <floorf>
 8004da4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004da8:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004dac:	2c00      	cmp	r4, #0
 8004dae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004db2:	edcd 7a01 	vstr	s15, [sp, #4]
 8004db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dba:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004dbe:	dd48      	ble.n	8004e52 <__kernel_rem_pio2f+0x19e>
 8004dc0:	1e69      	subs	r1, r5, #1
 8004dc2:	ab06      	add	r3, sp, #24
 8004dc4:	f1c4 0008 	rsb	r0, r4, #8
 8004dc8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8004dcc:	9a01      	ldr	r2, [sp, #4]
 8004dce:	fa4c f300 	asr.w	r3, ip, r0
 8004dd2:	441a      	add	r2, r3
 8004dd4:	4083      	lsls	r3, r0
 8004dd6:	9201      	str	r2, [sp, #4]
 8004dd8:	ebac 0203 	sub.w	r2, ip, r3
 8004ddc:	ab06      	add	r3, sp, #24
 8004dde:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004de2:	f1c4 0307 	rsb	r3, r4, #7
 8004de6:	fa42 f803 	asr.w	r8, r2, r3
 8004dea:	f1b8 0f00 	cmp.w	r8, #0
 8004dee:	dd41      	ble.n	8004e74 <__kernel_rem_pio2f+0x1c0>
 8004df0:	9b01      	ldr	r3, [sp, #4]
 8004df2:	2000      	movs	r0, #0
 8004df4:	3301      	adds	r3, #1
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	4601      	mov	r1, r0
 8004dfa:	4285      	cmp	r5, r0
 8004dfc:	dc6d      	bgt.n	8004eda <__kernel_rem_pio2f+0x226>
 8004dfe:	2c00      	cmp	r4, #0
 8004e00:	dd04      	ble.n	8004e0c <__kernel_rem_pio2f+0x158>
 8004e02:	2c01      	cmp	r4, #1
 8004e04:	d07e      	beq.n	8004f04 <__kernel_rem_pio2f+0x250>
 8004e06:	2c02      	cmp	r4, #2
 8004e08:	f000 8086 	beq.w	8004f18 <__kernel_rem_pio2f+0x264>
 8004e0c:	f1b8 0f02 	cmp.w	r8, #2
 8004e10:	d130      	bne.n	8004e74 <__kernel_rem_pio2f+0x1c0>
 8004e12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e16:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004e1a:	b359      	cbz	r1, 8004e74 <__kernel_rem_pio2f+0x1c0>
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 fa5d 	bl	80052dc <scalbnf>
 8004e22:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004e26:	e025      	b.n	8004e74 <__kernel_rem_pio2f+0x1c0>
 8004e28:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004e2c:	a806      	add	r0, sp, #24
 8004e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e36:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004e3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004e3e:	ee10 1a10 	vmov	r1, s0
 8004e42:	ed32 0a01 	vldmdb	r2!, {s0}
 8004e46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8004e4a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004e4e:	3301      	adds	r3, #1
 8004e50:	e79a      	b.n	8004d88 <__kernel_rem_pio2f+0xd4>
 8004e52:	d106      	bne.n	8004e62 <__kernel_rem_pio2f+0x1ae>
 8004e54:	1e6b      	subs	r3, r5, #1
 8004e56:	aa06      	add	r2, sp, #24
 8004e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e5c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8004e60:	e7c3      	b.n	8004dea <__kernel_rem_pio2f+0x136>
 8004e62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004e66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6e:	da31      	bge.n	8004ed4 <__kernel_rem_pio2f+0x220>
 8004e70:	f04f 0800 	mov.w	r8, #0
 8004e74:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	f040 80a8 	bne.w	8004fd0 <__kernel_rem_pio2f+0x31c>
 8004e80:	1e6b      	subs	r3, r5, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	2200      	movs	r2, #0
 8004e86:	4548      	cmp	r0, r9
 8004e88:	da4d      	bge.n	8004f26 <__kernel_rem_pio2f+0x272>
 8004e8a:	2a00      	cmp	r2, #0
 8004e8c:	f000 8087 	beq.w	8004f9e <__kernel_rem_pio2f+0x2ea>
 8004e90:	aa06      	add	r2, sp, #24
 8004e92:	3c08      	subs	r4, #8
 8004e94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	f000 808d 	beq.w	8004fb8 <__kernel_rem_pio2f+0x304>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ea4:	9302      	str	r3, [sp, #8]
 8004ea6:	f000 fa19 	bl	80052dc <scalbnf>
 8004eaa:	9b02      	ldr	r3, [sp, #8]
 8004eac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004fc8 <__kernel_rem_pio2f+0x314>
 8004eb0:	0099      	lsls	r1, r3, #2
 8004eb2:	aa42      	add	r2, sp, #264	; 0x108
 8004eb4:	1850      	adds	r0, r2, r1
 8004eb6:	1d05      	adds	r5, r0, #4
 8004eb8:	461c      	mov	r4, r3
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	f280 80b8 	bge.w	8005030 <__kernel_rem_pio2f+0x37c>
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	1b5c      	subs	r4, r3, r5
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	f2c0 80d8 	blt.w	800507a <__kernel_rem_pio2f+0x3c6>
 8004eca:	4f3d      	ldr	r7, [pc, #244]	; (8004fc0 <__kernel_rem_pio2f+0x30c>)
 8004ecc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004fcc <__kernel_rem_pio2f+0x318>
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	e0c6      	b.n	8005062 <__kernel_rem_pio2f+0x3ae>
 8004ed4:	f04f 0802 	mov.w	r8, #2
 8004ed8:	e78a      	b.n	8004df0 <__kernel_rem_pio2f+0x13c>
 8004eda:	ab06      	add	r3, sp, #24
 8004edc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004ee0:	b949      	cbnz	r1, 8004ef6 <__kernel_rem_pio2f+0x242>
 8004ee2:	b12b      	cbz	r3, 8004ef0 <__kernel_rem_pio2f+0x23c>
 8004ee4:	aa06      	add	r2, sp, #24
 8004ee6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004eea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	e781      	b.n	8004dfa <__kernel_rem_pio2f+0x146>
 8004ef6:	aa06      	add	r2, sp, #24
 8004ef8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004efc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004f00:	460b      	mov	r3, r1
 8004f02:	e7f5      	b.n	8004ef0 <__kernel_rem_pio2f+0x23c>
 8004f04:	1e68      	subs	r0, r5, #1
 8004f06:	ab06      	add	r3, sp, #24
 8004f08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	aa06      	add	r2, sp, #24
 8004f12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004f16:	e779      	b.n	8004e0c <__kernel_rem_pio2f+0x158>
 8004f18:	1e68      	subs	r0, r5, #1
 8004f1a:	ab06      	add	r3, sp, #24
 8004f1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f24:	e7f4      	b.n	8004f10 <__kernel_rem_pio2f+0x25c>
 8004f26:	a906      	add	r1, sp, #24
 8004f28:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004f2c:	3801      	subs	r0, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	e7a9      	b.n	8004e86 <__kernel_rem_pio2f+0x1d2>
 8004f32:	f10c 0c01 	add.w	ip, ip, #1
 8004f36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	d0f9      	beq.n	8004f32 <__kernel_rem_pio2f+0x27e>
 8004f3e:	eb0b 0305 	add.w	r3, fp, r5
 8004f42:	aa1a      	add	r2, sp, #104	; 0x68
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	1898      	adds	r0, r3, r2
 8004f48:	3004      	adds	r0, #4
 8004f4a:	1c69      	adds	r1, r5, #1
 8004f4c:	3704      	adds	r7, #4
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4465      	add	r5, ip
 8004f52:	9005      	str	r0, [sp, #20]
 8004f54:	428d      	cmp	r5, r1
 8004f56:	f6ff af0a 	blt.w	8004d6e <__kernel_rem_pio2f+0xba>
 8004f5a:	a81a      	add	r0, sp, #104	; 0x68
 8004f5c:	eb02 0c03 	add.w	ip, r2, r3
 8004f60:	4484      	add	ip, r0
 8004f62:	9803      	ldr	r0, [sp, #12]
 8004f64:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004f68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8004f6c:	9001      	str	r0, [sp, #4]
 8004f6e:	ee07 0a90 	vmov	s15, r0
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f76:	9805      	ldr	r0, [sp, #20]
 8004f78:	edcc 7a00 	vstr	s15, [ip]
 8004f7c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004fcc <__kernel_rem_pio2f+0x318>
 8004f80:	eb00 0802 	add.w	r8, r0, r2
 8004f84:	f04f 0c00 	mov.w	ip, #0
 8004f88:	45d4      	cmp	ip, sl
 8004f8a:	dd0c      	ble.n	8004fa6 <__kernel_rem_pio2f+0x2f2>
 8004f8c:	eb02 0c07 	add.w	ip, r2, r7
 8004f90:	a842      	add	r0, sp, #264	; 0x108
 8004f92:	4484      	add	ip, r0
 8004f94:	edcc 7a01 	vstr	s15, [ip, #4]
 8004f98:	3101      	adds	r1, #1
 8004f9a:	3204      	adds	r2, #4
 8004f9c:	e7da      	b.n	8004f54 <__kernel_rem_pio2f+0x2a0>
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	f04f 0c01 	mov.w	ip, #1
 8004fa4:	e7c7      	b.n	8004f36 <__kernel_rem_pio2f+0x282>
 8004fa6:	ecfe 6a01 	vldmia	lr!, {s13}
 8004faa:	ed38 7a01 	vldmdb	r8!, {s14}
 8004fae:	f10c 0c01 	add.w	ip, ip, #1
 8004fb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004fb6:	e7e7      	b.n	8004f88 <__kernel_rem_pio2f+0x2d4>
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	e769      	b.n	8004e90 <__kernel_rem_pio2f+0x1dc>
 8004fbc:	080231b0 	.word	0x080231b0
 8004fc0:	08023184 	.word	0x08023184
 8004fc4:	43800000 	.word	0x43800000
 8004fc8:	3b800000 	.word	0x3b800000
 8004fcc:	00000000 	.word	0x00000000
 8004fd0:	4260      	negs	r0, r4
 8004fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8004fd6:	f000 f981 	bl	80052dc <scalbnf>
 8004fda:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004fc4 <__kernel_rem_pio2f+0x310>
 8004fde:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe6:	db1a      	blt.n	800501e <__kernel_rem_pio2f+0x36a>
 8004fe8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004fc8 <__kernel_rem_pio2f+0x314>
 8004fec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ff0:	aa06      	add	r2, sp, #24
 8004ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff6:	a906      	add	r1, sp, #24
 8004ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffc:	3408      	adds	r4, #8
 8004ffe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005006:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800500a:	ee10 3a10 	vmov	r3, s0
 800500e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005012:	1c6b      	adds	r3, r5, #1
 8005014:	ee17 2a90 	vmov	r2, s15
 8005018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800501c:	e73f      	b.n	8004e9e <__kernel_rem_pio2f+0x1ea>
 800501e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005022:	aa06      	add	r2, sp, #24
 8005024:	ee10 3a10 	vmov	r3, s0
 8005028:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800502c:	462b      	mov	r3, r5
 800502e:	e736      	b.n	8004e9e <__kernel_rem_pio2f+0x1ea>
 8005030:	aa06      	add	r2, sp, #24
 8005032:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005036:	9202      	str	r2, [sp, #8]
 8005038:	ee07 2a90 	vmov	s15, r2
 800503c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005040:	3c01      	subs	r4, #1
 8005042:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005046:	ee20 0a07 	vmul.f32	s0, s0, s14
 800504a:	ed65 7a01 	vstmdb	r5!, {s15}
 800504e:	e734      	b.n	8004eba <__kernel_rem_pio2f+0x206>
 8005050:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8005054:	ecf7 6a01 	vldmia	r7!, {s13}
 8005058:	ed9c 7a00 	vldr	s14, [ip]
 800505c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005060:	3401      	adds	r4, #1
 8005062:	454c      	cmp	r4, r9
 8005064:	dc01      	bgt.n	800506a <__kernel_rem_pio2f+0x3b6>
 8005066:	42a5      	cmp	r5, r4
 8005068:	daf2      	bge.n	8005050 <__kernel_rem_pio2f+0x39c>
 800506a:	aa56      	add	r2, sp, #344	; 0x158
 800506c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8005070:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8005074:	3501      	adds	r5, #1
 8005076:	3804      	subs	r0, #4
 8005078:	e723      	b.n	8004ec2 <__kernel_rem_pio2f+0x20e>
 800507a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800507c:	2a03      	cmp	r2, #3
 800507e:	d84d      	bhi.n	800511c <__kernel_rem_pio2f+0x468>
 8005080:	e8df f002 	tbb	[pc, r2]
 8005084:	021f1f3e 	.word	0x021f1f3e
 8005088:	aa56      	add	r2, sp, #344	; 0x158
 800508a:	4411      	add	r1, r2
 800508c:	399c      	subs	r1, #156	; 0x9c
 800508e:	4608      	mov	r0, r1
 8005090:	461c      	mov	r4, r3
 8005092:	2c00      	cmp	r4, #0
 8005094:	dc5f      	bgt.n	8005156 <__kernel_rem_pio2f+0x4a2>
 8005096:	4608      	mov	r0, r1
 8005098:	461c      	mov	r4, r3
 800509a:	2c01      	cmp	r4, #1
 800509c:	dc6b      	bgt.n	8005176 <__kernel_rem_pio2f+0x4c2>
 800509e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8004fcc <__kernel_rem_pio2f+0x318>
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	dc77      	bgt.n	8005196 <__kernel_rem_pio2f+0x4e2>
 80050a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80050aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80050ae:	f1b8 0f00 	cmp.w	r8, #0
 80050b2:	d176      	bne.n	80051a2 <__kernel_rem_pio2f+0x4ee>
 80050b4:	edc6 6a00 	vstr	s13, [r6]
 80050b8:	ed86 7a01 	vstr	s14, [r6, #4]
 80050bc:	edc6 7a02 	vstr	s15, [r6, #8]
 80050c0:	e02c      	b.n	800511c <__kernel_rem_pio2f+0x468>
 80050c2:	aa56      	add	r2, sp, #344	; 0x158
 80050c4:	4411      	add	r1, r2
 80050c6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8004fcc <__kernel_rem_pio2f+0x318>
 80050ca:	399c      	subs	r1, #156	; 0x9c
 80050cc:	4618      	mov	r0, r3
 80050ce:	2800      	cmp	r0, #0
 80050d0:	da32      	bge.n	8005138 <__kernel_rem_pio2f+0x484>
 80050d2:	f1b8 0f00 	cmp.w	r8, #0
 80050d6:	d035      	beq.n	8005144 <__kernel_rem_pio2f+0x490>
 80050d8:	eef1 7a47 	vneg.f32	s15, s14
 80050dc:	edc6 7a00 	vstr	s15, [r6]
 80050e0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80050e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050e8:	a82f      	add	r0, sp, #188	; 0xbc
 80050ea:	2101      	movs	r1, #1
 80050ec:	428b      	cmp	r3, r1
 80050ee:	da2c      	bge.n	800514a <__kernel_rem_pio2f+0x496>
 80050f0:	f1b8 0f00 	cmp.w	r8, #0
 80050f4:	d001      	beq.n	80050fa <__kernel_rem_pio2f+0x446>
 80050f6:	eef1 7a67 	vneg.f32	s15, s15
 80050fa:	edc6 7a01 	vstr	s15, [r6, #4]
 80050fe:	e00d      	b.n	800511c <__kernel_rem_pio2f+0x468>
 8005100:	aa56      	add	r2, sp, #344	; 0x158
 8005102:	4411      	add	r1, r2
 8005104:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004fcc <__kernel_rem_pio2f+0x318>
 8005108:	399c      	subs	r1, #156	; 0x9c
 800510a:	2b00      	cmp	r3, #0
 800510c:	da0e      	bge.n	800512c <__kernel_rem_pio2f+0x478>
 800510e:	f1b8 0f00 	cmp.w	r8, #0
 8005112:	d001      	beq.n	8005118 <__kernel_rem_pio2f+0x464>
 8005114:	eef1 7a67 	vneg.f32	s15, s15
 8005118:	edc6 7a00 	vstr	s15, [r6]
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	f003 0007 	and.w	r0, r3, #7
 8005122:	b057      	add	sp, #348	; 0x15c
 8005124:	ecbd 8b04 	vpop	{d8-d9}
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512c:	ed31 7a01 	vldmdb	r1!, {s14}
 8005130:	3b01      	subs	r3, #1
 8005132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005136:	e7e8      	b.n	800510a <__kernel_rem_pio2f+0x456>
 8005138:	ed71 7a01 	vldmdb	r1!, {s15}
 800513c:	3801      	subs	r0, #1
 800513e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005142:	e7c4      	b.n	80050ce <__kernel_rem_pio2f+0x41a>
 8005144:	eef0 7a47 	vmov.f32	s15, s14
 8005148:	e7c8      	b.n	80050dc <__kernel_rem_pio2f+0x428>
 800514a:	ecb0 7a01 	vldmia	r0!, {s14}
 800514e:	3101      	adds	r1, #1
 8005150:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005154:	e7ca      	b.n	80050ec <__kernel_rem_pio2f+0x438>
 8005156:	ed50 7a02 	vldr	s15, [r0, #-8]
 800515a:	ed70 6a01 	vldmdb	r0!, {s13}
 800515e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005162:	3c01      	subs	r4, #1
 8005164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005168:	ed00 7a01 	vstr	s14, [r0, #-4]
 800516c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005170:	edc0 7a00 	vstr	s15, [r0]
 8005174:	e78d      	b.n	8005092 <__kernel_rem_pio2f+0x3de>
 8005176:	ed50 7a02 	vldr	s15, [r0, #-8]
 800517a:	ed70 6a01 	vldmdb	r0!, {s13}
 800517e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005182:	3c01      	subs	r4, #1
 8005184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005188:	ed00 7a01 	vstr	s14, [r0, #-4]
 800518c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005190:	edc0 7a00 	vstr	s15, [r0]
 8005194:	e781      	b.n	800509a <__kernel_rem_pio2f+0x3e6>
 8005196:	ed31 7a01 	vldmdb	r1!, {s14}
 800519a:	3b01      	subs	r3, #1
 800519c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051a0:	e77f      	b.n	80050a2 <__kernel_rem_pio2f+0x3ee>
 80051a2:	eef1 6a66 	vneg.f32	s13, s13
 80051a6:	eeb1 7a47 	vneg.f32	s14, s14
 80051aa:	edc6 6a00 	vstr	s13, [r6]
 80051ae:	ed86 7a01 	vstr	s14, [r6, #4]
 80051b2:	eef1 7a67 	vneg.f32	s15, s15
 80051b6:	e781      	b.n	80050bc <__kernel_rem_pio2f+0x408>

080051b8 <__kernel_sinf>:
 80051b8:	ee10 3a10 	vmov	r3, s0
 80051bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80051c4:	da04      	bge.n	80051d0 <__kernel_sinf+0x18>
 80051c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80051ca:	ee17 3a90 	vmov	r3, s15
 80051ce:	b35b      	cbz	r3, 8005228 <__kernel_sinf+0x70>
 80051d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80051d4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800522c <__kernel_sinf+0x74>
 80051d8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005230 <__kernel_sinf+0x78>
 80051dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80051e0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005234 <__kernel_sinf+0x7c>
 80051e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80051e8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005238 <__kernel_sinf+0x80>
 80051ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80051f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800523c <__kernel_sinf+0x84>
 80051f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80051f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80051fc:	b930      	cbnz	r0, 800520c <__kernel_sinf+0x54>
 80051fe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005240 <__kernel_sinf+0x88>
 8005202:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005206:	eea6 0a26 	vfma.f32	s0, s12, s13
 800520a:	4770      	bx	lr
 800520c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005210:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005214:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005218:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800521c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005244 <__kernel_sinf+0x8c>
 8005220:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005224:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005230:	b2d72f34 	.word	0xb2d72f34
 8005234:	3638ef1b 	.word	0x3638ef1b
 8005238:	b9500d01 	.word	0xb9500d01
 800523c:	3c088889 	.word	0x3c088889
 8005240:	be2aaaab 	.word	0xbe2aaaab
 8005244:	3e2aaaab 	.word	0x3e2aaaab

08005248 <fabsf>:
 8005248:	ee10 3a10 	vmov	r3, s0
 800524c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005250:	ee00 3a10 	vmov	s0, r3
 8005254:	4770      	bx	lr
	...

08005258 <floorf>:
 8005258:	ee10 3a10 	vmov	r3, s0
 800525c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005260:	0dca      	lsrs	r2, r1, #23
 8005262:	3a7f      	subs	r2, #127	; 0x7f
 8005264:	2a16      	cmp	r2, #22
 8005266:	dc2a      	bgt.n	80052be <floorf+0x66>
 8005268:	2a00      	cmp	r2, #0
 800526a:	da11      	bge.n	8005290 <floorf+0x38>
 800526c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80052d0 <floorf+0x78>
 8005270:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005274:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527c:	dd05      	ble.n	800528a <floorf+0x32>
 800527e:	2b00      	cmp	r3, #0
 8005280:	da23      	bge.n	80052ca <floorf+0x72>
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <floorf+0x7c>)
 8005284:	2900      	cmp	r1, #0
 8005286:	bf18      	it	ne
 8005288:	4613      	movne	r3, r2
 800528a:	ee00 3a10 	vmov	s0, r3
 800528e:	4770      	bx	lr
 8005290:	4911      	ldr	r1, [pc, #68]	; (80052d8 <floorf+0x80>)
 8005292:	4111      	asrs	r1, r2
 8005294:	420b      	tst	r3, r1
 8005296:	d0fa      	beq.n	800528e <floorf+0x36>
 8005298:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80052d0 <floorf+0x78>
 800529c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a8:	ddef      	ble.n	800528a <floorf+0x32>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bfbe      	ittt	lt
 80052ae:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80052b2:	fa40 f202 	asrlt.w	r2, r0, r2
 80052b6:	189b      	addlt	r3, r3, r2
 80052b8:	ea23 0301 	bic.w	r3, r3, r1
 80052bc:	e7e5      	b.n	800528a <floorf+0x32>
 80052be:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80052c2:	d3e4      	bcc.n	800528e <floorf+0x36>
 80052c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80052c8:	4770      	bx	lr
 80052ca:	2300      	movs	r3, #0
 80052cc:	e7dd      	b.n	800528a <floorf+0x32>
 80052ce:	bf00      	nop
 80052d0:	7149f2ca 	.word	0x7149f2ca
 80052d4:	bf800000 	.word	0xbf800000
 80052d8:	007fffff 	.word	0x007fffff

080052dc <scalbnf>:
 80052dc:	b508      	push	{r3, lr}
 80052de:	ee10 2a10 	vmov	r2, s0
 80052e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80052e6:	ed2d 8b02 	vpush	{d8}
 80052ea:	eef0 0a40 	vmov.f32	s1, s0
 80052ee:	d004      	beq.n	80052fa <scalbnf+0x1e>
 80052f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80052f4:	d306      	bcc.n	8005304 <scalbnf+0x28>
 80052f6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80052fa:	ecbd 8b02 	vpop	{d8}
 80052fe:	eeb0 0a60 	vmov.f32	s0, s1
 8005302:	bd08      	pop	{r3, pc}
 8005304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005308:	d21c      	bcs.n	8005344 <scalbnf+0x68>
 800530a:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <scalbnf+0xac>)
 800530c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800538c <scalbnf+0xb0>
 8005310:	4298      	cmp	r0, r3
 8005312:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005316:	db10      	blt.n	800533a <scalbnf+0x5e>
 8005318:	ee10 2a90 	vmov	r2, s1
 800531c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005320:	3b19      	subs	r3, #25
 8005322:	4403      	add	r3, r0
 8005324:	2bfe      	cmp	r3, #254	; 0xfe
 8005326:	dd0f      	ble.n	8005348 <scalbnf+0x6c>
 8005328:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005390 <scalbnf+0xb4>
 800532c:	eeb0 0a48 	vmov.f32	s0, s16
 8005330:	f000 f834 	bl	800539c <copysignf>
 8005334:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005338:	e7df      	b.n	80052fa <scalbnf+0x1e>
 800533a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005394 <scalbnf+0xb8>
 800533e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005342:	e7da      	b.n	80052fa <scalbnf+0x1e>
 8005344:	0ddb      	lsrs	r3, r3, #23
 8005346:	e7ec      	b.n	8005322 <scalbnf+0x46>
 8005348:	2b00      	cmp	r3, #0
 800534a:	dd06      	ble.n	800535a <scalbnf+0x7e>
 800534c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005350:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005354:	ee00 3a90 	vmov	s1, r3
 8005358:	e7cf      	b.n	80052fa <scalbnf+0x1e>
 800535a:	f113 0f16 	cmn.w	r3, #22
 800535e:	da06      	bge.n	800536e <scalbnf+0x92>
 8005360:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005364:	4298      	cmp	r0, r3
 8005366:	dcdf      	bgt.n	8005328 <scalbnf+0x4c>
 8005368:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005394 <scalbnf+0xb8>
 800536c:	e7de      	b.n	800532c <scalbnf+0x50>
 800536e:	3319      	adds	r3, #25
 8005370:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005374:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005378:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005398 <scalbnf+0xbc>
 800537c:	ee07 3a10 	vmov	s14, r3
 8005380:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005384:	e7b9      	b.n	80052fa <scalbnf+0x1e>
 8005386:	bf00      	nop
 8005388:	ffff3cb0 	.word	0xffff3cb0
 800538c:	4c000000 	.word	0x4c000000
 8005390:	7149f2ca 	.word	0x7149f2ca
 8005394:	0da24260 	.word	0x0da24260
 8005398:	33000000 	.word	0x33000000

0800539c <copysignf>:
 800539c:	ee10 3a10 	vmov	r3, s0
 80053a0:	ee10 2a90 	vmov	r2, s1
 80053a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80053ac:	4313      	orrs	r3, r2
 80053ae:	ee00 3a10 	vmov	s0, r3
 80053b2:	4770      	bx	lr

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
