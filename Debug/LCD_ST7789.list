
LCD_ST7789.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ddf0  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022d6c  08022d6c  00040078  2**0
                  CONTENTS
  4 .ARM          00000008  08022d6c  08022d6c  00032d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022d74  08022d74  00040078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022d74  08022d74  00032d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022d78  08022d78  00032d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08022d7c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  08022df4  00040078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08022df4  00040200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e0  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025c2  00000000  00000000  00052688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  00054c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00055ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022280  00000000  00000000  000569c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c139  00000000  00000000  00078c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2403  00000000  00000000  00084d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  00157200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f64 	.word	0x08004f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004f64 	.word	0x08004f64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b0af      	sub	sp, #188	; 0xbc
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fd51 	bl	800202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 fadf 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb71 	bl	8000c74 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000592:	f000 fb39 	bl	8000c08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	// включаем под�?ветку ди�?пле�? BLK
//	HAL_GPIO_WritePin( BLK_GPIO_Port, BLK_Pin, GPIO_PIN_SET );

	// ST7789 display initialization procedure
	ST7789_Init();
 8000596:	f000 fbf9 	bl	8000d8c <ST7789_Init>

	// Setting the display rotation is optional because mode 1 is set by default (there are 4 modes in total: 1, 2, 3, 4)
	ST7789_rotation( 1 );
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fb4e 	bl	8001c3c <ST7789_rotation>

	int hour = 12, minute = 34, second = 56; // Khởi tạo giờ phút giây ban đầu
 80005a0:	230c      	movs	r3, #12
 80005a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005a6:	2322      	movs	r3, #34	; 0x22
 80005a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80005ac:	2338      	movs	r3, #56	; 0x38
 80005ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// Vẽ nền và mặt đồng hồ chỉ 1 lần
	ST7789_DrawImage(0, 0, 240, 240, logoRGB);
 80005b2:	4b65      	ldr	r3, [pc, #404]	; (8000748 <main+0x1c8>)
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	23f0      	movs	r3, #240	; 0xf0
 80005b8:	22f0      	movs	r2, #240	; 0xf0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fc57 	bl	8000e70 <ST7789_DrawImage>
	ST7789_DrawRectangleFilled(40, 40, 200, 200, RGB565(30, 30, 30));
 80005c2:	f641 03e3 	movw	r3, #6371	; 0x18e3
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	23c8      	movs	r3, #200	; 0xc8
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	2128      	movs	r1, #40	; 0x28
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f000 fed7 	bl	8001382 <ST7789_DrawRectangleFilled>
	ST7789_DrawRectangle(40, 40, 200, 200, ST7789_WHITE);
 80005d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	23c8      	movs	r3, #200	; 0xc8
 80005dc:	22c8      	movs	r2, #200	; 0xc8
 80005de:	2128      	movs	r1, #40	; 0x28
 80005e0:	2028      	movs	r0, #40	; 0x28
 80005e2:	f000 fe71 	bl	80012c8 <ST7789_DrawRectangle>

	// Vẽ các vạch giờ chỉ 1 lần
	int cx = (40 + 200) / 2;
 80005e6:	2378      	movs	r3, #120	; 0x78
 80005e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	int cy = (40 + 200) / 2;
 80005ec:	2378      	movs	r3, #120	; 0x78
 80005ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (int i = 0; i < 12; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80005f8:	e06f      	b.n	80006da <main+0x15a>
	    float angle = (i * 30 - 90) * 3.14159f / 180.0f;
 80005fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80005fe:	4613      	mov	r3, r2
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	3b5a      	subs	r3, #90	; 0x5a
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000610:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800074c <main+0x1cc>
 8000614:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000618:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000750 <main+0x1d0>
 800061c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000620:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	    int x1 = cx + (int)(60 * cosf(angle));
 8000624:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000628:	f003 ff10 	bl	800444c <cosf>
 800062c:	eeb0 7a40 	vmov.f32	s14, s0
 8000630:	eddf 7a48 	vldr	s15, [pc, #288]	; 8000754 <main+0x1d4>
 8000634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063c:	ee17 2a90 	vmov	r2, s15
 8000640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000644:	4413      	add	r3, r2
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
	    int y1 = cy + (int)(60 * sinf(angle));
 8000648:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800064c:	f003 ff3e 	bl	80044cc <sinf>
 8000650:	eeb0 7a40 	vmov.f32	s14, s0
 8000654:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8000754 <main+0x1d4>
 8000658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800065c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000660:	ee17 2a90 	vmov	r2, s15
 8000664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000668:	4413      	add	r3, r2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
	    int x2 = cx + (int)(70 * cosf(angle));
 800066c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000670:	f003 feec 	bl	800444c <cosf>
 8000674:	eeb0 7a40 	vmov.f32	s14, s0
 8000678:	eddf 7a37 	vldr	s15, [pc, #220]	; 8000758 <main+0x1d8>
 800067c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000684:	ee17 2a90 	vmov	r2, s15
 8000688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800068c:	4413      	add	r3, r2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
	    int y2 = cy + (int)(70 * sinf(angle));
 8000690:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000694:	f003 ff1a 	bl	80044cc <sinf>
 8000698:	eeb0 7a40 	vmov.f32	s14, s0
 800069c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000758 <main+0x1d8>
 80006a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006a8:	ee17 2a90 	vmov	r2, s15
 80006ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006b0:	4413      	add	r3, r2
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
	    ST7789_DrawLine(x1, y1, x2, y2, ST7789_WHITE);
 80006b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006b6:	b218      	sxth	r0, r3
 80006b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ba:	b219      	sxth	r1, r3
 80006bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006be:	b21a      	sxth	r2, r3
 80006c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c2:	b21c      	sxth	r4, r3
 80006c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	4623      	mov	r3, r4
 80006cc:	f000 ff22 	bl	8001514 <ST7789_DrawLine>
	for (int i = 0; i < 12; i++) {
 80006d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006d4:	3301      	adds	r3, #1
 80006d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006de:	2b0b      	cmp	r3, #11
 80006e0:	dd8b      	ble.n	80005fa <main+0x7a>
	}

	char timeStrOld[16] = "";
 80006e2:	2300      	movs	r3, #0
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
 80006e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
	while (1) {
	    // Xóa kim cũ bằng màu nền đồng hồ (hoặc vẽ đè)
	    // (Có thể lưu lại tọa độ kim cũ để xóa chính xác hơn)
	    // Ở đây đơn giản là vẽ lại vùng đồng hồ nhỏ quanh tâm
	    ST7789_DrawRectangleFilled(cx-71, cy-71, cx+71, cy+71, RGB565(30, 30, 30));
 80006f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	3b47      	subs	r3, #71	; 0x47
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b218      	sxth	r0, r3
 80006fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000702:	b29b      	uxth	r3, r3
 8000704:	3b47      	subs	r3, #71	; 0x47
 8000706:	b29b      	uxth	r3, r3
 8000708:	b219      	sxth	r1, r3
 800070a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800070e:	b29b      	uxth	r3, r3
 8000710:	3347      	adds	r3, #71	; 0x47
 8000712:	b29b      	uxth	r3, r3
 8000714:	b21a      	sxth	r2, r3
 8000716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800071a:	b29b      	uxth	r3, r3
 800071c:	3347      	adds	r3, #71	; 0x47
 800071e:	b29b      	uxth	r3, r3
 8000720:	b21c      	sxth	r4, r3
 8000722:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4623      	mov	r3, r4
 800072a:	f000 fe2a 	bl	8001382 <ST7789_DrawRectangleFilled>
	    ST7789_DrawRectangle(40, 40, 200, 200, ST7789_WHITE);
 800072e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	23c8      	movs	r3, #200	; 0xc8
 8000736:	22c8      	movs	r2, #200	; 0xc8
 8000738:	2128      	movs	r1, #40	; 0x28
 800073a:	2028      	movs	r0, #40	; 0x28
 800073c:	f000 fdc4 	bl	80012c8 <ST7789_DrawRectangle>
	    for (int i = 0; i < 12; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000746:	e079      	b.n	800083c <main+0x2bc>
 8000748:	0800672c 	.word	0x0800672c
 800074c:	40490fd0 	.word	0x40490fd0
 8000750:	43340000 	.word	0x43340000
 8000754:	42700000 	.word	0x42700000
 8000758:	428c0000 	.word	0x428c0000
	        float angle = (i * 30 - 90) * 3.14159f / 180.0f;
 800075c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000760:	4613      	mov	r3, r2
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	3b5a      	subs	r3, #90	; 0x5a
 800076a:	ee07 3a90 	vmov	s15, r3
 800076e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000772:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800074c <main+0x1cc>
 8000776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077a:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8000750 <main+0x1d0>
 800077e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000782:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	        int x1 = cx + (int)(60 * cosf(angle));
 8000786:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 800078a:	f003 fe5f 	bl	800444c <cosf>
 800078e:	eeb0 7a40 	vmov.f32	s14, s0
 8000792:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8000754 <main+0x1d4>
 8000796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079e:	ee17 2a90 	vmov	r2, s15
 80007a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007a6:	4413      	add	r3, r2
 80007a8:	663b      	str	r3, [r7, #96]	; 0x60
	        int y1 = cy + (int)(60 * sinf(angle));
 80007aa:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007ae:	f003 fe8d 	bl	80044cc <sinf>
 80007b2:	eeb0 7a40 	vmov.f32	s14, s0
 80007b6:	ed5f 7a19 	vldr	s15, [pc, #-100]	; 8000754 <main+0x1d4>
 80007ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007ca:	4413      	add	r3, r2
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c
	        int x2 = cx + (int)(70 * cosf(angle));
 80007ce:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007d2:	f003 fe3b 	bl	800444c <cosf>
 80007d6:	eeb0 7a40 	vmov.f32	s14, s0
 80007da:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 8000758 <main+0x1d8>
 80007de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e6:	ee17 2a90 	vmov	r2, s15
 80007ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007ee:	4413      	add	r3, r2
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
	        int y2 = cy + (int)(70 * sinf(angle));
 80007f2:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 80007f6:	f003 fe69 	bl	80044cc <sinf>
 80007fa:	eeb0 7a40 	vmov.f32	s14, s0
 80007fe:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 8000758 <main+0x1d8>
 8000802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800080a:	ee17 2a90 	vmov	r2, s15
 800080e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000812:	4413      	add	r3, r2
 8000814:	657b      	str	r3, [r7, #84]	; 0x54
	        ST7789_DrawLine(x1, y1, x2, y2, ST7789_WHITE);
 8000816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000818:	b218      	sxth	r0, r3
 800081a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800081c:	b219      	sxth	r1, r3
 800081e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000820:	b21a      	sxth	r2, r3
 8000822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000824:	b21c      	sxth	r4, r3
 8000826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4623      	mov	r3, r4
 800082e:	f000 fe71 	bl	8001514 <ST7789_DrawLine>
	    for (int i = 0; i < 12; i++) {
 8000832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000836:	3301      	adds	r3, #1
 8000838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800083c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000840:	2b0b      	cmp	r3, #11
 8000842:	dd8b      	ble.n	800075c <main+0x1dc>
	    }

	    // Vẽ kim giờ
	    float angle_h = ((hour % 12) + minute / 60.0f) * 30.0f - 90.0f;
 8000844:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000848:	4bb6      	ldr	r3, [pc, #728]	; (8000b24 <main+0x5a4>)
 800084a:	fb83 1302 	smull	r1, r3, r3, r2
 800084e:	1059      	asrs	r1, r3, #1
 8000850:	17d3      	asrs	r3, r2, #31
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	460b      	mov	r3, r1
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	440b      	add	r3, r1
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	1ad1      	subs	r1, r2, r3
 800085e:	ee07 1a90 	vmov	s15, r1
 8000862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000872:	ed9f 6aad 	vldr	s12, [pc, #692]	; 8000b28 <main+0x5a8>
 8000876:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800087a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000886:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000b2c <main+0x5ac>
 800088a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800088e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	    angle_h = angle_h * 3.14159f / 180.0f;
 8000892:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000896:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000b30 <main+0x5b0>
 800089a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800089e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8000b34 <main+0x5b4>
 80008a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008a6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	    int hx = cx + (int)(40 * cosf(angle_h));
 80008aa:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80008ae:	f003 fdcd 	bl	800444c <cosf>
 80008b2:	eeb0 7a40 	vmov.f32	s14, s0
 80008b6:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8000b38 <main+0x5b8>
 80008ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008ca:	4413      	add	r3, r2
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	    int hy = cy + (int)(40 * sinf(angle_h));
 80008d0:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80008d4:	f003 fdfa 	bl	80044cc <sinf>
 80008d8:	eeb0 7a40 	vmov.f32	s14, s0
 80008dc:	eddf 7a96 	vldr	s15, [pc, #600]	; 8000b38 <main+0x5b8>
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e8:	ee17 2a90 	vmov	r2, s15
 80008ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008f0:	4413      	add	r3, r2
 80008f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	    ST7789_DrawLine(cx, cy, hx, hy, RGB565(255, 0, 0));
 80008f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008fa:	b218      	sxth	r0, r3
 80008fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000900:	b219      	sxth	r1, r3
 8000902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000906:	b21a      	sxth	r2, r3
 8000908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800090c:	b21c      	sxth	r4, r3
 800090e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4623      	mov	r3, r4
 8000916:	f000 fdfd 	bl	8001514 <ST7789_DrawLine>

	    // Vẽ kim phút
	    float angle_m = (minute + second / 60.0f) * 6.0f - 90.0f;
 800091a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800091e:	ee07 3a90 	vmov	s15, r3
 8000922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000932:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8000b28 <main+0x5a8>
 8000936:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800093a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800093e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000946:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000b2c <main+0x5ac>
 800094a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800094e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	    angle_m = angle_m * 3.14159f / 180.0f;
 8000952:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000956:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000b30 <main+0x5b0>
 800095a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800095e:	eddf 6a75 	vldr	s13, [pc, #468]	; 8000b34 <main+0x5b4>
 8000962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000966:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	    int mx = cx + (int)(55 * cosf(angle_m));
 800096a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800096e:	f003 fd6d 	bl	800444c <cosf>
 8000972:	eeb0 7a40 	vmov.f32	s14, s0
 8000976:	eddf 7a71 	vldr	s15, [pc, #452]	; 8000b3c <main+0x5bc>
 800097a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000982:	ee17 2a90 	vmov	r2, s15
 8000986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800098a:	4413      	add	r3, r2
 800098c:	67bb      	str	r3, [r7, #120]	; 0x78
	    int my = cy + (int)(55 * sinf(angle_m));
 800098e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000992:	f003 fd9b 	bl	80044cc <sinf>
 8000996:	eeb0 7a40 	vmov.f32	s14, s0
 800099a:	eddf 7a68 	vldr	s15, [pc, #416]	; 8000b3c <main+0x5bc>
 800099e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a6:	ee17 2a90 	vmov	r2, s15
 80009aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009ae:	4413      	add	r3, r2
 80009b0:	677b      	str	r3, [r7, #116]	; 0x74
	    ST7789_DrawLine(cx, cy, mx, my, RGB565(0, 255, 0));
 80009b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009b6:	b218      	sxth	r0, r3
 80009b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009bc:	b219      	sxth	r1, r3
 80009be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009c4:	b21c      	sxth	r4, r3
 80009c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4623      	mov	r3, r4
 80009ce:	f000 fda1 	bl	8001514 <ST7789_DrawLine>

	    // Vẽ kim giây
	    float angle_s = second * 6.0f - 90.0f;
 80009d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009de:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80009e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000b2c <main+0x5ac>
 80009ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009ee:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	    angle_s = angle_s * 3.14159f / 180.0f;
 80009f2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80009f6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000b30 <main+0x5b0>
 80009fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009fe:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000b34 <main+0x5b4>
 8000a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a06:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	    int sx = cx + (int)(65 * cosf(angle_s));
 8000a0a:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000a0e:	f003 fd1d 	bl	800444c <cosf>
 8000a12:	eeb0 7a40 	vmov.f32	s14, s0
 8000a16:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8000b40 <main+0x5c0>
 8000a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a22:	ee17 2a90 	vmov	r2, s15
 8000a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a2a:	4413      	add	r3, r2
 8000a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
	    int sy = cy + (int)(65 * sinf(angle_s));
 8000a2e:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000a32:	f003 fd4b 	bl	80044cc <sinf>
 8000a36:	eeb0 7a40 	vmov.f32	s14, s0
 8000a3a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8000b40 <main+0x5c0>
 8000a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a4e:	4413      	add	r3, r2
 8000a50:	66bb      	str	r3, [r7, #104]	; 0x68
	    ST7789_DrawLine(cx, cy, sx, sy, RGB565(0, 200, 255));
 8000a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a56:	b218      	sxth	r0, r3
 8000a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a5c:	b219      	sxth	r1, r3
 8000a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a64:	b21c      	sxth	r4, r3
 8000a66:	f240 635f 	movw	r3, #1631	; 0x65f
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	4623      	mov	r3, r4
 8000a6e:	f000 fd51 	bl	8001514 <ST7789_DrawLine>

	    // Vẽ tâm đồng hồ
	    ST7789_DrawCircleFilled(cx, cy, 4, ST7789_WHITE);
 8000a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a76:	b218      	sxth	r0, r3
 8000a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a7c:	b219      	sxth	r1, r3
 8000a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a82:	2204      	movs	r2, #4
 8000a84:	f000 fdf6 	bl	8001674 <ST7789_DrawCircleFilled>

	    // Xóa số cũ (vẽ đè bằng màu nền)
	    ST7789_DrawRectangleFilled(70, 210, 170, 230, RGB565(30,30,30));
 8000a88:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	23e6      	movs	r3, #230	; 0xe6
 8000a90:	22aa      	movs	r2, #170	; 0xaa
 8000a92:	21d2      	movs	r1, #210	; 0xd2
 8000a94:	2046      	movs	r0, #70	; 0x46
 8000a96:	f000 fc74 	bl	8001382 <ST7789_DrawRectangleFilled>
	    // Hiển thị số giờ/phút/giây dạng số ở dưới
	    char timeStr[16];
	    sprintf(timeStr, "%02d:%02d:%02d", hour, minute, second);
 8000a9a:	1d38      	adds	r0, r7, #4
 8000a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000aa6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000aaa:	4926      	ldr	r1, [pc, #152]	; (8000b44 <main+0x5c4>)
 8000aac:	f003 f8d2 	bl	8003c54 <siprintf>
	    ST7789_print(70, 210, ST7789_CYAN, RGB565(30,30,30), 1, &Font_11x18, 1, timeStr);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	9303      	str	r3, [sp, #12]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <main+0x5c8>)
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	f641 03e3 	movw	r3, #6371	; 0x18e3
 8000ac4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ac8:	21d2      	movs	r1, #210	; 0xd2
 8000aca:	2046      	movs	r0, #70	; 0x46
 8000acc:	f000 fff2 	bl	8001ab4 <ST7789_print>

	    // Tăng thời gian (giả lập, nếu không có RTC)
	    HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f001 faed 	bl	80020b0 <HAL_Delay>
	    second++;
 8000ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ada:	3301      	adds	r3, #1
 8000adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    if (second >= 60) { second = 0; minute++; }
 8000ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ae4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ae6:	dd07      	ble.n	8000af8 <main+0x578>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000af2:	3301      	adds	r3, #1
 8000af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	    if (minute >= 60) { minute = 0; hour++; }
 8000af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000afc:	2b3b      	cmp	r3, #59	; 0x3b
 8000afe:	dd07      	ble.n	8000b10 <main+0x590>
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	    if (hour >= 24)   { hour = 0; }
 8000b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b14:	2b17      	cmp	r3, #23
 8000b16:	f77f adec 	ble.w	80006f2 <main+0x172>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	while (1) {
 8000b20:	e5e7      	b.n	80006f2 <main+0x172>
 8000b22:	bf00      	nop
 8000b24:	2aaaaaab 	.word	0x2aaaaaab
 8000b28:	42700000 	.word	0x42700000
 8000b2c:	42b40000 	.word	0x42b40000
 8000b30:	40490fd0 	.word	0x40490fd0
 8000b34:	43340000 	.word	0x43340000
 8000b38:	42200000 	.word	0x42200000
 8000b3c:	425c0000 	.word	0x425c0000
 8000b40:	42820000 	.word	0x42820000
 8000b44:	08004f7c 	.word	0x08004f7c
 8000b48:	20000000 	.word	0x20000000

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	; 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 f871 	bl	8003c42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <SystemClock_Config+0xb4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <SystemClock_Config+0xb4>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <SystemClock_Config+0xb4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <SystemClock_Config+0xb8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <SystemClock_Config+0xb8>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <SystemClock_Config+0xb8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fd2f 	bl	8002620 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bc8:	f000 f8dc 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 ff8a 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bf2:	f000 f8c7 	bl	8000d84 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	; 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000

08000c08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_SPI2_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_SPI2_Init+0x64>)
 8000c5a:	f002 f93b 	bl	8002ed4 <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c64:	f000 f88e 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000015c 	.word	0x2000015c
 8000c70:	40003800 	.word	0x40003800

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_GPIO_Init+0xe0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	21c0      	movs	r1, #192	; 0xc0
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <MX_GPIO_Init+0xe4>)
 8000d00:	f001 fc74 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000d0c:	f001 fc6e 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d10:	23c0      	movs	r3, #192	; 0xc0
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_GPIO_Init+0xe4>)
 8000d28:	f001 fac6 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_GPIO_Init+0xe8>)
 8000d46:	f001 fab7 	bl	80022b8 <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d72:	f001 f97d 	bl	8002070 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40001400 	.word	0x40001400

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <Error_Handler+0x6>

08000d8c <ST7789_Init>:


//==============================================================================
// Процедура инициализации дисплея
//==============================================================================
void ST7789_Init(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

	// Задержка после подачи питания
	// если при старте не всегда запускаеться дисплей увеличиваем время задержки
	HAL_Delay(200);
 8000d90:	20c8      	movs	r0, #200	; 0xc8
 8000d92:	f001 f98d 	bl	80020b0 <HAL_Delay>

	ST7789_Width = ST7789_WIDTH;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <ST7789_Init+0x2c>)
 8000d98:	22f0      	movs	r2, #240	; 0xf0
 8000d9a:	801a      	strh	r2, [r3, #0]
	ST7789_Height = ST7789_HEIGHT;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <ST7789_Init+0x30>)
 8000d9e:	22f0      	movs	r2, #240	; 0xf0
 8000da0:	801a      	strh	r2, [r3, #0]

  ST7789_Select();
 8000da2:	f000 f80f 	bl	8000dc4 <ST7789_Select>

  ST7789_HardReset();
 8000da6:	f000 f8b7 	bl	8000f18 <ST7789_HardReset>
  ST7789_ExecuteCommandList(init_cmds);
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <ST7789_Init+0x34>)
 8000dac:	f000 f818 	bl	8000de0 <ST7789_ExecuteCommandList>

  ST7789_Unselect();
 8000db0:	f000 f80f 	bl	8000dd2 <ST7789_Unselect>

#if FRAME_BUFFER
	ST7789_ClearFrameBuffer();
#endif

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000098 	.word	0x20000098
 8000dbc:	2000009a 	.word	0x2000009a
 8000dc0:	0802292c 	.word	0x0802292c

08000dc4 <ST7789_Select>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void ST7789_Select(void) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
				CS_GPIO_Port->BSRR = ( CS_Pin << 16 );
			#endif
			//-----------------------------------------------------
	#endif

}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <ST7789_Unselect>:


//==============================================================================
// Процедура управления SPI
//==============================================================================
static void ST7789_Unselect(void) {
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
			#endif
			//-----------------------------------------------------

	#endif

}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <ST7789_ExecuteCommandList>:


//==============================================================================
// Процедура отправки данных для инициализации дисплея
//==============================================================================
static void ST7789_ExecuteCommandList(const uint8_t *addr) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000df2:	e034      	b.n	8000e5e <ST7789_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	72fb      	strb	r3, [r7, #11]
        ST7789_SendCmd(cmd);
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f89d 	bl	8000f40 <ST7789_SendCmd>

        numArgs = *addr++;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	1c5a      	adds	r2, r3, #1
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000e10:	7abb      	ldrb	r3, [r7, #10]
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e18:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000e1a:	7abb      	ldrb	r3, [r7, #10]
 8000e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e20:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000e22:	7abb      	ldrb	r3, [r7, #10]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d008      	beq.n	8000e3a <ST7789_ExecuteCommandList+0x5a>
            ST7789_SendDataMASS((uint8_t*)addr, numArgs);
 8000e28:	7abb      	ldrb	r3, [r7, #10]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f8c7 	bl	8000fc0 <ST7789_SendDataMASS>
            addr += numArgs;
 8000e32:	7abb      	ldrb	r3, [r7, #10]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00e      	beq.n	8000e5e <ST7789_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d102      	bne.n	8000e56 <ST7789_ExecuteCommandList+0x76>
 8000e50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e54:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000e56:	89bb      	ldrh	r3, [r7, #12]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 f929 	bl	80020b0 <HAL_Delay>
    while(numCommands--) {
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	73fa      	strb	r2, [r7, #15]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1c5      	bne.n	8000df4 <ST7789_ExecuteCommandList+0x14>
        }
    }
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <ST7789_DrawImage>:


//==============================================================================
// Процедура вывода цветного изображения на дисплей
//==============================================================================
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4604      	mov	r4, r0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4623      	mov	r3, r4
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	4603      	mov	r3, r0
 8000e84:	80bb      	strh	r3, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	807b      	strh	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	803b      	strh	r3, [r7, #0]

    if((x >= ST7789_Width) || (y >= ST7789_Height)){
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <ST7789_DrawImage+0xa0>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d233      	bcs.n	8000f00 <ST7789_DrawImage+0x90>
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <ST7789_DrawImage+0xa4>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	88ba      	ldrh	r2, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d22e      	bcs.n	8000f00 <ST7789_DrawImage+0x90>
		return;
	}

    if((x + w - 1) >= ST7789_Width){
 8000ea2:	88fa      	ldrh	r2, [r7, #6]
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <ST7789_DrawImage+0xa0>)
 8000eac:	8812      	ldrh	r2, [r2, #0]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	da28      	bge.n	8000f04 <ST7789_DrawImage+0x94>
		return;
	}

    if((y + h - 1) >= ST7789_Height){
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	883b      	ldrh	r3, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <ST7789_DrawImage+0xa4>)
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	da22      	bge.n	8000f08 <ST7789_DrawImage+0x98>
				buff_frame[( y + i ) * ST7789_Width + x + j] = *data;
				data++;
			}
		}
#else	//если попиксельный вывод
    ST7789_SetWindow(x, y, x+w-1, y+h-1);
 8000ec2:	88fa      	ldrh	r2, [r7, #6]
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29c      	uxth	r4, r3
 8000ece:	88ba      	ldrh	r2, [r7, #4]
 8000ed0:	883b      	ldrh	r3, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	88b9      	ldrh	r1, [r7, #4]
 8000edc:	88f8      	ldrh	r0, [r7, #6]
 8000ede:	4622      	mov	r2, r4
 8000ee0:	f000 f924 	bl	800112c <ST7789_SetWindow>

		ST7789_Select();
 8000ee4:	f7ff ff6e 	bl	8000dc4 <ST7789_Select>

    ST7789_SendDataMASS((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	883a      	ldrh	r2, [r7, #0]
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	69b8      	ldr	r0, [r7, #24]
 8000ef6:	f000 f863 	bl	8000fc0 <ST7789_SendDataMASS>

    ST7789_Unselect();
 8000efa:	f7ff ff6a 	bl	8000dd2 <ST7789_Unselect>
 8000efe:	e004      	b.n	8000f0a <ST7789_DrawImage+0x9a>
		return;
 8000f00:	bf00      	nop
 8000f02:	e002      	b.n	8000f0a <ST7789_DrawImage+0x9a>
		return;
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <ST7789_DrawImage+0x9a>
		return;
 8000f08:	bf00      	nop
#endif
}
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}
 8000f10:	20000098 	.word	0x20000098
 8000f14:	2000009a 	.word	0x2000009a

08000f18 <ST7789_HardReset>:


//==============================================================================
// Процедура аппаратного сброса дисплея (ножкой RESET)
//==============================================================================
void ST7789_HardReset(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <ST7789_HardReset+0x24>)
 8000f22:	f001 fb63 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f26:	2014      	movs	r0, #20
 8000f28:	f001 f8c2 	bl	80020b0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <ST7789_HardReset+0x24>)
 8000f32:	f001 fb5b 	bl	80025ec <HAL_GPIO_WritePin>

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000

08000f40 <ST7789_SendCmd>:


//==============================================================================
// Процедура отправки команды в дисплей
//==============================================================================
__inline static void ST7789_SendCmd(uint8_t Cmd){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		 // pin DC LOW
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <ST7789_SendCmd+0x44>)
 8000f50:	f001 fb4c 	bl	80025ec <HAL_GPIO_WritePin>

		 HAL_SPI_Transmit(&ST7789_SPI_HAL, &Cmd, 1, HAL_MAX_DELAY);
 8000f54:	1df9      	adds	r1, r7, #7
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <ST7789_SendCmd+0x48>)
 8000f5e:	f002 f81d 	bl	8002f9c <HAL_SPI_Transmit>
		 while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8000f62:	bf00      	nop
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <ST7789_SendCmd+0x48>)
 8000f66:	f002 f94d 	bl	8003204 <HAL_SPI_GetState>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1f9      	bne.n	8000f64 <ST7789_SendCmd+0x24>

		 // pin DC HIGH
		 HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <ST7789_SendCmd+0x44>)
 8000f76:	f001 fb39 	bl	80025ec <HAL_GPIO_WritePin>
		DC_GPIO_Port->BSRR = DC_Pin;

	#endif
	//-----------------------------------------------------------------------------------

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020000 	.word	0x40020000
 8000f88:	2000015c 	.word	0x2000015c

08000f8c <ST7789_SendData>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей 1 BYTE
//==============================================================================
__inline static void ST7789_SendData(uint8_t Data ){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		HAL_SPI_Transmit(&ST7789_SPI_HAL, &Data, 1, HAL_MAX_DELAY);
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <ST7789_SendData+0x30>)
 8000fa0:	f001 fffc 	bl	8002f9c <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8000fa4:	bf00      	nop
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <ST7789_SendData+0x30>)
 8000fa8:	f002 f92c 	bl	8003204 <HAL_SPI_GetState>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d1f9      	bne.n	8000fa6 <ST7789_SendData+0x1a>
*/		//================================================================================

	#endif
	//-----------------------------------------------------------------------------------

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000015c 	.word	0x2000015c

08000fc0 <ST7789_SendDataMASS>:


//==============================================================================
// Процедура отправки данных (параметров) в дисплей MASS
//==============================================================================
__inline static void ST7789_SendDataMASS(uint8_t* buff, size_t buff_size){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]

	//-- если захотим переделать под HAL ------------------
	#ifdef ST7789_SPI_HAL

		if( buff_size <= 0xFFFF ){
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d21a      	bcs.n	8001008 <ST7789_SendDataMASS+0x48>
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4816      	ldr	r0, [pc, #88]	; (8001038 <ST7789_SendDataMASS+0x78>)
 8000fde:	f001 ffdd 	bl	8002f9c <HAL_SPI_Transmit>
 8000fe2:	e01d      	b.n	8001020 <ST7789_SendDataMASS+0x60>
		}
		else{
			while( buff_size > 0xFFFF ){
				HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, 0xFFFF, HAL_MAX_DELAY);
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <ST7789_SendDataMASS+0x78>)
 8000ff0:	f001 ffd4 	bl	8002f9c <HAL_SPI_Transmit>
				buff_size-=0xFFFF;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000ffa:	3bff      	subs	r3, #255	; 0xff
 8000ffc:	603b      	str	r3, [r7, #0]
				buff+=0xFFFF;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001004:	33ff      	adds	r3, #255	; 0xff
 8001006:	607b      	str	r3, [r7, #4]
			while( buff_size > 0xFFFF ){
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d2e9      	bcs.n	8000fe4 <ST7789_SendDataMASS+0x24>
			}
			HAL_SPI_Transmit(&ST7789_SPI_HAL, buff, buff_size, HAL_MAX_DELAY);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b29a      	uxth	r2, r3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <ST7789_SendDataMASS+0x78>)
 800101c:	f001 ffbe 	bl	8002f9c <HAL_SPI_Transmit>
		}

		while(HAL_SPI_GetState(&ST7789_SPI_HAL) != HAL_SPI_STATE_READY){};
 8001020:	bf00      	nop
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <ST7789_SendDataMASS+0x78>)
 8001024:	f002 f8ee 	bl	8003204 <HAL_SPI_GetState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d1f9      	bne.n	8001022 <ST7789_SendDataMASS+0x62>
*/		//================================================================================

	#endif
	//-----------------------------------------------------------------------------------

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000015c 	.word	0x2000015c

0800103c <ST7789_FillScreen>:


//==============================================================================
// Процедура закрашивает экран цветом color
//==============================================================================
void ST7789_FillScreen(uint16_t color){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]

  ST7789_FillRect(0, 0,  ST7789_Width, ST7789_Height, color);
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <ST7789_FillScreen+0x2c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <ST7789_FillScreen+0x30>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	b219      	sxth	r1, r3
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	460b      	mov	r3, r1
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <ST7789_FillRect>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000098 	.word	0x20000098
 800106c:	2000009a 	.word	0x2000009a

08001070 <ST7789_FillRect>:


//==============================================================================
// Процедура заполнения прямоугольника цветом color
//==============================================================================
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color){
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4623      	mov	r3, r4
 8001080:	80fb      	strh	r3, [r7, #6]
 8001082:	4603      	mov	r3, r0
 8001084:	80bb      	strh	r3, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	807b      	strh	r3, [r7, #2]
 800108a:	4613      	mov	r3, r2
 800108c:	803b      	strh	r3, [r7, #0]

  if ((x >= ST7789_Width) || (y >= ST7789_Height)){
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <ST7789_FillRect+0xb4>)
 8001094:	8812      	ldrh	r2, [r2, #0]
 8001096:	4293      	cmp	r3, r2
 8001098:	da40      	bge.n	800111c <ST7789_FillRect+0xac>
 800109a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <ST7789_FillRect+0xb8>)
 80010a0:	8812      	ldrh	r2, [r2, #0]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	da3a      	bge.n	800111c <ST7789_FillRect+0xac>
	  return;
  }

  if ((x + w) > ST7789_Width){
 80010a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <ST7789_FillRect+0xb4>)
 80010b2:	8812      	ldrh	r2, [r2, #0]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	dd05      	ble.n	80010c4 <ST7789_FillRect+0x54>
	  w = ST7789_Width - x;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <ST7789_FillRect+0xb4>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	807b      	strh	r3, [r7, #2]
  }

  if ((y + h) > ST7789_Height){
 80010c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a16      	ldr	r2, [pc, #88]	; (8001128 <ST7789_FillRect+0xb8>)
 80010d0:	8812      	ldrh	r2, [r2, #0]
 80010d2:	4293      	cmp	r3, r2
 80010d4:	dd05      	ble.n	80010e2 <ST7789_FillRect+0x72>
	  h = ST7789_Height - y;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <ST7789_FillRect+0xb8>)
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	803b      	strh	r3, [r7, #0]
				buff_frame[( y + i ) * ST7789_Width + x + j] = ((color & 0xFF)<<8) | (color >> 8 );
			}
		}
	}
#else	//если попиксельный вывод
  ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 80010e2:	88f8      	ldrh	r0, [r7, #6]
 80010e4:	88b9      	ldrh	r1, [r7, #4]
 80010e6:	88fa      	ldrh	r2, [r7, #6]
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29c      	uxth	r4, r3
 80010f2:	88ba      	ldrh	r2, [r7, #4]
 80010f4:	883b      	ldrh	r3, [r7, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4622      	mov	r2, r4
 8001100:	f000 f814 	bl	800112c <ST7789_SetWindow>

  ST7789_RamWrite(&color, (h * w));
 8001104:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001108:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	4619      	mov	r1, r3
 8001112:	f107 0018 	add.w	r0, r7, #24
 8001116:	f000 f82f 	bl	8001178 <ST7789_RamWrite>
 800111a:	e000      	b.n	800111e <ST7789_FillRect+0xae>
	  return;
 800111c:	bf00      	nop
#endif
}
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	20000098 	.word	0x20000098
 8001128:	2000009a 	.word	0x2000009a

0800112c <ST7789_SetWindow>:


//==============================================================================
// Процедура установка границ экрана для заполнения
//==============================================================================
static void ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4623      	mov	r3, r4
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	4603      	mov	r3, r0
 8001140:	80bb      	strh	r3, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]
 8001146:	4613      	mov	r3, r2
 8001148:	803b      	strh	r3, [r7, #0]

	ST7789_Select();
 800114a:	f7ff fe3b 	bl	8000dc4 <ST7789_Select>

	ST7789_ColumnSet(x0, x1);
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f833 	bl	80011c0 <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 800115a:	883a      	ldrh	r2, [r7, #0]
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f86f 	bl	8001244 <ST7789_RowSet>

	// write to RAM
	ST7789_SendCmd(ST7789_RAMWR);
 8001166:	202c      	movs	r0, #44	; 0x2c
 8001168:	f7ff feea 	bl	8000f40 <ST7789_SendCmd>

	ST7789_Unselect();
 800116c:	f7ff fe31 	bl	8000dd2 <ST7789_Unselect>

}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}

08001178 <ST7789_RamWrite>:


//==============================================================================
// Процедура записи данных в дисплей
//==============================================================================
static void ST7789_RamWrite(uint16_t *pBuff, uint32_t Len){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]

  ST7789_Select();
 8001182:	f7ff fe1f 	bl	8000dc4 <ST7789_Select>

  uint8_t buff[2];
  buff[0] = *pBuff >> 8;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	733b      	strb	r3, [r7, #12]
  buff[1] = *pBuff & 0xFF;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	737b      	strb	r3, [r7, #13]

  while (Len--){
 800119a:	e005      	b.n	80011a8 <ST7789_RamWrite+0x30>
	  ST7789_SendDataMASS( buff, 2);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff0c 	bl	8000fc0 <ST7789_SendDataMASS>
  while (Len--){
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	603a      	str	r2, [r7, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f4      	bne.n	800119c <ST7789_RamWrite+0x24>
  }

  ST7789_Unselect();
 80011b2:	f7ff fe0e 	bl	8000dd2 <ST7789_Unselect>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ST7789_ColumnSet>:


//==============================================================================
// Процедура установки начального и конечного адресов колонок
//==============================================================================
static void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]

  if (ColumnStart > ColumnEnd){
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d82a      	bhi.n	800122e <ST7789_ColumnSet+0x6e>
    return;
  }

  if (ColumnEnd > ST7789_Width){
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <ST7789_ColumnSet+0x7c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d827      	bhi.n	8001232 <ST7789_ColumnSet+0x72>
    return;
  }

  ColumnStart += ST7789_X_Start;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <ST7789_ColumnSet+0x80>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	4413      	add	r3, r2
 80011ea:	80fb      	strh	r3, [r7, #6]
  ColumnEnd += ST7789_X_Start;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <ST7789_ColumnSet+0x80>)
 80011ee:	881a      	ldrh	r2, [r3, #0]
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]

  ST7789_SendCmd(ST7789_CASET);
 80011f6:	202a      	movs	r0, #42	; 0x2a
 80011f8:	f7ff fea2 	bl	8000f40 <ST7789_SendCmd>
  ST7789_SendData(ColumnStart >> 8);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	b29b      	uxth	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fec1 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(ColumnStart & 0xFF);
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff febc 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(ColumnEnd >> 8);
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff feb5 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(ColumnEnd & 0xFF);
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff feb0 	bl	8000f8c <ST7789_SendData>
 800122c:	e002      	b.n	8001234 <ST7789_ColumnSet+0x74>
    return;
 800122e:	bf00      	nop
 8001230:	e000      	b.n	8001234 <ST7789_ColumnSet+0x74>
    return;
 8001232:	bf00      	nop

}
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000098 	.word	0x20000098
 8001240:	20000094 	.word	0x20000094

08001244 <ST7789_RowSet>:


//==============================================================================
// Процедура установки начального и конечного адресов строк
//==============================================================================
static void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]

  if (RowStart > RowEnd){
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	88bb      	ldrh	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	d82a      	bhi.n	80012b2 <ST7789_RowSet+0x6e>
    return;
  }

  if (RowEnd > ST7789_Height){
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <ST7789_RowSet+0x7c>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	d827      	bhi.n	80012b6 <ST7789_RowSet+0x72>
    return;
  }

  RowStart += ST7789_Y_Start;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <ST7789_RowSet+0x80>)
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4413      	add	r3, r2
 800126e:	80fb      	strh	r3, [r7, #6]
  RowEnd += ST7789_Y_Start;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <ST7789_RowSet+0x80>)
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	80bb      	strh	r3, [r7, #4]

  ST7789_SendCmd(ST7789_RASET);
 800127a:	202b      	movs	r0, #43	; 0x2b
 800127c:	f7ff fe60 	bl	8000f40 <ST7789_SendCmd>
  ST7789_SendData(RowStart >> 8);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe7f 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(RowStart & 0xFF);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe7a 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(RowEnd >> 8);
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe73 	bl	8000f8c <ST7789_SendData>
  ST7789_SendData(RowEnd & 0xFF);
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe6e 	bl	8000f8c <ST7789_SendData>
 80012b0:	e002      	b.n	80012b8 <ST7789_RowSet+0x74>
    return;
 80012b2:	bf00      	nop
 80012b4:	e000      	b.n	80012b8 <ST7789_RowSet+0x74>
    return;
 80012b6:	bf00      	nop

}
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000009a 	.word	0x2000009a
 80012c4:	20000096 	.word	0x20000096

080012c8 <ST7789_DrawRectangle>:


//==============================================================================
// Процедура рисования прямоугольника ( пустотелый )
//==============================================================================
void ST7789_DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	4603      	mov	r3, r0
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	803b      	strh	r3, [r7, #0]

  ST7789_DrawLine(x1, y1, x1, y2, color);
 80012e6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80012ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80012f6:	8b3b      	ldrh	r3, [r7, #24]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4623      	mov	r3, r4
 80012fc:	f000 f90a 	bl	8001514 <ST7789_DrawLine>
  ST7789_DrawLine(x2, y1, x2, y2, color);
 8001300:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001304:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001308:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800130c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001310:	8b3b      	ldrh	r3, [r7, #24]
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	4623      	mov	r3, r4
 8001316:	f000 f8fd 	bl	8001514 <ST7789_DrawLine>
  ST7789_DrawLine(x1, y1, x2, y1, color);
 800131a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800131e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001322:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001326:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800132a:	8b3b      	ldrh	r3, [r7, #24]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4623      	mov	r3, r4
 8001330:	f000 f8f0 	bl	8001514 <ST7789_DrawLine>
  ST7789_DrawLine(x1, y2, x2, y2, color);
 8001334:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001338:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800133c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001340:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001344:	8b3b      	ldrh	r3, [r7, #24]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	4623      	mov	r3, r4
 800134a:	f000 f8e3 	bl	8001514 <ST7789_DrawLine>

}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}

08001356 <SwapInt16Values>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования прямоугольника ( заполненый )
//==============================================================================
static void SwapInt16Values(int16_t *pValue1, int16_t *pValue2){
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]

  int16_t TempValue = *pValue1;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	81fb      	strh	r3, [r7, #14]
  *pValue1 = *pValue2;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	801a      	strh	r2, [r3, #0]
  *pValue2 = TempValue;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	801a      	strh	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <ST7789_DrawRectangleFilled>:


//==============================================================================
// Процедура рисования прямоугольника ( заполненый )
//==============================================================================
void ST7789_DrawRectangleFilled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t fillcolor) {
 8001382:	b590      	push	{r4, r7, lr}
 8001384:	b085      	sub	sp, #20
 8001386:	af02      	add	r7, sp, #8
 8001388:	4604      	mov	r4, r0
 800138a:	4608      	mov	r0, r1
 800138c:	4611      	mov	r1, r2
 800138e:	461a      	mov	r2, r3
 8001390:	4623      	mov	r3, r4
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	4603      	mov	r3, r0
 8001396:	80bb      	strh	r3, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	803b      	strh	r3, [r7, #0]

  if (x1 > x2){
 80013a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dd05      	ble.n	80013b8 <ST7789_DrawRectangleFilled+0x36>
    SwapInt16Values(&x1, &x2);
 80013ac:	1cba      	adds	r2, r7, #2
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffcf 	bl	8001356 <SwapInt16Values>
  }

  if (y1 > y2){
 80013b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dd05      	ble.n	80013d0 <ST7789_DrawRectangleFilled+0x4e>
    SwapInt16Values(&y1, &y2);
 80013c4:	463a      	mov	r2, r7
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffc3 	bl	8001356 <SwapInt16Values>
  }

  ST7789_FillRect(x1, y1, x2 - x1, y2 - y1, fillcolor);
 80013d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21c      	sxth	r4, r3
 80013ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	8b3b      	ldrh	r3, [r7, #24]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4613      	mov	r3, r2
 8001402:	4622      	mov	r2, r4
 8001404:	f7ff fe34 	bl	8001070 <ST7789_FillRect>
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}

08001410 <ST7789_DrawLine_Slow>:


//==============================================================================
// Процедура вспомогательная для --- Процедура рисования линии
//==============================================================================
static void ST7789_DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	4603      	mov	r3, r0
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]
 800142a:	4613      	mov	r3, r2
 800142c:	803b      	strh	r3, [r7, #0]

  const int16_t deltaX = abs(x2 - x1);
 800142e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	bfb8      	it	lt
 800143c:	425b      	neglt	r3, r3
 800143e:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8001440:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001444:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	bfb8      	it	lt
 800144e:	425b      	neglt	r3, r3
 8001450:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8001452:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001456:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800145a:	429a      	cmp	r2, r3
 800145c:	da01      	bge.n	8001462 <ST7789_DrawLine_Slow+0x52>
 800145e:	2301      	movs	r3, #1
 8001460:	e001      	b.n	8001466 <ST7789_DrawLine_Slow+0x56>
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 8001468:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800146c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001470:	429a      	cmp	r2, r3
 8001472:	da01      	bge.n	8001478 <ST7789_DrawLine_Slow+0x68>
 8001474:	2301      	movs	r3, #1
 8001476:	e001      	b.n	800147c <ST7789_DrawLine_Slow+0x6c>
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
 800147c:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 800147e:	8aba      	ldrh	r2, [r7, #20]
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	82fb      	strh	r3, [r7, #22]

  ST7789_DrawPixel(x2, y2, color);
 8001488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800148a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800148e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f8bc 	bl	8001610 <ST7789_DrawPixel>

  while (x1 != x2 || y1 != y2) {
 8001498:	e02c      	b.n	80014f4 <ST7789_DrawLine_Slow+0xe4>

    ST7789_DrawPixel(x1, y1, color);
 800149a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800149c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8b3 	bl	8001610 <ST7789_DrawPixel>
    const int16_t error2 = error * 2;
 80014aa:	8afb      	ldrh	r3, [r7, #22]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]

    if (error2 > -deltaY) {
 80014b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014ba:	425b      	negs	r3, r3
 80014bc:	429a      	cmp	r2, r3
 80014be:	dd09      	ble.n	80014d4 <ST7789_DrawLine_Slow+0xc4>

      error -= deltaY;
 80014c0:	8afa      	ldrh	r2, [r7, #22]
 80014c2:	8a7b      	ldrh	r3, [r7, #18]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	8a3b      	ldrh	r3, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX){
 80014d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	da09      	bge.n	80014f4 <ST7789_DrawLine_Slow+0xe4>

      error += deltaX;
 80014e0:	8afa      	ldrh	r2, [r7, #22]
 80014e2:	8abb      	ldrh	r3, [r7, #20]
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80014ea:	88ba      	ldrh	r2, [r7, #4]
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	4413      	add	r3, r2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) {
 80014f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1cc      	bne.n	800149a <ST7789_DrawLine_Slow+0x8a>
 8001500:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001504:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001508:	429a      	cmp	r2, r3
 800150a:	d1c6      	bne.n	800149a <ST7789_DrawLine_Slow+0x8a>
    }
  }
}
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}

08001514 <ST7789_DrawLine>:


//==============================================================================
// Процедура рисования линии
//==============================================================================
void ST7789_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b085      	sub	sp, #20
 8001518:	af02      	add	r7, sp, #8
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4623      	mov	r3, r4
 8001524:	80fb      	strh	r3, [r7, #6]
 8001526:	4603      	mov	r3, r0
 8001528:	80bb      	strh	r3, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]
 800152e:	4613      	mov	r3, r2
 8001530:	803b      	strh	r3, [r7, #0]

  if (x1 == x2){
 8001532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800153a:	429a      	cmp	r2, r3
 800153c:	d129      	bne.n	8001592 <ST7789_DrawLine+0x7e>

    if (y1 > y2){
 800153e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001542:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001546:	429a      	cmp	r2, r3
 8001548:	dd11      	ble.n	800156e <ST7789_DrawLine+0x5a>
      ST7789_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	883b      	ldrh	r3, [r7, #0]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21a      	sxth	r2, r3
 8001558:	f9b7 1000 	ldrsh.w	r1, [r7]
 800155c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001560:	8b3b      	ldrh	r3, [r7, #24]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	2201      	movs	r2, #1
 8001568:	f7ff fd82 	bl	8001070 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
	}

    return;
 800156c:	e04c      	b.n	8001608 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 800156e:	883a      	ldrh	r2, [r7, #0]
 8001570:	88bb      	ldrh	r3, [r7, #4]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	b21a      	sxth	r2, r3
 800157c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001580:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001584:	8b3b      	ldrh	r3, [r7, #24]
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	2201      	movs	r2, #1
 800158c:	f7ff fd70 	bl	8001070 <ST7789_FillRect>
    return;
 8001590:	e03a      	b.n	8001608 <ST7789_DrawLine+0xf4>
  }

  if (y1 == y2){
 8001592:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001596:	f9b7 3000 	ldrsh.w	r3, [r7]
 800159a:	429a      	cmp	r2, r3
 800159c:	d127      	bne.n	80015ee <ST7789_DrawLine+0xda>

    if (x1 > x2){
 800159e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dd10      	ble.n	80015cc <ST7789_DrawLine+0xb8>
      ST7789_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015bc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80015c0:	8b3b      	ldrh	r3, [r7, #24]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	f7ff fd53 	bl	8001070 <ST7789_FillRect>
	}
    else{
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
	}

    return;
 80015ca:	e01d      	b.n	8001608 <ST7789_DrawLine+0xf4>
      ST7789_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 80015cc:	887a      	ldrh	r2, [r7, #2]
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015e2:	8b3b      	ldrh	r3, [r7, #24]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	f7ff fd42 	bl	8001070 <ST7789_FillRect>
    return;
 80015ec:	e00c      	b.n	8001608 <ST7789_DrawLine+0xf4>
  }

  ST7789_DrawLine_Slow(x1, y1, x2, y2, color);
 80015ee:	f9b7 4000 	ldrsh.w	r4, [r7]
 80015f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015fe:	8b3b      	ldrh	r3, [r7, #24]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4623      	mov	r3, r4
 8001604:	f7ff ff04 	bl	8001410 <ST7789_DrawLine_Slow>
}
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
	...

08001610 <ST7789_DrawPixel>:


//==============================================================================
// Процедура окрашивает 1 пиксель дисплея
//==============================================================================
void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
 800161a:	460b      	mov	r3, r1
 800161c:	80bb      	strh	r3, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	807b      	strh	r3, [r7, #2]

  if ((x < 0) ||(x >= ST7789_Width) || (y < 0) || (y >= ST7789_Height)){
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db1b      	blt.n	8001662 <ST7789_DrawPixel+0x52>
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <ST7789_DrawPixel+0x5c>)
 8001630:	8812      	ldrh	r2, [r2, #0]
 8001632:	4293      	cmp	r3, r2
 8001634:	da15      	bge.n	8001662 <ST7789_DrawPixel+0x52>
 8001636:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db11      	blt.n	8001662 <ST7789_DrawPixel+0x52>
 800163e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <ST7789_DrawPixel+0x60>)
 8001644:	8812      	ldrh	r2, [r2, #0]
 8001646:	4293      	cmp	r3, r2
 8001648:	da0b      	bge.n	8001662 <ST7789_DrawPixel+0x52>
  }

#if FRAME_BUFFER	// если включен буфер кадра
	buff_frame[y * ST7789_Width + x] = ((color & 0xFF)<<8) | (color >> 8 );
#else	//если попиксельный вывод
  ST7789_SetWindow(x, y, x, y);
 800164a:	88f8      	ldrh	r0, [r7, #6]
 800164c:	88b9      	ldrh	r1, [r7, #4]
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	f7ff fd6b 	bl	800112c <ST7789_SetWindow>
  ST7789_RamWrite(&color, 1);
 8001656:	1cbb      	adds	r3, r7, #2
 8001658:	2101      	movs	r1, #1
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd8c 	bl	8001178 <ST7789_RamWrite>
 8001660:	e000      	b.n	8001664 <ST7789_DrawPixel+0x54>
    return;
 8001662:	bf00      	nop
#endif
}
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000098 	.word	0x20000098
 8001670:	2000009a 	.word	0x2000009a

08001674 <ST7789_DrawCircleFilled>:


//==============================================================================
// Процедура рисования круг ( заполненый )
//==============================================================================
void ST7789_DrawCircleFilled(int16_t x0, int16_t y0, int16_t radius, uint16_t fillcolor) {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af02      	add	r7, sp, #8
 800167a:	4604      	mov	r4, r0
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	4603      	mov	r3, r0
 8001688:	80bb      	strh	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	803b      	strh	r3, [r7, #0]

  int x = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  int y = radius;
 8001696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800169a:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 800169c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	f1c3 0301 	rsb	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
  int error = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]

  while (y >= 0){
 80016ac:	e075      	b.n	800179a <ST7789_DrawCircleFilled+0x126>

    ST7789_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, fillcolor);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b218      	sxth	r0, r3
 80016ba:	88ba      	ldrh	r2, [r7, #4]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b219      	sxth	r1, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4413      	add	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	b21c      	sxth	r4, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	883b      	ldrh	r3, [r7, #0]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4613      	mov	r3, r2
 80016e4:	4622      	mov	r2, r4
 80016e6:	f7ff ff15 	bl	8001514 <ST7789_DrawLine>
    ST7789_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, fillcolor);
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b218      	sxth	r0, r3
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b219      	sxth	r1, r3
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	b29b      	uxth	r3, r3
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21c      	sxth	r4, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	b29a      	uxth	r2, r3
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	b21a      	sxth	r2, r3
 800171a:	883b      	ldrh	r3, [r7, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4613      	mov	r3, r2
 8001720:	4622      	mov	r2, r4
 8001722:	f7ff fef7 	bl	8001514 <ST7789_DrawLine>
    error = 2 * (delta + y) - 1;
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da0c      	bge.n	8001752 <ST7789_DrawCircleFilled+0xde>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc09      	bgt.n	8001752 <ST7789_DrawCircleFilled+0xde>

      ++x;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	3301      	adds	r3, #1
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
      continue;
 8001750:	e023      	b.n	800179a <ST7789_DrawCircleFilled+0x126>
    }

    error = 2 * (delta - x) - 1;
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]

    if (delta > 0 && error > 0) {
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd0d      	ble.n	8001780 <ST7789_DrawCircleFilled+0x10c>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dd0a      	ble.n	8001780 <ST7789_DrawCircleFilled+0x10c>

      --y;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3b01      	subs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	f1c3 0301 	rsb	r3, r3, #1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
      continue;
 800177e:	e00c      	b.n	800179a <ST7789_DrawCircleFilled+0x126>
    }

    ++x;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
    --y;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	3b01      	subs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
  while (y >= 0){
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da86      	bge.n	80016ae <ST7789_DrawCircleFilled+0x3a>
  }
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <ST7789_DrawChar>:


//==============================================================================
// Процедура рисования символа ( 1 буква или знак )
//==============================================================================
void ST7789_DrawChar(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, unsigned char ch){
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	80fb      	strh	r3, [r7, #6]
 80017ba:	4603      	mov	r3, r0
 80017bc:	80bb      	strh	r3, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	807b      	strh	r3, [r7, #2]
 80017c2:	4613      	mov	r3, r2
 80017c4:	803b      	strh	r3, [r7, #0]

	uint32_t i, b, j;

	uint32_t X = x, Y = y;
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

	uint8_t xx, yy;

	if( multiplier < 1 ){
 80017ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <ST7789_DrawChar+0x34>
		multiplier = 1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	}

	/* Check available space in LCD */
	if (ST7789_Width >= ( x + Font->FontWidth) || ST7789_Height >= ( y + Font->FontHeight)){
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <ST7789_DrawChar+0x278>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	4299      	cmp	r1, r3
 80017ec:	da09      	bge.n	8001802 <ST7789_DrawChar+0x5a>
 80017ee:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <ST7789_DrawChar+0x27c>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	88bb      	ldrh	r3, [r7, #4]
 80017f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f8:	7852      	ldrb	r2, [r2, #1]
 80017fa:	4413      	add	r3, r2
 80017fc:	4299      	cmp	r1, r3
 80017fe:	f2c0 8154 	blt.w	8001aaa <ST7789_DrawChar+0x302>


			/* Go through font */
			for (i = 0; i < Font->FontHeight; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e149      	b.n	8001a9c <ST7789_DrawChar+0x2f4>

				if( ch < 127 ){
 8001808:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800180c:	2b7e      	cmp	r3, #126	; 0x7e
 800180e:	d810      	bhi.n	8001832 <ST7789_DrawChar+0x8a>
					b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001818:	3b20      	subs	r3, #32
 800181a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800181c:	7849      	ldrb	r1, [r1, #1]
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4619      	mov	r1, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	440b      	add	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	e0b8      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch > 191 ){
 8001832:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001836:	2bbf      	cmp	r3, #191	; 0xbf
 8001838:	d910      	bls.n	800185c <ST7789_DrawChar+0xb4>
					// +96 это так как латинские символы и знаки в шрифтах занимают 96 позиций
					// и если в шрифте который содержит сперва латиницу и спец символы и потом
					// только кирилицу то нужно добавлять 95 если шрифт
					// содержит только кирилицу то +96 не нужно
					b = Font->data[((ch - 192) + 96) * Font->FontHeight + i];
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001842:	3b60      	subs	r3, #96	; 0x60
 8001844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001846:	7849      	ldrb	r1, [r1, #1]
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4619      	mov	r1, r3
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	440b      	add	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e0a3      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch == 168 ){	// 168 символ по ASCII - Ё
 800185c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001860:	2ba8      	cmp	r3, #168	; 0xa8
 8001862:	d110      	bne.n	8001886 <ST7789_DrawChar+0xde>
					// 160 эллемент ( символ Ё )
					b = Font->data[( 160 ) * Font->FontHeight + i];
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	4619      	mov	r1, r3
 800186e:	460b      	mov	r3, r1
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	4619      	mov	r1, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	440b      	add	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	e08e      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}

				else if( (uint8_t) ch == 184 ){	// 184 символ по ASCII - ё
 8001886:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800188a:	2bb8      	cmp	r3, #184	; 0xb8
 800188c:	d111      	bne.n	80018b2 <ST7789_DrawChar+0x10a>
					// 161 эллемент  ( символ ё )
					b = Font->data[( 161 ) * Font->FontHeight + i];
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	461a      	mov	r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	4413      	add	r3, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	440b      	add	r3, r1
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	e078      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				//-------------------------------------------------------------------

				//----  Украинская раскладка ----------------------------------------------------
				else if( (uint8_t) ch == 170 ){	// 168 символ по ASCII - Є
 80018b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018b6:	2baa      	cmp	r3, #170	; 0xaa
 80018b8:	d10f      	bne.n	80018da <ST7789_DrawChar+0x132>
					// 162 эллемент ( символ Є )
					b = Font->data[( 162 ) * Font->FontHeight + i];
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	4619      	mov	r1, r3
 80018c4:	23a2      	movs	r3, #162	; 0xa2
 80018c6:	fb03 f301 	mul.w	r3, r3, r1
 80018ca:	4619      	mov	r1, r3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	440b      	add	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e064      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 175 ){	// 184 символ по ASCII - Ї
 80018da:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018de:	2baf      	cmp	r3, #175	; 0xaf
 80018e0:	d10f      	bne.n	8001902 <ST7789_DrawChar+0x15a>
					// 163 эллемент  ( символ Ї )
					b = Font->data[( 163 ) * Font->FontHeight + i];
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	4619      	mov	r1, r3
 80018ec:	23a3      	movs	r3, #163	; 0xa3
 80018ee:	fb03 f301 	mul.w	r3, r3, r1
 80018f2:	4619      	mov	r1, r3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	440b      	add	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	e050      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 178 ){	// 168 символ по ASCII - І
 8001902:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001906:	2bb2      	cmp	r3, #178	; 0xb2
 8001908:	d10f      	bne.n	800192a <ST7789_DrawChar+0x182>
					// 164 эллемент ( символ І )
					b = Font->data[( 164 ) * Font->FontHeight + i];
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	4619      	mov	r1, r3
 8001914:	23a4      	movs	r3, #164	; 0xa4
 8001916:	fb03 f301 	mul.w	r3, r3, r1
 800191a:	4619      	mov	r1, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	440b      	add	r3, r1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e03c      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 179 ){	// 184 символ по ASCII - і
 800192a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800192e:	2bb3      	cmp	r3, #179	; 0xb3
 8001930:	d111      	bne.n	8001956 <ST7789_DrawChar+0x1ae>
					// 165 эллемент  ( символ і )
					b = Font->data[( 165 ) * Font->FontHeight + i];
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	4619      	mov	r1, r3
 800193c:	460b      	mov	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	440b      	add	r3, r1
 8001946:	4619      	mov	r1, r3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	440b      	add	r3, r1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e026      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 186 ){	// 184 символ по ASCII - є
 8001956:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800195a:	2bba      	cmp	r3, #186	; 0xba
 800195c:	d10f      	bne.n	800197e <ST7789_DrawChar+0x1d6>
					// 166 эллемент  ( символ є )
					b = Font->data[( 166 ) * Font->FontHeight + i];
 800195e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	4619      	mov	r1, r3
 8001968:	23a6      	movs	r3, #166	; 0xa6
 800196a:	fb03 f301 	mul.w	r3, r3, r1
 800196e:	4619      	mov	r1, r3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	440b      	add	r3, r1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e012      	b.n	80019a4 <ST7789_DrawChar+0x1fc>
				}
				else if( (uint8_t) ch == 191 ){	// 168 символ по ASCII - ї
 800197e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001982:	2bbf      	cmp	r3, #191	; 0xbf
 8001984:	d10e      	bne.n	80019a4 <ST7789_DrawChar+0x1fc>
					// 167 эллемент ( символ ї )
					b = Font->data[( 167 ) * Font->FontHeight + i];
 8001986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	4619      	mov	r1, r3
 8001990:	23a7      	movs	r3, #167	; 0xa7
 8001992:	fb03 f301 	mul.w	r3, r3, r1
 8001996:	4619      	mov	r1, r3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	440b      	add	r3, r1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
				}
				//-----------------------------------------------------------------------------

				for (j = 0; j < Font->FontWidth; j++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e068      	b.n	8001a7c <ST7789_DrawChar+0x2d4>

					if ((b << j) & 0x8000) {
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d028      	beq.n	8001a0c <ST7789_DrawChar+0x264>

						for (yy = 0; yy < multiplier; yy++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	72bb      	strb	r3, [r7, #10]
 80019be:	e01f      	b.n	8001a00 <ST7789_DrawChar+0x258>
							for (xx = 0; xx < multiplier; xx++){
 80019c0:	2300      	movs	r3, #0
 80019c2:	72fb      	strb	r3, [r7, #11]
 80019c4:	e014      	b.n	80019f0 <ST7789_DrawChar+0x248>
									ST7789_DrawPixel(X+xx, Y+yy, TextColor);
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b218      	sxth	r0, r3
 80019d4:	7abb      	ldrb	r3, [r7, #10]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff fe13 	bl	8001610 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	3301      	adds	r3, #1
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	7afa      	ldrb	r2, [r7, #11]
 80019f2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3e5      	bcc.n	80019c6 <ST7789_DrawChar+0x21e>
						for (yy = 0; yy < multiplier; yy++){
 80019fa:	7abb      	ldrb	r3, [r7, #10]
 80019fc:	3301      	adds	r3, #1
 80019fe:	72bb      	strb	r3, [r7, #10]
 8001a00:	7aba      	ldrb	r2, [r7, #10]
 8001a02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3da      	bcc.n	80019c0 <ST7789_DrawChar+0x218>
 8001a0a:	e02f      	b.n	8001a6c <ST7789_DrawChar+0x2c4>
							}
						}

					}
					else if( TransparentBg ){
 8001a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d02b      	beq.n	8001a6c <ST7789_DrawChar+0x2c4>

						for (yy = 0; yy < multiplier; yy++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	72bb      	strb	r3, [r7, #10]
 8001a18:	e023      	b.n	8001a62 <ST7789_DrawChar+0x2ba>
							for (xx = 0; xx < multiplier; xx++){
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	72fb      	strb	r3, [r7, #11]
 8001a1e:	e018      	b.n	8001a52 <ST7789_DrawChar+0x2aa>
 8001a20:	20000098 	.word	0x20000098
 8001a24:	2000009a 	.word	0x2000009a
									ST7789_DrawPixel(X+xx, Y+yy, BgColor);
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b218      	sxth	r0, r3
 8001a36:	7abb      	ldrb	r3, [r7, #10]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	883a      	ldrh	r2, [r7, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff fde2 	bl	8001610 <ST7789_DrawPixel>
							for (xx = 0; xx < multiplier; xx++){
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	72fb      	strb	r3, [r7, #11]
 8001a52:	7afa      	ldrb	r2, [r7, #11]
 8001a54:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3e5      	bcc.n	8001a28 <ST7789_DrawChar+0x280>
						for (yy = 0; yy < multiplier; yy++){
 8001a5c:	7abb      	ldrb	r3, [r7, #10]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	72bb      	strb	r3, [r7, #10]
 8001a62:	7aba      	ldrb	r2, [r7, #10]
 8001a64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3d6      	bcc.n	8001a1a <ST7789_DrawChar+0x272>
							}
						}

					}
					X = X + multiplier;
 8001a6c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4413      	add	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
				for (j = 0; j < Font->FontWidth; j++) {
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d390      	bcc.n	80019aa <ST7789_DrawChar+0x202>
				}
				X = x;
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	613b      	str	r3, [r7, #16]
				Y = Y + multiplier;
 8001a8c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
			for (i = 0; i < Font->FontHeight; i++) {
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f4ff aeaf 	bcc.w	8001808 <ST7789_DrawChar+0x60>
			}
	}
}
 8001aaa:	bf00      	nop
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	bf00      	nop

08001ab4 <ST7789_print>:


//==============================================================================
// Процедура рисования строки
//==============================================================================
void ST7789_print(uint16_t x, uint16_t y, uint16_t TextColor, uint16_t BgColor, uint8_t TransparentBg, FontDef_t* Font, uint8_t multiplier, char *str){
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	803b      	strh	r3, [r7, #0]

	if( multiplier < 1 ){
 8001ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <ST7789_print+0x2c>
		multiplier = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}

	unsigned char buff_char;

	uint16_t len = strlen(str);
 8001ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ae2:	f7fe fb75 	bl	80001d0 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	81bb      	strh	r3, [r7, #12]

	while (len--) {
 8001aea:	e09c      	b.n	8001c26 <ST7789_print+0x172>
		//---------------------------------------------------------------------
		// проверка на кириллицу UTF-8, если латиница то пропускаем if
		// Расширенные символы ASCII Win-1251 кириллица (код символа 128-255)
		// проверяем первый байт из двух ( так как UTF-8 ето два байта )
		// если он больше либо равен 0xC0 ( первый байт в кириллеце будет равен 0xD0 либо 0xD1 именно в алфавите )
		if ( (uint8_t)*str >= 0xC0 ){	// код 0xC0 соответствует символу кириллица 'A' по ASCII Win-1251
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2bbf      	cmp	r3, #191	; 0xbf
 8001af2:	d977      	bls.n	8001be4 <ST7789_print+0x130>

			// проверяем какой именно байт первый 0xD0 либо 0xD1---------------------------------------------
			switch ((uint8_t)*str) {
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2bd0      	cmp	r3, #208	; 0xd0
 8001afa:	d002      	beq.n	8001b02 <ST7789_print+0x4e>
 8001afc:	2bd1      	cmp	r3, #209	; 0xd1
 8001afe:	d02c      	beq.n	8001b5a <ST7789_print+0xa6>
 8001b00:	e05b      	b.n	8001bba <ST7789_print+0x106>
				case 0xD0: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	3301      	adds	r3, #1
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x90 && (uint8_t)*str <= 0xBF){ buff_char = (*str) + 0x30; }	// байт символов А...Я а...п  делаем здвиг на +48
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b8f      	cmp	r3, #143	; 0x8f
 8001b0e:	d908      	bls.n	8001b22 <ST7789_print+0x6e>
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2bbf      	cmp	r3, #191	; 0xbf
 8001b16:	d804      	bhi.n	8001b22 <ST7789_print+0x6e>
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3330      	adds	r3, #48	; 0x30
 8001b1e:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001b20:	e048      	b.n	8001bb4 <ST7789_print+0x100>
					else if ((uint8_t)*str == 0x81) { buff_char = 0xA8; break; }		// байт символа Ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b81      	cmp	r3, #129	; 0x81
 8001b28:	d102      	bne.n	8001b30 <ST7789_print+0x7c>
 8001b2a:	23a8      	movs	r3, #168	; 0xa8
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e044      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x84) { buff_char = 0xAA; break; }		// байт символа Є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b84      	cmp	r3, #132	; 0x84
 8001b36:	d102      	bne.n	8001b3e <ST7789_print+0x8a>
 8001b38:	23aa      	movs	r3, #170	; 0xaa
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	e03d      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x86) { buff_char = 0xB2; break; }		// байт символа І ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b86      	cmp	r3, #134	; 0x86
 8001b44:	d102      	bne.n	8001b4c <ST7789_print+0x98>
 8001b46:	23b2      	movs	r3, #178	; 0xb2
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e036      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x87) { buff_char = 0xAF; break; }		// байт символа Ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b87      	cmp	r3, #135	; 0x87
 8001b52:	d12f      	bne.n	8001bb4 <ST7789_print+0x100>
 8001b54:	23af      	movs	r3, #175	; 0xaf
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e02f      	b.n	8001bba <ST7789_print+0x106>
				}
				case 0xD1: {
					// увеличиваем массив так как нам нужен второй байт
					str++;
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					// проверяем второй байт там сам символ
					if ((uint8_t)*str >= 0x80 && (uint8_t)*str <= 0x8F){ buff_char = (*str) + 0x70; }	// байт символов п...я	елаем здвиг на +112
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da08      	bge.n	8001b7c <ST7789_print+0xc8>
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b8f      	cmp	r3, #143	; 0x8f
 8001b70:	d804      	bhi.n	8001b7c <ST7789_print+0xc8>
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3370      	adds	r3, #112	; 0x70
 8001b78:	73fb      	strb	r3, [r7, #15]
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
					break;
 8001b7a:	e01d      	b.n	8001bb8 <ST7789_print+0x104>
					else if ((uint8_t)*str == 0x91) { buff_char = 0xB8; break; }		// байт символа ё ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b91      	cmp	r3, #145	; 0x91
 8001b82:	d102      	bne.n	8001b8a <ST7789_print+0xd6>
 8001b84:	23b8      	movs	r3, #184	; 0xb8
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e017      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x94) { buff_char = 0xBA; break; }		// байт символа є ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b94      	cmp	r3, #148	; 0x94
 8001b90:	d102      	bne.n	8001b98 <ST7789_print+0xe4>
 8001b92:	23ba      	movs	r3, #186	; 0xba
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e010      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x96) { buff_char = 0xB3; break; }		// байт символа і ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b96      	cmp	r3, #150	; 0x96
 8001b9e:	d102      	bne.n	8001ba6 <ST7789_print+0xf2>
 8001ba0:	23b3      	movs	r3, #179	; 0xb3
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e009      	b.n	8001bba <ST7789_print+0x106>
					else if ((uint8_t)*str == 0x97) { buff_char = 0xBF; break; }		// байт символа ї ( если нужнф еще символы добавляем тут и в функции DrawChar() )
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b97      	cmp	r3, #151	; 0x97
 8001bac:	d104      	bne.n	8001bb8 <ST7789_print+0x104>
 8001bae:	23bf      	movs	r3, #191	; 0xbf
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e002      	b.n	8001bba <ST7789_print+0x106>
					break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <ST7789_print+0x106>
					break;
 8001bb8:	bf00      	nop
				}
			}
			//------------------------------------------------------------------------------------------------
			// уменьшаем еще переменную так как израсходывали 2 байта для кириллицы
			len--;
 8001bba:	89bb      	ldrh	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	81bb      	strh	r3, [r7, #12]

			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, buff_char);
 8001bc0:	883c      	ldrh	r4, [r7, #0]
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	88b9      	ldrh	r1, [r7, #4]
 8001bc6:	88f8      	ldrh	r0, [r7, #6]
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	4623      	mov	r3, r4
 8001bde:	f7ff fde3 	bl	80017a8 <ST7789_DrawChar>
 8001be2:	e011      	b.n	8001c08 <ST7789_print+0x154>
		}
		//---------------------------------------------------------------------
		else{
			ST7789_DrawChar(x, y, TextColor, BgColor, TransparentBg, Font, multiplier, *str);
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	883c      	ldrh	r4, [r7, #0]
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	88b9      	ldrh	r1, [r7, #4]
 8001bee:	88f8      	ldrh	r0, [r7, #6]
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4623      	mov	r3, r4
 8001c04:	f7ff fdd0 	bl	80017a8 <ST7789_DrawChar>
		}

		x = x + (Font->FontWidth * multiplier);
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	fb12 f303 	smulbb	r3, r2, r3
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	80fb      	strh	r3, [r7, #6]
		/* Increase string pointer */
		str++;
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	3301      	adds	r3, #1
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (len--) {
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	1e5a      	subs	r2, r3, #1
 8001c2a:	81ba      	strh	r2, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f af5d 	bne.w	8001aec <ST7789_print+0x38>
	}
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}
	...

08001c3c <ST7789_rotation>:

//==============================================================================
// Процедура ротации ( положение ) дисплея
//==============================================================================
// па умолчанию 1 режим ( всего 1, 2, 3, 4 )
void ST7789_rotation( uint8_t rotation ){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]

	ST7789_Select();
 8001c46:	f7ff f8bd 	bl	8000dc4 <ST7789_Select>

	ST7789_SendCmd(ST7789_MADCTL);
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff f978 	bl	8000f40 <ST7789_SendCmd>

	// длайвер расчитан на экран 320 х 240 (  максимальный размер )
	// для подгона под любой другой нужно отнимать разницу пикселей

	  switch (rotation) {
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d857      	bhi.n	8001d08 <ST7789_rotation+0xcc>
 8001c58:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <ST7789_rotation+0x24>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c97 	.word	0x08001c97
 8001c68:	08001cbd 	.word	0x08001cbd
 8001c6c:	08001ce3 	.word	0x08001ce3
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_RGB);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff f98b 	bl	8000f8c <ST7789_SendData>
				ST7789_Width = 240;
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <ST7789_rotation+0xdc>)
 8001c78:	22f0      	movs	r2, #240	; 0xf0
 8001c7a:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <ST7789_rotation+0xe0>)
 8001c7e:	22f0      	movs	r2, #240	; 0xf0
 8001c80:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <ST7789_rotation+0xe4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <ST7789_rotation+0xe8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff f9d4 	bl	800103c <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001c94:	e039      	b.n	8001d0a <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c96:	2060      	movs	r0, #96	; 0x60
 8001c98:	f7ff f978 	bl	8000f8c <ST7789_SendData>
				ST7789_Width = 240;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <ST7789_rotation+0xdc>)
 8001c9e:	22f0      	movs	r2, #240	; 0xf0
 8001ca0:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <ST7789_rotation+0xe0>)
 8001ca4:	22f0      	movs	r2, #240	; 0xf0
 8001ca6:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <ST7789_rotation+0xe4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <ST7789_rotation+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff f9c1 	bl	800103c <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001cba:	e026      	b.n	8001d0a <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001cbc:	20c0      	movs	r0, #192	; 0xc0
 8001cbe:	f7ff f965 	bl	8000f8c <ST7789_SendData>
				ST7789_Width = 240;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <ST7789_rotation+0xdc>)
 8001cc4:	22f0      	movs	r2, #240	; 0xf0
 8001cc6:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <ST7789_rotation+0xe0>)
 8001cca:	22f0      	movs	r2, #240	; 0xf0
 8001ccc:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 0;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <ST7789_rotation+0xe4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 80;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <ST7789_rotation+0xe8>)
 8001cd6:	2250      	movs	r2, #80	; 0x50
 8001cd8:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff f9ae 	bl	800103c <ST7789_FillScreen>
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================

		 break;
 8001ce0:	e013      	b.n	8001d0a <ST7789_rotation+0xce>
			#endif
			//==========================================================================

			//== 1.3" 240 x 240 ST7789 =================================================
			#ifdef ST7789_IS_240X240
				ST7789_SendData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001ce2:	20a0      	movs	r0, #160	; 0xa0
 8001ce4:	f7ff f952 	bl	8000f8c <ST7789_SendData>
				ST7789_Width = 240;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <ST7789_rotation+0xdc>)
 8001cea:	22f0      	movs	r2, #240	; 0xf0
 8001cec:	801a      	strh	r2, [r3, #0]
				ST7789_Height = 240;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <ST7789_rotation+0xe0>)
 8001cf0:	22f0      	movs	r2, #240	; 0xf0
 8001cf2:	801a      	strh	r2, [r3, #0]
				ST7789_X_Start = 80;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <ST7789_rotation+0xe4>)
 8001cf6:	2250      	movs	r2, #80	; 0x50
 8001cf8:	801a      	strh	r2, [r3, #0]
				ST7789_Y_Start = 0;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <ST7789_rotation+0xe8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
				ST7789_FillScreen(0);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff f99b 	bl	800103c <ST7789_FillScreen>
				ST7789_X_Start = 0;
				ST7789_Y_Start = 0;
				ST7789_FillScreen(0);
			#endif
			//==========================================================================
		 break;
 8001d06:	e000      	b.n	8001d0a <ST7789_rotation+0xce>

	   default:
		 break;
 8001d08:	bf00      	nop
	  }

	  ST7789_Unselect();
 8001d0a:	f7ff f862 	bl	8000dd2 <ST7789_Unselect>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000098 	.word	0x20000098
 8001d1c:	2000009a 	.word	0x2000009a
 8001d20:	20000094 	.word	0x20000094
 8001d24:	20000096 	.word	0x20000096

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_MspInit+0x54>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_MspInit+0x54>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x54>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_MspInit+0x54>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_MspInit+0x54>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_MspInit+0x54>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	210f      	movs	r1, #15
 8001d6a:	f06f 0001 	mvn.w	r0, #1
 8001d6e:	f000 fa79 	bl	8002264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_SPI_MspInit+0xc0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d14a      	bne.n	8001e38 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_SPI_MspInit+0xc4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001df6:	230c      	movs	r3, #12
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e06:	2305      	movs	r3, #5
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <HAL_SPI_MspInit+0xc8>)
 8001e12:	f000 fa51 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <HAL_SPI_MspInit+0xcc>)
 8001e34:	f000 fa40 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40003800 	.word	0x40003800
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020400 	.word	0x40020400

08001e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	2037      	movs	r0, #55	; 0x37
 8001e66:	f000 f9fd 	bl	8002264 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e6a:	2037      	movs	r0, #55	; 0x37
 8001e6c:	f000 fa16 	bl	800229c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8c:	f107 0210 	add.w	r2, r7, #16
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 ffea 	bl	8002e70 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f000 ffd4 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_InitTick+0xa4>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	3b01      	subs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_InitTick+0xac>)
 8001eb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ed2:	f001 fa51 	bl	8003378 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ede:	f001 fa80 	bl	80033e2 <HAL_TIM_Base_Start_IT>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3730      	adds	r7, #48	; 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	200001b8 	.word	0x200001b8
 8001efc:	40001400 	.word	0x40001400

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM7_IRQHandler+0x10>)
 8001f32:	f001 fa7a 	bl	800342a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200001b8 	.word	0x200001b8

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f001 fe32 	bl	8003bd8 <__errno>
 8001f74:	4602      	mov	r2, r0
 8001f76:	230c      	movs	r3, #12
 8001f78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20020000 	.word	0x20020000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	2000009c 	.word	0x2000009c
 8001fa8:	20000200 	.word	0x20000200

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <SystemInit+0x28>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <SystemInit+0x28>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SystemInit+0x28>)
 8001fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fde:	e003      	b.n	8001fe8 <LoopCopyDataInit>

08001fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fe6:	3104      	adds	r1, #4

08001fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff0:	d3f6      	bcc.n	8001fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff4:	e002      	b.n	8001ffc <LoopFillZerobss>

08001ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ff8:	f842 3b04 	str.w	r3, [r2], #4

08001ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002000:	d3f9      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002002:	f7ff ffd3 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f001 fded 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7fe fab9 	bl	8000580 <main>
  bx  lr    
 800200e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002014:	08022d7c 	.word	0x08022d7c
  ldr  r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800201c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002020:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002024:	20000200 	.word	0x20000200

08002028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC_IRQHandler>
	...

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_Init+0x40>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_Init+0x40>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_Init+0x40>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 f8fa 	bl	800224e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fef8 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002060:	f7ff fe62 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000010 	.word	0x20000010
 8002094:	200001f8 	.word	0x200001f8

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200001f8 	.word	0x200001f8

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_Delay+0x40>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000010 	.word	0x20000010

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff4c 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002276:	f7ff ff61 	bl	800213c <__NVIC_GetPriorityGrouping>
 800227a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f7ff ffb1 	bl	80021e8 <NVIC_EncodePriority>
 8002286:	4602      	mov	r2, r0
 8002288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff80 	bl	8002194 <__NVIC_SetPriority>
}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff54 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e16b      	b.n	80025ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 815a 	bne.w	80025a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00b      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0xfc>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b4 	beq.w	80025a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_GPIO_Init+0x308>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x310>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d02b      	beq.n	80024de <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d025      	beq.n	80024da <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01f      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4c      	ldr	r2, [pc, #304]	; (80025dc <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x20a>
 80024be:	2307      	movs	r3, #7
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x228>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_GPIO_Init+0x30c>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_GPIO_Init+0x330>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x330>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_GPIO_Init+0x330>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae90 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	3724      	adds	r7, #36	; 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40021400 	.word	0x40021400
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40021c00 	.word	0x40021c00
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e25b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	4ba3      	ldr	r3, [pc, #652]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4ba0      	ldr	r3, [pc, #640]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b99      	ldr	r3, [pc, #612]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e236      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b91      	ldr	r3, [pc, #580]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a90      	ldr	r2, [pc, #576]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a87      	ldr	r2, [pc, #540]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b84      	ldr	r3, [pc, #528]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a83      	ldr	r2, [pc, #524]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fcde 	bl	8002098 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fcda 	bl	8002098 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1fb      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fcca 	bl	8002098 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fcc6 	bl	8002098 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1e7      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1bb      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4952      	ldr	r1, [pc, #328]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_OscConfig+0x2b0>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff fc7f 	bl	8002098 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff fc7b 	bl	8002098 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e19c      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4940      	ldr	r1, [pc, #256]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x2b0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc5e 	bl	8002098 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff fc5a 	bl	8002098 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e17b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d030      	beq.n	800286c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCC_OscConfig+0x2b4>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff fc3e 	bl	8002098 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff fc3a 	bl	8002098 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e15b      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e015      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x2b4>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff fc27 	bl	8002098 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284e:	f7ff fc23 	bl	8002098 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e144      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a0 	beq.w	80029ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x2ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d121      	bne.n	80028fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_RCC_OscConfig+0x2b8>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c2:	f7ff fbe9 	bl	8002098 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	e011      	b.n	80028ee <HAL_RCC_OscConfig+0x2ce>
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
 80028d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7ff fbdc 	bl	8002098 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e0fd      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x4d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x2f0>
 8002902:	4b7d      	ldr	r3, [pc, #500]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a7c      	ldr	r2, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x312>
 8002918:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a76      	ldr	r2, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a73      	ldr	r2, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x32a>
 8002932:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a70      	ldr	r2, [pc, #448]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a6d      	ldr	r2, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7ff fba1 	bl	8002098 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7ff fb9d 	bl	8002098 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0bc      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x33a>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7ff fb8b 	bl	8002098 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff fb87 	bl	8002098 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0a6      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8092 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d05c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d141      	bne.n	8002a5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b48      	ldr	r3, [pc, #288]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7ff fb5b 	bl	8002098 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e6:	f7ff fb57 	bl	8002098 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e078      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	019b      	lsls	r3, r3, #6
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	4933      	ldr	r1, [pc, #204]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2e:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fb30 	bl	8002098 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff fb2c 	bl	8002098 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04d      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x41c>
 8002a5a:	e045      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x4dc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7ff fb19 	bl	8002098 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7ff fb15 	bl	8002098 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e036      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x44a>
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e029      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCC_OscConfig+0x4d8>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d115      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40007000 	.word	0x40007000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470060 	.word	0x42470060

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7ff fa52 	bl	8002098 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7ff fa4e 	bl	8002098 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f8d2 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08022950 	.word	0x08022950
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce2:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d007      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x32>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 808d 	bne.w	8002e12 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002cfa:	60bb      	str	r3, [r7, #8]
       break;
 8002cfc:	e08c      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d00:	60bb      	str	r3, [r7, #8]
      break;
 8002d02:	e089      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d023      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea03 0501 	and.w	r5, r3, r1
 8002d30:	ea04 0602 	and.w	r6, r4, r2
 8002d34:	4a3d      	ldr	r2, [pc, #244]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d36:	fb02 f106 	mul.w	r1, r2, r6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	fb02 f205 	mul.w	r2, r2, r5
 8002d40:	440a      	add	r2, r1
 8002d42:	493a      	ldr	r1, [pc, #232]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d44:	fba5 0101 	umull	r0, r1, r5, r1
 8002d48:	1853      	adds	r3, r2, r1
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f04f 0400 	mov.w	r4, #0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	f7fd fa93 	bl	8000280 <__aeabi_uldivmod>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e049      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	f04f 0400 	mov.w	r4, #0
 8002d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	ea03 0501 	and.w	r5, r3, r1
 8002d78:	ea04 0602 	and.w	r6, r4, r2
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	0154      	lsls	r4, r2, #5
 8002d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d8e:	014b      	lsls	r3, r1, #5
 8002d90:	4619      	mov	r1, r3
 8002d92:	4622      	mov	r2, r4
 8002d94:	1b49      	subs	r1, r1, r5
 8002d96:	eb62 0206 	sbc.w	r2, r2, r6
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f04f 0400 	mov.w	r4, #0
 8002da2:	0194      	lsls	r4, r2, #6
 8002da4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002da8:	018b      	lsls	r3, r1, #6
 8002daa:	1a5b      	subs	r3, r3, r1
 8002dac:	eb64 0402 	sbc.w	r4, r4, r2
 8002db0:	f04f 0100 	mov.w	r1, #0
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	00e2      	lsls	r2, r4, #3
 8002dba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dbe:	00d9      	lsls	r1, r3, #3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4614      	mov	r4, r2
 8002dc4:	195b      	adds	r3, r3, r5
 8002dc6:	eb44 0406 	adc.w	r4, r4, r6
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	02a2      	lsls	r2, r4, #10
 8002dd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dd8:	0299      	lsls	r1, r3, #10
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	4621      	mov	r1, r4
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	f7fd fa48 	bl	8000280 <__aeabi_uldivmod>
 8002df0:	4603      	mov	r3, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x158>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	3301      	adds	r3, #1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	60bb      	str	r3, [r7, #8]
      break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e14:	60bb      	str	r3, [r7, #8]
      break;
 8002e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e18:	68bb      	ldr	r3, [r7, #8]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	017d7840 	.word	0x017d7840

08002e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000008 	.word	0x20000008

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4601      	mov	r1, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08022960 	.word	0x08022960

08002e70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_GetClockConfig+0x5c>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <HAL_RCC_GetClockConfig+0x5c>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_RCC_GetClockConfig+0x5c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_RCC_GetClockConfig+0x60>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e056      	b.n	8002f94 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe ff3d 	bl	8001d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f003 0104 	and.w	r1, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_SPI_Transmit+0x22>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e11e      	b.n	80031fc <HAL_SPI_Transmit+0x260>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc6:	f7ff f867 	bl	8002098 <HAL_GetTick>
 8002fca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe0:	e103      	b.n	80031ea <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_Transmit+0x52>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ff2:	e0fa      	b.n	80031ea <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303a:	d107      	bne.n	800304c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800304a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d007      	beq.n	800306a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003072:	d14b      	bne.n	800310c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <HAL_SPI_Transmit+0xe6>
 800307c:	8afb      	ldrh	r3, [r7, #22]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d13e      	bne.n	8003100 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	1c9a      	adds	r2, r3, #2
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030a6:	e02b      	b.n	8003100 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d112      	bne.n	80030dc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	881a      	ldrh	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80030da:	e011      	b.n	8003100 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030dc:	f7fe ffdc 	bl	8002098 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d803      	bhi.n	80030f4 <HAL_SPI_Transmit+0x158>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d102      	bne.n	80030fa <HAL_SPI_Transmit+0x15e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030fe:	e074      	b.n	80031ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ce      	bne.n	80030a8 <HAL_SPI_Transmit+0x10c>
 800310a:	e04c      	b.n	80031a6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_Transmit+0x17e>
 8003114:	8afb      	ldrh	r3, [r7, #22]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d140      	bne.n	800319c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003140:	e02c      	b.n	800319c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d113      	bne.n	8003178 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	86da      	strh	r2, [r3, #54]	; 0x36
 8003176:	e011      	b.n	800319c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fe ff8e 	bl	8002098 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d803      	bhi.n	8003190 <HAL_SPI_Transmit+0x1f4>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Transmit+0x1fa>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	77fb      	strb	r3, [r7, #31]
          goto error;
 800319a:	e026      	b.n	80031ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1cd      	bne.n	8003142 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8a2 	bl	80032f4 <SPI_EndRxTxTransaction>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e000      	b.n	80031ea <HAL_SPI_Transmit+0x24e>
  }

error:
 80031e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003212:	b2db      	uxtb	r3, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003230:	e04c      	b.n	80032cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d048      	beq.n	80032cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800323a:	f7fe ff2d 	bl	8002098 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d902      	bls.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x30>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13d      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800325e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003268:	d111      	bne.n	800328e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003272:	d004      	beq.n	800327e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d107      	bne.n	800328e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003296:	d10f      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e00f      	b.n	80032ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4013      	ands	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1a3      	bne.n	8003232 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <SPI_EndRxTxTransaction+0x7c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <SPI_EndRxTxTransaction+0x80>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0d5b      	lsrs	r3, r3, #21
 800330c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d112      	bne.n	8003346 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ff78 	bl	8003220 <SPI_WaitFlagStateUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3b01      	subs	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d0f2      	beq.n	8003346 <SPI_EndRxTxTransaction+0x52>
 8003360:	e000      	b.n	8003364 <SPI_EndRxTxTransaction+0x70>
        break;
 8003362:	bf00      	nop
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000008 	.word	0x20000008
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e01d      	b.n	80033c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f815 	bl	80033ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 f968 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d007      	beq.n	800341c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d122      	bne.n	8003486 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d11b      	bne.n	8003486 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0202 	mvn.w	r2, #2
 8003456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8ee 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 8003472:	e005      	b.n	8003480 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8e0 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8f1 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d122      	bne.n	80034da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d11b      	bne.n	80034da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0204 	mvn.w	r2, #4
 80034aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8c4 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 80034c6:	e005      	b.n	80034d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8b6 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8c7 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d122      	bne.n	800352e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11b      	bne.n	800352e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f06f 0208 	mvn.w	r2, #8
 80034fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2204      	movs	r2, #4
 8003504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f89a 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 800351a:	e005      	b.n	8003528 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f88c 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f89d 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d122      	bne.n	8003582 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b10      	cmp	r3, #16
 8003548:	d11b      	bne.n	8003582 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0210 	mvn.w	r2, #16
 8003552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2208      	movs	r2, #8
 8003558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f870 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 800356e:	e005      	b.n	800357c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f862 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f873 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10e      	bne.n	80035ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0201 	mvn.w	r2, #1
 80035a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fbd9 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d10e      	bne.n	80035da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b80      	cmp	r3, #128	; 0x80
 80035c8:	d107      	bne.n	80035da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f903 	bl	80037e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d10e      	bne.n	8003606 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f838 	bl	8003676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d10e      	bne.n	8003632 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b20      	cmp	r3, #32
 8003620:	d107      	bne.n	8003632 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0220 	mvn.w	r2, #32
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8cd 	bl	80037cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <TIM_Base_SetConfig+0x114>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d00f      	beq.n	80036cc <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <TIM_Base_SetConfig+0x118>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00b      	beq.n	80036cc <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3c      	ldr	r2, [pc, #240]	; (80037a8 <TIM_Base_SetConfig+0x11c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d007      	beq.n	80036cc <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3b      	ldr	r2, [pc, #236]	; (80037ac <TIM_Base_SetConfig+0x120>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <TIM_Base_SetConfig+0x124>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <TIM_Base_SetConfig+0x114>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d027      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <TIM_Base_SetConfig+0x118>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d023      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2b      	ldr	r2, [pc, #172]	; (80037a8 <TIM_Base_SetConfig+0x11c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <TIM_Base_SetConfig+0x120>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01b      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <TIM_Base_SetConfig+0x124>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d017      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <TIM_Base_SetConfig+0x128>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a27      	ldr	r2, [pc, #156]	; (80037b8 <TIM_Base_SetConfig+0x12c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00f      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <TIM_Base_SetConfig+0x130>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <TIM_Base_SetConfig+0x134>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a24      	ldr	r2, [pc, #144]	; (80037c4 <TIM_Base_SetConfig+0x138>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a23      	ldr	r2, [pc, #140]	; (80037c8 <TIM_Base_SetConfig+0x13c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <TIM_Base_SetConfig+0x114>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_Base_SetConfig+0xf8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <TIM_Base_SetConfig+0x124>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	615a      	str	r2, [r3, #20]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40010400 	.word	0x40010400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800
 80037c0:	40001800 	.word	0x40001800
 80037c4:	40001c00 	.word	0x40001c00
 80037c8:	40002000 	.word	0x40002000

080037cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6852      	ldr	r2, [r2, #4]
 800385c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d103      	bne.n	8003870 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <xTaskIncrementTick+0x144>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8087 	bne.w	80039b2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <xTaskIncrementTick+0x148>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038ac:	4a4a      	ldr	r2, [pc, #296]	; (80039d8 <xTaskIncrementTick+0x148>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11f      	bne.n	80038f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80038b8:	4b48      	ldr	r3, [pc, #288]	; (80039dc <xTaskIncrementTick+0x14c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	e7fe      	b.n	80038d4 <xTaskIncrementTick+0x44>
 80038d6:	4b41      	ldr	r3, [pc, #260]	; (80039dc <xTaskIncrementTick+0x14c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <xTaskIncrementTick+0x150>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <xTaskIncrementTick+0x14c>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4a3e      	ldr	r2, [pc, #248]	; (80039e0 <xTaskIncrementTick+0x150>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <xTaskIncrementTick+0x154>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <xTaskIncrementTick+0x154>)
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	f000 f8de 	bl	8003ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <xTaskIncrementTick+0x158>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d348      	bcc.n	8003994 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003902:	4b36      	ldr	r3, [pc, #216]	; (80039dc <xTaskIncrementTick+0x14c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <xTaskIncrementTick+0x158>)
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	601a      	str	r2, [r3, #0]
					break;
 8003914:	e03e      	b.n	8003994 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <xTaskIncrementTick+0x14c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d203      	bcs.n	8003936 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800392e:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <xTaskIncrementTick+0x158>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003934:	e02e      	b.n	8003994 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3304      	adds	r3, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff7e 	bl	800383c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	3318      	adds	r3, #24
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff75 	bl	800383c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	2201      	movs	r2, #1
 8003958:	409a      	lsls	r2, r3
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <xTaskIncrementTick+0x15c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <xTaskIncrementTick+0x15c>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <xTaskIncrementTick+0x160>)
 8003972:	441a      	add	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7ff ff3a 	bl	80037f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <xTaskIncrementTick+0x164>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	429a      	cmp	r2, r3
 800398c:	d3b9      	bcc.n	8003902 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800398e:	2301      	movs	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003992:	e7b6      	b.n	8003902 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <xTaskIncrementTick+0x164>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4915      	ldr	r1, [pc, #84]	; (80039f0 <xTaskIncrementTick+0x160>)
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d907      	bls.n	80039bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e004      	b.n	80039bc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <xTaskIncrementTick+0x168>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <xTaskIncrementTick+0x168>)
 80039ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <xTaskIncrementTick+0x16c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80039c8:	697b      	ldr	r3, [r7, #20]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000150 	.word	0x20000150
 80039d8:	20000138 	.word	0x20000138
 80039dc:	20000130 	.word	0x20000130
 80039e0:	20000134 	.word	0x20000134
 80039e4:	20000148 	.word	0x20000148
 80039e8:	2000014c 	.word	0x2000014c
 80039ec:	2000013c 	.word	0x2000013c
 80039f0:	200000a4 	.word	0x200000a4
 80039f4:	200000a0 	.word	0x200000a0
 80039f8:	20000140 	.word	0x20000140
 80039fc:	20000144 	.word	0x20000144

08003a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <vTaskSwitchContext+0xa0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <vTaskSwitchContext+0xa4>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a14:	e03e      	b.n	8003a94 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <vTaskSwitchContext+0xa4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a1c:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <vTaskSwitchContext+0xa8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	f1c3 031f 	rsb	r3, r3, #31
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	491e      	ldr	r1, [pc, #120]	; (8003aac <vTaskSwitchContext+0xac>)
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e7fe      	b.n	8003a58 <vTaskSwitchContext+0x58>
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4a11      	ldr	r2, [pc, #68]	; (8003aac <vTaskSwitchContext+0xac>)
 8003a66:	4413      	add	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d104      	bne.n	8003a8a <vTaskSwitchContext+0x8a>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <vTaskSwitchContext+0xb0>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	20000150 	.word	0x20000150
 8003aa4:	20000144 	.word	0x20000144
 8003aa8:	2000013c 	.word	0x2000013c
 8003aac:	200000a4 	.word	0x200000a4
 8003ab0:	200000a0 	.word	0x200000a0

08003ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <prvResetNextTaskUnblockTime+0x38>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003acc:	e008      	b.n	8003ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <prvResetNextTaskUnblockTime+0x38>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000130 	.word	0x20000130
 8003af0:	2000014c 	.word	0x2000014c
	...

08003b00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <pxCurrentTCBConst2>)
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	6808      	ldr	r0, [r1, #0]
 8003b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0a:	f380 8809 	msr	PSP, r0
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8811 	msr	BASEPRI, r0
 8003b1a:	4770      	bx	lr
 8003b1c:	f3af 8000 	nop.w

08003b20 <pxCurrentTCBConst2>:
 8003b20:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
	...

08003b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b30:	f3ef 8009 	mrs	r0, PSP
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <pxCurrentTCBConst>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f01e 0f10 	tst.w	lr, #16
 8003b40:	bf08      	it	eq
 8003b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b54:	f380 8811 	msr	BASEPRI, r0
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f7ff ff4e 	bl	8003a00 <vTaskSwitchContext>
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f380 8811 	msr	BASEPRI, r0
 8003b6c:	bc09      	pop	{r0, r3}
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6808      	ldr	r0, [r1, #0]
 8003b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b76:	f01e 0f10 	tst.w	lr, #16
 8003b7a:	bf08      	it	eq
 8003b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b80:	f380 8809 	msr	PSP, r0
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	f3af 8000 	nop.w

08003b90 <pxCurrentTCBConst>:
 8003b90:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bb0:	f7ff fe6e 	bl	8003890 <xTaskIncrementTick>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <SysTick_Handler+0x3c>)
 8003bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <__errno>:
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <__errno+0x8>)
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000014 	.word	0x20000014

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	4e0d      	ldr	r6, [pc, #52]	; (8003c1c <__libc_init_array+0x38>)
 8003be8:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <__libc_init_array+0x3c>)
 8003bea:	1ba4      	subs	r4, r4, r6
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	2500      	movs	r5, #0
 8003bf0:	42a5      	cmp	r5, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	4e0b      	ldr	r6, [pc, #44]	; (8003c24 <__libc_init_array+0x40>)
 8003bf6:	4c0c      	ldr	r4, [pc, #48]	; (8003c28 <__libc_init_array+0x44>)
 8003bf8:	f001 f9b4 	bl	8004f64 <_init>
 8003bfc:	1ba4      	subs	r4, r4, r6
 8003bfe:	10a4      	asrs	r4, r4, #2
 8003c00:	2500      	movs	r5, #0
 8003c02:	42a5      	cmp	r5, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0c:	4798      	blx	r3
 8003c0e:	3501      	adds	r5, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c16:	4798      	blx	r3
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08022d74 	.word	0x08022d74
 8003c20:	08022d74 	.word	0x08022d74
 8003c24:	08022d74 	.word	0x08022d74
 8003c28:	08022d78 	.word	0x08022d78

08003c2c <memcpy>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	1e43      	subs	r3, r0, #1
 8003c30:	440a      	add	r2, r1
 8003c32:	4291      	cmp	r1, r2
 8003c34:	d100      	bne.n	8003c38 <memcpy+0xc>
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c40:	e7f7      	b.n	8003c32 <memcpy+0x6>

08003c42 <memset>:
 8003c42:	4402      	add	r2, r0
 8003c44:	4603      	mov	r3, r0
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d100      	bne.n	8003c4c <memset+0xa>
 8003c4a:	4770      	bx	lr
 8003c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c50:	e7f9      	b.n	8003c46 <memset+0x4>
	...

08003c54 <siprintf>:
 8003c54:	b40e      	push	{r1, r2, r3}
 8003c56:	b500      	push	{lr}
 8003c58:	b09c      	sub	sp, #112	; 0x70
 8003c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c5c:	9002      	str	r0, [sp, #8]
 8003c5e:	9006      	str	r0, [sp, #24]
 8003c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c64:	4809      	ldr	r0, [pc, #36]	; (8003c8c <siprintf+0x38>)
 8003c66:	9107      	str	r1, [sp, #28]
 8003c68:	9104      	str	r1, [sp, #16]
 8003c6a:	4909      	ldr	r1, [pc, #36]	; (8003c90 <siprintf+0x3c>)
 8003c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	a902      	add	r1, sp, #8
 8003c78:	f000 f866 	bl	8003d48 <_svfiprintf_r>
 8003c7c:	9b02      	ldr	r3, [sp, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	b01c      	add	sp, #112	; 0x70
 8003c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c88:	b003      	add	sp, #12
 8003c8a:	4770      	bx	lr
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	ffff0208 	.word	0xffff0208

08003c94 <__ssputs_r>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	688e      	ldr	r6, [r1, #8]
 8003c9a:	429e      	cmp	r6, r3
 8003c9c:	4682      	mov	sl, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	d837      	bhi.n	8003d16 <__ssputs_r+0x82>
 8003ca6:	898a      	ldrh	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cac:	d031      	beq.n	8003d12 <__ssputs_r+0x7e>
 8003cae:	6825      	ldr	r5, [r4, #0]
 8003cb0:	6909      	ldr	r1, [r1, #16]
 8003cb2:	1a6f      	subs	r7, r5, r1
 8003cb4:	6965      	ldr	r5, [r4, #20]
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cbc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cc0:	f109 0301 	add.w	r3, r9, #1
 8003cc4:	443b      	add	r3, r7
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	bf38      	it	cc
 8003cca:	461d      	movcc	r5, r3
 8003ccc:	0553      	lsls	r3, r2, #21
 8003cce:	d530      	bpl.n	8003d32 <__ssputs_r+0x9e>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f000 fb21 	bl	8004318 <_malloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	b950      	cbnz	r0, 8003cf0 <__ssputs_r+0x5c>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	f8ca 3000 	str.w	r3, [sl]
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	6921      	ldr	r1, [r4, #16]
 8003cf4:	f7ff ff9a 	bl	8003c2c <memcpy>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	6126      	str	r6, [r4, #16]
 8003d06:	6165      	str	r5, [r4, #20]
 8003d08:	443e      	add	r6, r7
 8003d0a:	1bed      	subs	r5, r5, r7
 8003d0c:	6026      	str	r6, [r4, #0]
 8003d0e:	60a5      	str	r5, [r4, #8]
 8003d10:	464e      	mov	r6, r9
 8003d12:	454e      	cmp	r6, r9
 8003d14:	d900      	bls.n	8003d18 <__ssputs_r+0x84>
 8003d16:	464e      	mov	r6, r9
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f000 fa93 	bl	8004248 <memmove>
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	1b9b      	subs	r3, r3, r6
 8003d26:	60a3      	str	r3, [r4, #8]
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	441e      	add	r6, r3
 8003d2c:	6026      	str	r6, [r4, #0]
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e7dc      	b.n	8003cec <__ssputs_r+0x58>
 8003d32:	462a      	mov	r2, r5
 8003d34:	f000 fb4a 	bl	80043cc <_realloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1e2      	bne.n	8003d04 <__ssputs_r+0x70>
 8003d3e:	6921      	ldr	r1, [r4, #16]
 8003d40:	4650      	mov	r0, sl
 8003d42:	f000 fa9b 	bl	800427c <_free_r>
 8003d46:	e7c8      	b.n	8003cda <__ssputs_r+0x46>

08003d48 <_svfiprintf_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	061f      	lsls	r7, r3, #24
 8003d52:	b09d      	sub	sp, #116	; 0x74
 8003d54:	4680      	mov	r8, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	4616      	mov	r6, r2
 8003d5a:	d50f      	bpl.n	8003d7c <_svfiprintf_r+0x34>
 8003d5c:	690b      	ldr	r3, [r1, #16]
 8003d5e:	b96b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x34>
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	f000 fad9 	bl	8004318 <_malloc_r>
 8003d66:	6020      	str	r0, [r4, #0]
 8003d68:	6120      	str	r0, [r4, #16]
 8003d6a:	b928      	cbnz	r0, 8003d78 <_svfiprintf_r+0x30>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	f8c8 3000 	str.w	r3, [r8]
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	e0c8      	b.n	8003f0a <_svfiprintf_r+0x1c2>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	6163      	str	r3, [r4, #20]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	2330      	movs	r3, #48	; 0x30
 8003d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d8c:	9503      	str	r5, [sp, #12]
 8003d8e:	f04f 0b01 	mov.w	fp, #1
 8003d92:	4637      	mov	r7, r6
 8003d94:	463d      	mov	r5, r7
 8003d96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d9a:	b10b      	cbz	r3, 8003da0 <_svfiprintf_r+0x58>
 8003d9c:	2b25      	cmp	r3, #37	; 0x25
 8003d9e:	d13e      	bne.n	8003e1e <_svfiprintf_r+0xd6>
 8003da0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003da4:	d00b      	beq.n	8003dbe <_svfiprintf_r+0x76>
 8003da6:	4653      	mov	r3, sl
 8003da8:	4632      	mov	r2, r6
 8003daa:	4621      	mov	r1, r4
 8003dac:	4640      	mov	r0, r8
 8003dae:	f7ff ff71 	bl	8003c94 <__ssputs_r>
 8003db2:	3001      	adds	r0, #1
 8003db4:	f000 80a4 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dba:	4453      	add	r3, sl
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	783b      	ldrb	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 809d 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dda:	462f      	mov	r7, r5
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003de2:	4850      	ldr	r0, [pc, #320]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003de4:	f7fc f9fc 	bl	80001e0 <memchr>
 8003de8:	9b04      	ldr	r3, [sp, #16]
 8003dea:	b9d0      	cbnz	r0, 8003e22 <_svfiprintf_r+0xda>
 8003dec:	06d9      	lsls	r1, r3, #27
 8003dee:	bf44      	itt	mi
 8003df0:	2220      	movmi	r2, #32
 8003df2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df6:	071a      	lsls	r2, r3, #28
 8003df8:	bf44      	itt	mi
 8003dfa:	222b      	movmi	r2, #43	; 0x2b
 8003dfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e00:	782a      	ldrb	r2, [r5, #0]
 8003e02:	2a2a      	cmp	r2, #42	; 0x2a
 8003e04:	d015      	beq.n	8003e32 <_svfiprintf_r+0xea>
 8003e06:	9a07      	ldr	r2, [sp, #28]
 8003e08:	462f      	mov	r7, r5
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e14:	3b30      	subs	r3, #48	; 0x30
 8003e16:	2b09      	cmp	r3, #9
 8003e18:	d94d      	bls.n	8003eb6 <_svfiprintf_r+0x16e>
 8003e1a:	b1b8      	cbz	r0, 8003e4c <_svfiprintf_r+0x104>
 8003e1c:	e00f      	b.n	8003e3e <_svfiprintf_r+0xf6>
 8003e1e:	462f      	mov	r7, r5
 8003e20:	e7b8      	b.n	8003d94 <_svfiprintf_r+0x4c>
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003e24:	1a80      	subs	r0, r0, r2
 8003e26:	fa0b f000 	lsl.w	r0, fp, r0
 8003e2a:	4318      	orrs	r0, r3
 8003e2c:	9004      	str	r0, [sp, #16]
 8003e2e:	463d      	mov	r5, r7
 8003e30:	e7d3      	b.n	8003dda <_svfiprintf_r+0x92>
 8003e32:	9a03      	ldr	r2, [sp, #12]
 8003e34:	1d11      	adds	r1, r2, #4
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	9103      	str	r1, [sp, #12]
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	db01      	blt.n	8003e42 <_svfiprintf_r+0xfa>
 8003e3e:	9207      	str	r2, [sp, #28]
 8003e40:	e004      	b.n	8003e4c <_svfiprintf_r+0x104>
 8003e42:	4252      	negs	r2, r2
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	9207      	str	r2, [sp, #28]
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	783b      	ldrb	r3, [r7, #0]
 8003e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e50:	d10c      	bne.n	8003e6c <_svfiprintf_r+0x124>
 8003e52:	787b      	ldrb	r3, [r7, #1]
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d133      	bne.n	8003ec0 <_svfiprintf_r+0x178>
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	9203      	str	r2, [sp, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bfb8      	it	lt
 8003e64:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e68:	3702      	adds	r7, #2
 8003e6a:	9305      	str	r3, [sp, #20]
 8003e6c:	4d2e      	ldr	r5, [pc, #184]	; (8003f28 <_svfiprintf_r+0x1e0>)
 8003e6e:	7839      	ldrb	r1, [r7, #0]
 8003e70:	2203      	movs	r2, #3
 8003e72:	4628      	mov	r0, r5
 8003e74:	f7fc f9b4 	bl	80001e0 <memchr>
 8003e78:	b138      	cbz	r0, 8003e8a <_svfiprintf_r+0x142>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	4303      	orrs	r3, r0
 8003e86:	3701      	adds	r7, #1
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	7839      	ldrb	r1, [r7, #0]
 8003e8c:	4827      	ldr	r0, [pc, #156]	; (8003f2c <_svfiprintf_r+0x1e4>)
 8003e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e92:	2206      	movs	r2, #6
 8003e94:	1c7e      	adds	r6, r7, #1
 8003e96:	f7fc f9a3 	bl	80001e0 <memchr>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d038      	beq.n	8003f10 <_svfiprintf_r+0x1c8>
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <_svfiprintf_r+0x1e8>)
 8003ea0:	bb13      	cbnz	r3, 8003ee8 <_svfiprintf_r+0x1a0>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	3308      	adds	r3, #8
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb0:	444b      	add	r3, r9
 8003eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb4:	e76d      	b.n	8003d92 <_svfiprintf_r+0x4a>
 8003eb6:	fb05 3202 	mla	r2, r5, r2, r3
 8003eba:	2001      	movs	r0, #1
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	e7a6      	b.n	8003e0e <_svfiprintf_r+0xc6>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	3701      	adds	r7, #1
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	250a      	movs	r5, #10
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed0:	3a30      	subs	r2, #48	; 0x30
 8003ed2:	2a09      	cmp	r2, #9
 8003ed4:	d903      	bls.n	8003ede <_svfiprintf_r+0x196>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0c8      	beq.n	8003e6c <_svfiprintf_r+0x124>
 8003eda:	9105      	str	r1, [sp, #20]
 8003edc:	e7c6      	b.n	8003e6c <_svfiprintf_r+0x124>
 8003ede:	fb05 2101 	mla	r1, r5, r1, r2
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	e7f0      	b.n	8003eca <_svfiprintf_r+0x182>
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4622      	mov	r2, r4
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003ef0:	a904      	add	r1, sp, #16
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003efc:	4681      	mov	r9, r0
 8003efe:	d1d6      	bne.n	8003eae <_svfiprintf_r+0x166>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	065b      	lsls	r3, r3, #25
 8003f04:	f53f af35 	bmi.w	8003d72 <_svfiprintf_r+0x2a>
 8003f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f0a:	b01d      	add	sp, #116	; 0x74
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4622      	mov	r2, r4
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003f18:	a904      	add	r1, sp, #16
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f000 f882 	bl	8004024 <_printf_i>
 8003f20:	e7ea      	b.n	8003ef8 <_svfiprintf_r+0x1b0>
 8003f22:	bf00      	nop
 8003f24:	08022968 	.word	0x08022968
 8003f28:	0802296e 	.word	0x0802296e
 8003f2c:	08022972 	.word	0x08022972
 8003f30:	00000000 	.word	0x00000000
 8003f34:	08003c95 	.word	0x08003c95

08003f38 <_printf_common>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4691      	mov	r9, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	688a      	ldr	r2, [r1, #8]
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bfb8      	it	lt
 8003f4c:	4613      	movlt	r3, r2
 8003f4e:	f8c9 3000 	str.w	r3, [r9]
 8003f52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f56:	4606      	mov	r6, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	b112      	cbz	r2, 8003f62 <_printf_common+0x2a>
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c9 3000 	str.w	r3, [r9]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	0699      	lsls	r1, r3, #26
 8003f66:	bf42      	ittt	mi
 8003f68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f6c:	3302      	addmi	r3, #2
 8003f6e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d107      	bne.n	8003f8a <_printf_common+0x52>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	f8d9 2000 	ldr.w	r2, [r9]
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dc28      	bgt.n	8003fdc <_printf_common+0xa4>
 8003f8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	3300      	adds	r3, #0
 8003f92:	bf18      	it	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	0692      	lsls	r2, r2, #26
 8003f98:	d42d      	bmi.n	8003ff6 <_printf_common+0xbe>
 8003f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	47c0      	blx	r8
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d020      	beq.n	8003fea <_printf_common+0xb2>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	68e5      	ldr	r5, [r4, #12]
 8003fac:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb0:	f003 0306 	and.w	r3, r3, #6
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	bf08      	it	eq
 8003fb8:	1aad      	subeq	r5, r5, r2
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	bf0c      	ite	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	2500      	movne	r5, #0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfc4      	itt	gt
 8003fca:	1a9b      	subgt	r3, r3, r2
 8003fcc:	18ed      	addgt	r5, r5, r3
 8003fce:	f04f 0900 	mov.w	r9, #0
 8003fd2:	341a      	adds	r4, #26
 8003fd4:	454d      	cmp	r5, r9
 8003fd6:	d11a      	bne.n	800400e <_printf_common+0xd6>
 8003fd8:	2000      	movs	r0, #0
 8003fda:	e008      	b.n	8003fee <_printf_common+0xb6>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4652      	mov	r2, sl
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	47c0      	blx	r8
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d103      	bne.n	8003ff2 <_printf_common+0xba>
 8003fea:	f04f 30ff 	mov.w	r0, #4294967295
 8003fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff2:	3501      	adds	r5, #1
 8003ff4:	e7c3      	b.n	8003f7e <_printf_common+0x46>
 8003ff6:	18e1      	adds	r1, r4, r3
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	2030      	movs	r0, #48	; 0x30
 8003ffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004000:	4422      	add	r2, r4
 8004002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400a:	3302      	adds	r3, #2
 800400c:	e7c5      	b.n	8003f9a <_printf_common+0x62>
 800400e:	2301      	movs	r3, #1
 8004010:	4622      	mov	r2, r4
 8004012:	4639      	mov	r1, r7
 8004014:	4630      	mov	r0, r6
 8004016:	47c0      	blx	r8
 8004018:	3001      	adds	r0, #1
 800401a:	d0e6      	beq.n	8003fea <_printf_common+0xb2>
 800401c:	f109 0901 	add.w	r9, r9, #1
 8004020:	e7d8      	b.n	8003fd4 <_printf_common+0x9c>
	...

08004024 <_printf_i>:
 8004024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004028:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800402c:	460c      	mov	r4, r1
 800402e:	7e09      	ldrb	r1, [r1, #24]
 8004030:	b085      	sub	sp, #20
 8004032:	296e      	cmp	r1, #110	; 0x6e
 8004034:	4617      	mov	r7, r2
 8004036:	4606      	mov	r6, r0
 8004038:	4698      	mov	r8, r3
 800403a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800403c:	f000 80b3 	beq.w	80041a6 <_printf_i+0x182>
 8004040:	d822      	bhi.n	8004088 <_printf_i+0x64>
 8004042:	2963      	cmp	r1, #99	; 0x63
 8004044:	d036      	beq.n	80040b4 <_printf_i+0x90>
 8004046:	d80a      	bhi.n	800405e <_printf_i+0x3a>
 8004048:	2900      	cmp	r1, #0
 800404a:	f000 80b9 	beq.w	80041c0 <_printf_i+0x19c>
 800404e:	2958      	cmp	r1, #88	; 0x58
 8004050:	f000 8083 	beq.w	800415a <_printf_i+0x136>
 8004054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004058:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800405c:	e032      	b.n	80040c4 <_printf_i+0xa0>
 800405e:	2964      	cmp	r1, #100	; 0x64
 8004060:	d001      	beq.n	8004066 <_printf_i+0x42>
 8004062:	2969      	cmp	r1, #105	; 0x69
 8004064:	d1f6      	bne.n	8004054 <_printf_i+0x30>
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	0605      	lsls	r5, r0, #24
 800406c:	f103 0104 	add.w	r1, r3, #4
 8004070:	d52a      	bpl.n	80040c8 <_printf_i+0xa4>
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	da03      	bge.n	8004082 <_printf_i+0x5e>
 800407a:	222d      	movs	r2, #45	; 0x2d
 800407c:	425b      	negs	r3, r3
 800407e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004082:	486f      	ldr	r0, [pc, #444]	; (8004240 <_printf_i+0x21c>)
 8004084:	220a      	movs	r2, #10
 8004086:	e039      	b.n	80040fc <_printf_i+0xd8>
 8004088:	2973      	cmp	r1, #115	; 0x73
 800408a:	f000 809d 	beq.w	80041c8 <_printf_i+0x1a4>
 800408e:	d808      	bhi.n	80040a2 <_printf_i+0x7e>
 8004090:	296f      	cmp	r1, #111	; 0x6f
 8004092:	d020      	beq.n	80040d6 <_printf_i+0xb2>
 8004094:	2970      	cmp	r1, #112	; 0x70
 8004096:	d1dd      	bne.n	8004054 <_printf_i+0x30>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f043 0320 	orr.w	r3, r3, #32
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	e003      	b.n	80040aa <_printf_i+0x86>
 80040a2:	2975      	cmp	r1, #117	; 0x75
 80040a4:	d017      	beq.n	80040d6 <_printf_i+0xb2>
 80040a6:	2978      	cmp	r1, #120	; 0x78
 80040a8:	d1d4      	bne.n	8004054 <_printf_i+0x30>
 80040aa:	2378      	movs	r3, #120	; 0x78
 80040ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b0:	4864      	ldr	r0, [pc, #400]	; (8004244 <_printf_i+0x220>)
 80040b2:	e055      	b.n	8004160 <_printf_i+0x13c>
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	1d19      	adds	r1, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6011      	str	r1, [r2, #0]
 80040bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e08c      	b.n	80041e2 <_printf_i+0x1be>
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040d0:	bf18      	it	ne
 80040d2:	b21b      	sxthne	r3, r3
 80040d4:	e7cf      	b.n	8004076 <_printf_i+0x52>
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6010      	str	r0, [r2, #0]
 80040de:	0628      	lsls	r0, r5, #24
 80040e0:	d501      	bpl.n	80040e6 <_printf_i+0xc2>
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e002      	b.n	80040ec <_printf_i+0xc8>
 80040e6:	0668      	lsls	r0, r5, #25
 80040e8:	d5fb      	bpl.n	80040e2 <_printf_i+0xbe>
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	4854      	ldr	r0, [pc, #336]	; (8004240 <_printf_i+0x21c>)
 80040ee:	296f      	cmp	r1, #111	; 0x6f
 80040f0:	bf14      	ite	ne
 80040f2:	220a      	movne	r2, #10
 80040f4:	2208      	moveq	r2, #8
 80040f6:	2100      	movs	r1, #0
 80040f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040fc:	6865      	ldr	r5, [r4, #4]
 80040fe:	60a5      	str	r5, [r4, #8]
 8004100:	2d00      	cmp	r5, #0
 8004102:	f2c0 8095 	blt.w	8004230 <_printf_i+0x20c>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	f021 0104 	bic.w	r1, r1, #4
 800410c:	6021      	str	r1, [r4, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d13d      	bne.n	800418e <_printf_i+0x16a>
 8004112:	2d00      	cmp	r5, #0
 8004114:	f040 808e 	bne.w	8004234 <_printf_i+0x210>
 8004118:	4665      	mov	r5, ip
 800411a:	2a08      	cmp	r2, #8
 800411c:	d10b      	bne.n	8004136 <_printf_i+0x112>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	07db      	lsls	r3, r3, #31
 8004122:	d508      	bpl.n	8004136 <_printf_i+0x112>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	bfde      	ittt	le
 800412c:	2330      	movle	r3, #48	; 0x30
 800412e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004136:	ebac 0305 	sub.w	r3, ip, r5
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	f8cd 8000 	str.w	r8, [sp]
 8004140:	463b      	mov	r3, r7
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff fef6 	bl	8003f38 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14d      	bne.n	80041ec <_printf_i+0x1c8>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b005      	add	sp, #20
 8004156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800415a:	4839      	ldr	r0, [pc, #228]	; (8004240 <_printf_i+0x21c>)
 800415c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1d1d      	adds	r5, r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6015      	str	r5, [r2, #0]
 800416a:	060a      	lsls	r2, r1, #24
 800416c:	d50b      	bpl.n	8004186 <_printf_i+0x162>
 800416e:	07ca      	lsls	r2, r1, #31
 8004170:	bf44      	itt	mi
 8004172:	f041 0120 	orrmi.w	r1, r1, #32
 8004176:	6021      	strmi	r1, [r4, #0]
 8004178:	b91b      	cbnz	r3, 8004182 <_printf_i+0x15e>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	f022 0220 	bic.w	r2, r2, #32
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	e7b7      	b.n	80040f6 <_printf_i+0xd2>
 8004186:	064d      	lsls	r5, r1, #25
 8004188:	bf48      	it	mi
 800418a:	b29b      	uxthmi	r3, r3
 800418c:	e7ef      	b.n	800416e <_printf_i+0x14a>
 800418e:	4665      	mov	r5, ip
 8004190:	fbb3 f1f2 	udiv	r1, r3, r2
 8004194:	fb02 3311 	mls	r3, r2, r1, r3
 8004198:	5cc3      	ldrb	r3, [r0, r3]
 800419a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800419e:	460b      	mov	r3, r1
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d1f5      	bne.n	8004190 <_printf_i+0x16c>
 80041a4:	e7b9      	b.n	800411a <_printf_i+0xf6>
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	6825      	ldr	r5, [r4, #0]
 80041aa:	6961      	ldr	r1, [r4, #20]
 80041ac:	1d18      	adds	r0, r3, #4
 80041ae:	6010      	str	r0, [r2, #0]
 80041b0:	0628      	lsls	r0, r5, #24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	d501      	bpl.n	80041ba <_printf_i+0x196>
 80041b6:	6019      	str	r1, [r3, #0]
 80041b8:	e002      	b.n	80041c0 <_printf_i+0x19c>
 80041ba:	066a      	lsls	r2, r5, #25
 80041bc:	d5fb      	bpl.n	80041b6 <_printf_i+0x192>
 80041be:	8019      	strh	r1, [r3, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	4665      	mov	r5, ip
 80041c6:	e7b9      	b.n	800413c <_printf_i+0x118>
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	1d19      	adds	r1, r3, #4
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	681d      	ldr	r5, [r3, #0]
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4628      	mov	r0, r5
 80041d6:	f7fc f803 	bl	80001e0 <memchr>
 80041da:	b108      	cbz	r0, 80041e0 <_printf_i+0x1bc>
 80041dc:	1b40      	subs	r0, r0, r5
 80041de:	6060      	str	r0, [r4, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	2300      	movs	r3, #0
 80041e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ea:	e7a7      	b.n	800413c <_printf_i+0x118>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4639      	mov	r1, r7
 80041f2:	4630      	mov	r0, r6
 80041f4:	47c0      	blx	r8
 80041f6:	3001      	adds	r0, #1
 80041f8:	d0aa      	beq.n	8004150 <_printf_i+0x12c>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	079b      	lsls	r3, r3, #30
 80041fe:	d413      	bmi.n	8004228 <_printf_i+0x204>
 8004200:	68e0      	ldr	r0, [r4, #12]
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	4298      	cmp	r0, r3
 8004206:	bfb8      	it	lt
 8004208:	4618      	movlt	r0, r3
 800420a:	e7a3      	b.n	8004154 <_printf_i+0x130>
 800420c:	2301      	movs	r3, #1
 800420e:	464a      	mov	r2, r9
 8004210:	4639      	mov	r1, r7
 8004212:	4630      	mov	r0, r6
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d09a      	beq.n	8004150 <_printf_i+0x12c>
 800421a:	3501      	adds	r5, #1
 800421c:	68e3      	ldr	r3, [r4, #12]
 800421e:	9a03      	ldr	r2, [sp, #12]
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	42ab      	cmp	r3, r5
 8004224:	dcf2      	bgt.n	800420c <_printf_i+0x1e8>
 8004226:	e7eb      	b.n	8004200 <_printf_i+0x1dc>
 8004228:	2500      	movs	r5, #0
 800422a:	f104 0919 	add.w	r9, r4, #25
 800422e:	e7f5      	b.n	800421c <_printf_i+0x1f8>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ac      	bne.n	800418e <_printf_i+0x16a>
 8004234:	7803      	ldrb	r3, [r0, #0]
 8004236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423e:	e76c      	b.n	800411a <_printf_i+0xf6>
 8004240:	08022979 	.word	0x08022979
 8004244:	0802298a 	.word	0x0802298a

08004248 <memmove>:
 8004248:	4288      	cmp	r0, r1
 800424a:	b510      	push	{r4, lr}
 800424c:	eb01 0302 	add.w	r3, r1, r2
 8004250:	d807      	bhi.n	8004262 <memmove+0x1a>
 8004252:	1e42      	subs	r2, r0, #1
 8004254:	4299      	cmp	r1, r3
 8004256:	d00a      	beq.n	800426e <memmove+0x26>
 8004258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800425c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004260:	e7f8      	b.n	8004254 <memmove+0xc>
 8004262:	4283      	cmp	r3, r0
 8004264:	d9f5      	bls.n	8004252 <memmove+0xa>
 8004266:	1881      	adds	r1, r0, r2
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	42d3      	cmn	r3, r2
 800426c:	d100      	bne.n	8004270 <memmove+0x28>
 800426e:	bd10      	pop	{r4, pc}
 8004270:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004274:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004278:	e7f7      	b.n	800426a <memmove+0x22>
	...

0800427c <_free_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4605      	mov	r5, r0
 8004280:	2900      	cmp	r1, #0
 8004282:	d045      	beq.n	8004310 <_free_r+0x94>
 8004284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004288:	1f0c      	subs	r4, r1, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	18e4      	addlt	r4, r4, r3
 8004290:	f000 f8d2 	bl	8004438 <__malloc_lock>
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <_free_r+0x98>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	4610      	mov	r0, r2
 800429a:	b933      	cbnz	r3, 80042aa <_free_r+0x2e>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f000 b8c8 	b.w	800443a <__malloc_unlock>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d90c      	bls.n	80042c8 <_free_r+0x4c>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	1862      	adds	r2, r4, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bf04      	itt	eq
 80042b6:	681a      	ldreq	r2, [r3, #0]
 80042b8:	685b      	ldreq	r3, [r3, #4]
 80042ba:	6063      	str	r3, [r4, #4]
 80042bc:	bf04      	itt	eq
 80042be:	1852      	addeq	r2, r2, r1
 80042c0:	6022      	streq	r2, [r4, #0]
 80042c2:	6004      	str	r4, [r0, #0]
 80042c4:	e7ec      	b.n	80042a0 <_free_r+0x24>
 80042c6:	4613      	mov	r3, r2
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	b10a      	cbz	r2, 80042d0 <_free_r+0x54>
 80042cc:	42a2      	cmp	r2, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x4a>
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	1858      	adds	r0, r3, r1
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x74>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	4401      	add	r1, r0
 80042dc:	1858      	adds	r0, r3, r1
 80042de:	4282      	cmp	r2, r0
 80042e0:	6019      	str	r1, [r3, #0]
 80042e2:	d1dd      	bne.n	80042a0 <_free_r+0x24>
 80042e4:	6810      	ldr	r0, [r2, #0]
 80042e6:	6852      	ldr	r2, [r2, #4]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	4401      	add	r1, r0
 80042ec:	6019      	str	r1, [r3, #0]
 80042ee:	e7d7      	b.n	80042a0 <_free_r+0x24>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x7c>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d3      	b.n	80042a0 <_free_r+0x24>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428a      	cmp	r2, r1
 80042fe:	bf04      	itt	eq
 8004300:	6811      	ldreq	r1, [r2, #0]
 8004302:	6852      	ldreq	r2, [r2, #4]
 8004304:	6062      	str	r2, [r4, #4]
 8004306:	bf04      	itt	eq
 8004308:	1809      	addeq	r1, r1, r0
 800430a:	6021      	streq	r1, [r4, #0]
 800430c:	605c      	str	r4, [r3, #4]
 800430e:	e7c7      	b.n	80042a0 <_free_r+0x24>
 8004310:	bd38      	pop	{r3, r4, r5, pc}
 8004312:	bf00      	nop
 8004314:	20000154 	.word	0x20000154

08004318 <_malloc_r>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	1ccd      	adds	r5, r1, #3
 800431c:	f025 0503 	bic.w	r5, r5, #3
 8004320:	3508      	adds	r5, #8
 8004322:	2d0c      	cmp	r5, #12
 8004324:	bf38      	it	cc
 8004326:	250c      	movcc	r5, #12
 8004328:	2d00      	cmp	r5, #0
 800432a:	4606      	mov	r6, r0
 800432c:	db01      	blt.n	8004332 <_malloc_r+0x1a>
 800432e:	42a9      	cmp	r1, r5
 8004330:	d903      	bls.n	800433a <_malloc_r+0x22>
 8004332:	230c      	movs	r3, #12
 8004334:	6033      	str	r3, [r6, #0]
 8004336:	2000      	movs	r0, #0
 8004338:	bd70      	pop	{r4, r5, r6, pc}
 800433a:	f000 f87d 	bl	8004438 <__malloc_lock>
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <_malloc_r+0xac>)
 8004340:	6814      	ldr	r4, [r2, #0]
 8004342:	4621      	mov	r1, r4
 8004344:	b991      	cbnz	r1, 800436c <_malloc_r+0x54>
 8004346:	4c20      	ldr	r4, [pc, #128]	; (80043c8 <_malloc_r+0xb0>)
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	b91b      	cbnz	r3, 8004354 <_malloc_r+0x3c>
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f863 	bl	8004418 <_sbrk_r>
 8004352:	6020      	str	r0, [r4, #0]
 8004354:	4629      	mov	r1, r5
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f85e 	bl	8004418 <_sbrk_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d124      	bne.n	80043aa <_malloc_r+0x92>
 8004360:	230c      	movs	r3, #12
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f868 	bl	800443a <__malloc_unlock>
 800436a:	e7e4      	b.n	8004336 <_malloc_r+0x1e>
 800436c:	680b      	ldr	r3, [r1, #0]
 800436e:	1b5b      	subs	r3, r3, r5
 8004370:	d418      	bmi.n	80043a4 <_malloc_r+0x8c>
 8004372:	2b0b      	cmp	r3, #11
 8004374:	d90f      	bls.n	8004396 <_malloc_r+0x7e>
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	50cd      	str	r5, [r1, r3]
 800437a:	18cc      	adds	r4, r1, r3
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f85c 	bl	800443a <__malloc_unlock>
 8004382:	f104 000b 	add.w	r0, r4, #11
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	f020 0007 	bic.w	r0, r0, #7
 800438c:	1ac3      	subs	r3, r0, r3
 800438e:	d0d3      	beq.n	8004338 <_malloc_r+0x20>
 8004390:	425a      	negs	r2, r3
 8004392:	50e2      	str	r2, [r4, r3]
 8004394:	e7d0      	b.n	8004338 <_malloc_r+0x20>
 8004396:	428c      	cmp	r4, r1
 8004398:	684b      	ldr	r3, [r1, #4]
 800439a:	bf16      	itet	ne
 800439c:	6063      	strne	r3, [r4, #4]
 800439e:	6013      	streq	r3, [r2, #0]
 80043a0:	460c      	movne	r4, r1
 80043a2:	e7eb      	b.n	800437c <_malloc_r+0x64>
 80043a4:	460c      	mov	r4, r1
 80043a6:	6849      	ldr	r1, [r1, #4]
 80043a8:	e7cc      	b.n	8004344 <_malloc_r+0x2c>
 80043aa:	1cc4      	adds	r4, r0, #3
 80043ac:	f024 0403 	bic.w	r4, r4, #3
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d005      	beq.n	80043c0 <_malloc_r+0xa8>
 80043b4:	1a21      	subs	r1, r4, r0
 80043b6:	4630      	mov	r0, r6
 80043b8:	f000 f82e 	bl	8004418 <_sbrk_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	d0cf      	beq.n	8004360 <_malloc_r+0x48>
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	e7db      	b.n	800437c <_malloc_r+0x64>
 80043c4:	20000154 	.word	0x20000154
 80043c8:	20000158 	.word	0x20000158

080043cc <_realloc_r>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	4607      	mov	r7, r0
 80043d0:	4614      	mov	r4, r2
 80043d2:	460e      	mov	r6, r1
 80043d4:	b921      	cbnz	r1, 80043e0 <_realloc_r+0x14>
 80043d6:	4611      	mov	r1, r2
 80043d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043dc:	f7ff bf9c 	b.w	8004318 <_malloc_r>
 80043e0:	b922      	cbnz	r2, 80043ec <_realloc_r+0x20>
 80043e2:	f7ff ff4b 	bl	800427c <_free_r>
 80043e6:	4625      	mov	r5, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	f000 f826 	bl	800443c <_malloc_usable_size_r>
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d20f      	bcs.n	8004414 <_realloc_r+0x48>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4638      	mov	r0, r7
 80043f8:	f7ff ff8e 	bl	8004318 <_malloc_r>
 80043fc:	4605      	mov	r5, r0
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0f2      	beq.n	80043e8 <_realloc_r+0x1c>
 8004402:	4631      	mov	r1, r6
 8004404:	4622      	mov	r2, r4
 8004406:	f7ff fc11 	bl	8003c2c <memcpy>
 800440a:	4631      	mov	r1, r6
 800440c:	4638      	mov	r0, r7
 800440e:	f7ff ff35 	bl	800427c <_free_r>
 8004412:	e7e9      	b.n	80043e8 <_realloc_r+0x1c>
 8004414:	4635      	mov	r5, r6
 8004416:	e7e7      	b.n	80043e8 <_realloc_r+0x1c>

08004418 <_sbrk_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4c06      	ldr	r4, [pc, #24]	; (8004434 <_sbrk_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4605      	mov	r5, r0
 8004420:	4608      	mov	r0, r1
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	f7fd fd8c 	bl	8001f40 <_sbrk>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_sbrk_r+0x1a>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	b103      	cbz	r3, 8004432 <_sbrk_r+0x1a>
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	200001fc 	.word	0x200001fc

08004438 <__malloc_lock>:
 8004438:	4770      	bx	lr

0800443a <__malloc_unlock>:
 800443a:	4770      	bx	lr

0800443c <_malloc_usable_size_r>:
 800443c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004440:	1f18      	subs	r0, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfbc      	itt	lt
 8004446:	580b      	ldrlt	r3, [r1, r0]
 8004448:	18c0      	addlt	r0, r0, r3
 800444a:	4770      	bx	lr

0800444c <cosf>:
 800444c:	ee10 3a10 	vmov	r3, s0
 8004450:	b507      	push	{r0, r1, r2, lr}
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <cosf+0x78>)
 8004454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004458:	4293      	cmp	r3, r2
 800445a:	dc04      	bgt.n	8004466 <cosf+0x1a>
 800445c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80044c8 <cosf+0x7c>
 8004460:	f000 f9a2 	bl	80047a8 <__kernel_cosf>
 8004464:	e004      	b.n	8004470 <cosf+0x24>
 8004466:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800446a:	db04      	blt.n	8004476 <cosf+0x2a>
 800446c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004470:	b003      	add	sp, #12
 8004472:	f85d fb04 	ldr.w	pc, [sp], #4
 8004476:	4668      	mov	r0, sp
 8004478:	f000 f86a 	bl	8004550 <__ieee754_rem_pio2f>
 800447c:	f000 0003 	and.w	r0, r0, #3
 8004480:	2801      	cmp	r0, #1
 8004482:	d007      	beq.n	8004494 <cosf+0x48>
 8004484:	2802      	cmp	r0, #2
 8004486:	d00e      	beq.n	80044a6 <cosf+0x5a>
 8004488:	b9a0      	cbnz	r0, 80044b4 <cosf+0x68>
 800448a:	eddd 0a01 	vldr	s1, [sp, #4]
 800448e:	ed9d 0a00 	vldr	s0, [sp]
 8004492:	e7e5      	b.n	8004460 <cosf+0x14>
 8004494:	eddd 0a01 	vldr	s1, [sp, #4]
 8004498:	ed9d 0a00 	vldr	s0, [sp]
 800449c:	f000 fc64 	bl	8004d68 <__kernel_sinf>
 80044a0:	eeb1 0a40 	vneg.f32	s0, s0
 80044a4:	e7e4      	b.n	8004470 <cosf+0x24>
 80044a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80044aa:	ed9d 0a00 	vldr	s0, [sp]
 80044ae:	f000 f97b 	bl	80047a8 <__kernel_cosf>
 80044b2:	e7f5      	b.n	80044a0 <cosf+0x54>
 80044b4:	2001      	movs	r0, #1
 80044b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80044ba:	ed9d 0a00 	vldr	s0, [sp]
 80044be:	f000 fc53 	bl	8004d68 <__kernel_sinf>
 80044c2:	e7d5      	b.n	8004470 <cosf+0x24>
 80044c4:	3f490fd8 	.word	0x3f490fd8
 80044c8:	00000000 	.word	0x00000000

080044cc <sinf>:
 80044cc:	ee10 3a10 	vmov	r3, s0
 80044d0:	b507      	push	{r0, r1, r2, lr}
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <sinf+0x7c>)
 80044d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d8:	4293      	cmp	r3, r2
 80044da:	dc05      	bgt.n	80044e8 <sinf+0x1c>
 80044dc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800454c <sinf+0x80>
 80044e0:	2000      	movs	r0, #0
 80044e2:	f000 fc41 	bl	8004d68 <__kernel_sinf>
 80044e6:	e004      	b.n	80044f2 <sinf+0x26>
 80044e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80044ec:	db04      	blt.n	80044f8 <sinf+0x2c>
 80044ee:	ee30 0a40 	vsub.f32	s0, s0, s0
 80044f2:	b003      	add	sp, #12
 80044f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80044f8:	4668      	mov	r0, sp
 80044fa:	f000 f829 	bl	8004550 <__ieee754_rem_pio2f>
 80044fe:	f000 0003 	and.w	r0, r0, #3
 8004502:	2801      	cmp	r0, #1
 8004504:	d008      	beq.n	8004518 <sinf+0x4c>
 8004506:	2802      	cmp	r0, #2
 8004508:	d00d      	beq.n	8004526 <sinf+0x5a>
 800450a:	b9b0      	cbnz	r0, 800453a <sinf+0x6e>
 800450c:	2001      	movs	r0, #1
 800450e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004512:	ed9d 0a00 	vldr	s0, [sp]
 8004516:	e7e4      	b.n	80044e2 <sinf+0x16>
 8004518:	eddd 0a01 	vldr	s1, [sp, #4]
 800451c:	ed9d 0a00 	vldr	s0, [sp]
 8004520:	f000 f942 	bl	80047a8 <__kernel_cosf>
 8004524:	e7e5      	b.n	80044f2 <sinf+0x26>
 8004526:	2001      	movs	r0, #1
 8004528:	eddd 0a01 	vldr	s1, [sp, #4]
 800452c:	ed9d 0a00 	vldr	s0, [sp]
 8004530:	f000 fc1a 	bl	8004d68 <__kernel_sinf>
 8004534:	eeb1 0a40 	vneg.f32	s0, s0
 8004538:	e7db      	b.n	80044f2 <sinf+0x26>
 800453a:	eddd 0a01 	vldr	s1, [sp, #4]
 800453e:	ed9d 0a00 	vldr	s0, [sp]
 8004542:	f000 f931 	bl	80047a8 <__kernel_cosf>
 8004546:	e7f5      	b.n	8004534 <sinf+0x68>
 8004548:	3f490fd8 	.word	0x3f490fd8
 800454c:	00000000 	.word	0x00000000

08004550 <__ieee754_rem_pio2f>:
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	ee10 6a10 	vmov	r6, s0
 8004556:	4b86      	ldr	r3, [pc, #536]	; (8004770 <__ieee754_rem_pio2f+0x220>)
 8004558:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800455c:	429c      	cmp	r4, r3
 800455e:	b087      	sub	sp, #28
 8004560:	4605      	mov	r5, r0
 8004562:	dc05      	bgt.n	8004570 <__ieee754_rem_pio2f+0x20>
 8004564:	2300      	movs	r3, #0
 8004566:	ed85 0a00 	vstr	s0, [r5]
 800456a:	6043      	str	r3, [r0, #4]
 800456c:	2000      	movs	r0, #0
 800456e:	e020      	b.n	80045b2 <__ieee754_rem_pio2f+0x62>
 8004570:	4b80      	ldr	r3, [pc, #512]	; (8004774 <__ieee754_rem_pio2f+0x224>)
 8004572:	429c      	cmp	r4, r3
 8004574:	dc38      	bgt.n	80045e8 <__ieee754_rem_pio2f+0x98>
 8004576:	2e00      	cmp	r6, #0
 8004578:	f024 040f 	bic.w	r4, r4, #15
 800457c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004778 <__ieee754_rem_pio2f+0x228>
 8004580:	4b7e      	ldr	r3, [pc, #504]	; (800477c <__ieee754_rem_pio2f+0x22c>)
 8004582:	dd18      	ble.n	80045b6 <__ieee754_rem_pio2f+0x66>
 8004584:	429c      	cmp	r4, r3
 8004586:	ee70 7a47 	vsub.f32	s15, s0, s14
 800458a:	bf09      	itett	eq
 800458c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004780 <__ieee754_rem_pio2f+0x230>
 8004590:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004784 <__ieee754_rem_pio2f+0x234>
 8004594:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004598:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004788 <__ieee754_rem_pio2f+0x238>
 800459c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80045a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045a4:	edc0 6a00 	vstr	s13, [r0]
 80045a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ac:	edc0 7a01 	vstr	s15, [r0, #4]
 80045b0:	2001      	movs	r0, #1
 80045b2:	b007      	add	sp, #28
 80045b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b6:	429c      	cmp	r4, r3
 80045b8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80045bc:	bf09      	itett	eq
 80045be:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004780 <__ieee754_rem_pio2f+0x230>
 80045c2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004784 <__ieee754_rem_pio2f+0x234>
 80045c6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80045ca:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004788 <__ieee754_rem_pio2f+0x238>
 80045ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 80045d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045d6:	edc0 6a00 	vstr	s13, [r0]
 80045da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045de:	edc0 7a01 	vstr	s15, [r0, #4]
 80045e2:	f04f 30ff 	mov.w	r0, #4294967295
 80045e6:	e7e4      	b.n	80045b2 <__ieee754_rem_pio2f+0x62>
 80045e8:	4b68      	ldr	r3, [pc, #416]	; (800478c <__ieee754_rem_pio2f+0x23c>)
 80045ea:	429c      	cmp	r4, r3
 80045ec:	dc71      	bgt.n	80046d2 <__ieee754_rem_pio2f+0x182>
 80045ee:	f000 fc03 	bl	8004df8 <fabsf>
 80045f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004790 <__ieee754_rem_pio2f+0x240>
 80045f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80045fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80045fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004602:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004606:	ee17 0a90 	vmov	r0, s15
 800460a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004778 <__ieee754_rem_pio2f+0x228>
 800460e:	eeb1 7a46 	vneg.f32	s14, s12
 8004612:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004616:	281f      	cmp	r0, #31
 8004618:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004784 <__ieee754_rem_pio2f+0x234>
 800461c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004620:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004624:	ee16 3a90 	vmov	r3, s13
 8004628:	dc1c      	bgt.n	8004664 <__ieee754_rem_pio2f+0x114>
 800462a:	1e47      	subs	r7, r0, #1
 800462c:	4959      	ldr	r1, [pc, #356]	; (8004794 <__ieee754_rem_pio2f+0x244>)
 800462e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004632:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004636:	428a      	cmp	r2, r1
 8004638:	d014      	beq.n	8004664 <__ieee754_rem_pio2f+0x114>
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	ed95 7a00 	vldr	s14, [r5]
 8004640:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004644:	2e00      	cmp	r6, #0
 8004646:	ee30 0a67 	vsub.f32	s0, s0, s15
 800464a:	ed85 0a01 	vstr	s0, [r5, #4]
 800464e:	dab0      	bge.n	80045b2 <__ieee754_rem_pio2f+0x62>
 8004650:	eeb1 7a47 	vneg.f32	s14, s14
 8004654:	eeb1 0a40 	vneg.f32	s0, s0
 8004658:	ed85 7a00 	vstr	s14, [r5]
 800465c:	ed85 0a01 	vstr	s0, [r5, #4]
 8004660:	4240      	negs	r0, r0
 8004662:	e7a6      	b.n	80045b2 <__ieee754_rem_pio2f+0x62>
 8004664:	15e4      	asrs	r4, r4, #23
 8004666:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800466a:	1aa2      	subs	r2, r4, r2
 800466c:	2a08      	cmp	r2, #8
 800466e:	dde4      	ble.n	800463a <__ieee754_rem_pio2f+0xea>
 8004670:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004780 <__ieee754_rem_pio2f+0x230>
 8004674:	eef0 6a40 	vmov.f32	s13, s0
 8004678:	eee7 6a27 	vfma.f32	s13, s14, s15
 800467c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004680:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004684:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004788 <__ieee754_rem_pio2f+0x238>
 8004688:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800468c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004690:	eef0 7a40 	vmov.f32	s15, s0
 8004694:	ee15 3a90 	vmov	r3, s11
 8004698:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800469c:	1aa4      	subs	r4, r4, r2
 800469e:	2c19      	cmp	r4, #25
 80046a0:	dc04      	bgt.n	80046ac <__ieee754_rem_pio2f+0x15c>
 80046a2:	edc5 5a00 	vstr	s11, [r5]
 80046a6:	eeb0 0a66 	vmov.f32	s0, s13
 80046aa:	e7c7      	b.n	800463c <__ieee754_rem_pio2f+0xec>
 80046ac:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004798 <__ieee754_rem_pio2f+0x248>
 80046b0:	eeb0 0a66 	vmov.f32	s0, s13
 80046b4:	eea7 0a25 	vfma.f32	s0, s14, s11
 80046b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80046bc:	eee7 7a25 	vfma.f32	s15, s14, s11
 80046c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800479c <__ieee754_rem_pio2f+0x24c>
 80046c4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80046c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80046cc:	ed85 7a00 	vstr	s14, [r5]
 80046d0:	e7b4      	b.n	800463c <__ieee754_rem_pio2f+0xec>
 80046d2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80046d6:	db06      	blt.n	80046e6 <__ieee754_rem_pio2f+0x196>
 80046d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80046dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80046e0:	edc0 7a00 	vstr	s15, [r0]
 80046e4:	e742      	b.n	800456c <__ieee754_rem_pio2f+0x1c>
 80046e6:	15e2      	asrs	r2, r4, #23
 80046e8:	3a86      	subs	r2, #134	; 0x86
 80046ea:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80046f6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80047a0 <__ieee754_rem_pio2f+0x250>
 80046fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004702:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004706:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800470a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800470e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004716:	ed8d 7a04 	vstr	s14, [sp, #16]
 800471a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800471e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	edcd 7a05 	vstr	s15, [sp, #20]
 800472a:	d11e      	bne.n	800476a <__ieee754_rem_pio2f+0x21a>
 800472c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2302      	movne	r3, #2
 800473a:	491a      	ldr	r1, [pc, #104]	; (80047a4 <__ieee754_rem_pio2f+0x254>)
 800473c:	9101      	str	r1, [sp, #4]
 800473e:	2102      	movs	r1, #2
 8004740:	9100      	str	r1, [sp, #0]
 8004742:	a803      	add	r0, sp, #12
 8004744:	4629      	mov	r1, r5
 8004746:	f000 f88d 	bl	8004864 <__kernel_rem_pio2f>
 800474a:	2e00      	cmp	r6, #0
 800474c:	f6bf af31 	bge.w	80045b2 <__ieee754_rem_pio2f+0x62>
 8004750:	edd5 7a00 	vldr	s15, [r5]
 8004754:	eef1 7a67 	vneg.f32	s15, s15
 8004758:	edc5 7a00 	vstr	s15, [r5]
 800475c:	edd5 7a01 	vldr	s15, [r5, #4]
 8004760:	eef1 7a67 	vneg.f32	s15, s15
 8004764:	edc5 7a01 	vstr	s15, [r5, #4]
 8004768:	e77a      	b.n	8004660 <__ieee754_rem_pio2f+0x110>
 800476a:	2303      	movs	r3, #3
 800476c:	e7e5      	b.n	800473a <__ieee754_rem_pio2f+0x1ea>
 800476e:	bf00      	nop
 8004770:	3f490fd8 	.word	0x3f490fd8
 8004774:	4016cbe3 	.word	0x4016cbe3
 8004778:	3fc90f80 	.word	0x3fc90f80
 800477c:	3fc90fd0 	.word	0x3fc90fd0
 8004780:	37354400 	.word	0x37354400
 8004784:	37354443 	.word	0x37354443
 8004788:	2e85a308 	.word	0x2e85a308
 800478c:	43490f80 	.word	0x43490f80
 8004790:	3f22f984 	.word	0x3f22f984
 8004794:	0802299c 	.word	0x0802299c
 8004798:	2e85a300 	.word	0x2e85a300
 800479c:	248d3132 	.word	0x248d3132
 80047a0:	43800000 	.word	0x43800000
 80047a4:	08022a1c 	.word	0x08022a1c

080047a8 <__kernel_cosf>:
 80047a8:	ee10 3a10 	vmov	r3, s0
 80047ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b8:	da05      	bge.n	80047c6 <__kernel_cosf+0x1e>
 80047ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047be:	ee17 2a90 	vmov	r2, s15
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d03b      	beq.n	800483e <__kernel_cosf+0x96>
 80047c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80047ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004844 <__kernel_cosf+0x9c>
 80047d2:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <__kernel_cosf+0xa0>)
 80047d4:	ee66 7a07 	vmul.f32	s15, s12, s14
 80047d8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800484c <__kernel_cosf+0xa4>
 80047dc:	eea6 7a25 	vfma.f32	s14, s12, s11
 80047e0:	4293      	cmp	r3, r2
 80047e2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004850 <__kernel_cosf+0xa8>
 80047e6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80047ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004854 <__kernel_cosf+0xac>
 80047ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 80047f2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004858 <__kernel_cosf+0xb0>
 80047f6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80047fa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800485c <__kernel_cosf+0xb4>
 80047fe:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004802:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004806:	ee27 7a06 	vmul.f32	s14, s14, s12
 800480a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800480e:	dc04      	bgt.n	800481a <__kernel_cosf+0x72>
 8004810:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8004814:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004818:	4770      	bx	lr
 800481a:	4a11      	ldr	r2, [pc, #68]	; (8004860 <__kernel_cosf+0xb8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	bfda      	itte	le
 8004820:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004824:	ee07 3a10 	vmovle	s14, r3
 8004828:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800482c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004830:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004834:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004838:	ee30 0a67 	vsub.f32	s0, s0, s15
 800483c:	4770      	bx	lr
 800483e:	eeb0 0a66 	vmov.f32	s0, s13
 8004842:	4770      	bx	lr
 8004844:	ad47d74e 	.word	0xad47d74e
 8004848:	3e999999 	.word	0x3e999999
 800484c:	310f74f6 	.word	0x310f74f6
 8004850:	b493f27c 	.word	0xb493f27c
 8004854:	37d00d01 	.word	0x37d00d01
 8004858:	bab60b61 	.word	0xbab60b61
 800485c:	3d2aaaab 	.word	0x3d2aaaab
 8004860:	3f480000 	.word	0x3f480000

08004864 <__kernel_rem_pio2f>:
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	ed2d 8b04 	vpush	{d8-d9}
 800486c:	b0d7      	sub	sp, #348	; 0x15c
 800486e:	469b      	mov	fp, r3
 8004870:	460e      	mov	r6, r1
 8004872:	4bbe      	ldr	r3, [pc, #760]	; (8004b6c <__kernel_rem_pio2f+0x308>)
 8004874:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004876:	9002      	str	r0, [sp, #8]
 8004878:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800487c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800487e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004882:	1ed1      	subs	r1, r2, #3
 8004884:	2308      	movs	r3, #8
 8004886:	fb91 f1f3 	sdiv	r1, r1, r3
 800488a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800488e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004892:	1c4c      	adds	r4, r1, #1
 8004894:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004898:	eba1 050a 	sub.w	r5, r1, sl
 800489c:	aa1a      	add	r2, sp, #104	; 0x68
 800489e:	eb09 070a 	add.w	r7, r9, sl
 80048a2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80048a6:	4696      	mov	lr, r2
 80048a8:	2300      	movs	r3, #0
 80048aa:	42bb      	cmp	r3, r7
 80048ac:	dd0f      	ble.n	80048ce <__kernel_rem_pio2f+0x6a>
 80048ae:	af42      	add	r7, sp, #264	; 0x108
 80048b0:	2200      	movs	r2, #0
 80048b2:	454a      	cmp	r2, r9
 80048b4:	dc27      	bgt.n	8004906 <__kernel_rem_pio2f+0xa2>
 80048b6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80048ba:	eb0b 0302 	add.w	r3, fp, r2
 80048be:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80048c2:	9d02      	ldr	r5, [sp, #8]
 80048c4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8004b7c <__kernel_rem_pio2f+0x318>
 80048c8:	f04f 0c00 	mov.w	ip, #0
 80048cc:	e015      	b.n	80048fa <__kernel_rem_pio2f+0x96>
 80048ce:	42dd      	cmn	r5, r3
 80048d0:	bf5d      	ittte	pl
 80048d2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80048d6:	ee07 2a90 	vmovpl	s15, r2
 80048da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80048de:	eef0 7a47 	vmovmi.f32	s15, s14
 80048e2:	ecee 7a01 	vstmia	lr!, {s15}
 80048e6:	3301      	adds	r3, #1
 80048e8:	e7df      	b.n	80048aa <__kernel_rem_pio2f+0x46>
 80048ea:	ecf5 6a01 	vldmia	r5!, {s13}
 80048ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80048f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80048f6:	f10c 0c01 	add.w	ip, ip, #1
 80048fa:	45d4      	cmp	ip, sl
 80048fc:	ddf5      	ble.n	80048ea <__kernel_rem_pio2f+0x86>
 80048fe:	ece7 7a01 	vstmia	r7!, {s15}
 8004902:	3201      	adds	r2, #1
 8004904:	e7d5      	b.n	80048b2 <__kernel_rem_pio2f+0x4e>
 8004906:	ab06      	add	r3, sp, #24
 8004908:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8004b78 <__kernel_rem_pio2f+0x314>
 8004912:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004b74 <__kernel_rem_pio2f+0x310>
 8004916:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800491a:	9303      	str	r3, [sp, #12]
 800491c:	464d      	mov	r5, r9
 800491e:	ab56      	add	r3, sp, #344	; 0x158
 8004920:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004924:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004928:	3f01      	subs	r7, #1
 800492a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800492e:	00bf      	lsls	r7, r7, #2
 8004930:	ab56      	add	r3, sp, #344	; 0x158
 8004932:	19da      	adds	r2, r3, r7
 8004934:	3a4c      	subs	r2, #76	; 0x4c
 8004936:	2300      	movs	r3, #0
 8004938:	1ae9      	subs	r1, r5, r3
 800493a:	2900      	cmp	r1, #0
 800493c:	dc4c      	bgt.n	80049d8 <__kernel_rem_pio2f+0x174>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 faa4 	bl	8004e8c <scalbnf>
 8004944:	eeb0 8a40 	vmov.f32	s16, s0
 8004948:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800494c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004950:	f000 fa5a 	bl	8004e08 <floorf>
 8004954:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004958:	eea0 8a67 	vfms.f32	s16, s0, s15
 800495c:	2c00      	cmp	r4, #0
 800495e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004962:	edcd 7a01 	vstr	s15, [sp, #4]
 8004966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800496a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800496e:	dd48      	ble.n	8004a02 <__kernel_rem_pio2f+0x19e>
 8004970:	1e69      	subs	r1, r5, #1
 8004972:	ab06      	add	r3, sp, #24
 8004974:	f1c4 0008 	rsb	r0, r4, #8
 8004978:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800497c:	9a01      	ldr	r2, [sp, #4]
 800497e:	fa4c f300 	asr.w	r3, ip, r0
 8004982:	441a      	add	r2, r3
 8004984:	4083      	lsls	r3, r0
 8004986:	9201      	str	r2, [sp, #4]
 8004988:	ebac 0203 	sub.w	r2, ip, r3
 800498c:	ab06      	add	r3, sp, #24
 800498e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004992:	f1c4 0307 	rsb	r3, r4, #7
 8004996:	fa42 f803 	asr.w	r8, r2, r3
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	dd41      	ble.n	8004a24 <__kernel_rem_pio2f+0x1c0>
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	2000      	movs	r0, #0
 80049a4:	3301      	adds	r3, #1
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	4601      	mov	r1, r0
 80049aa:	4285      	cmp	r5, r0
 80049ac:	dc6d      	bgt.n	8004a8a <__kernel_rem_pio2f+0x226>
 80049ae:	2c00      	cmp	r4, #0
 80049b0:	dd04      	ble.n	80049bc <__kernel_rem_pio2f+0x158>
 80049b2:	2c01      	cmp	r4, #1
 80049b4:	d07e      	beq.n	8004ab4 <__kernel_rem_pio2f+0x250>
 80049b6:	2c02      	cmp	r4, #2
 80049b8:	f000 8086 	beq.w	8004ac8 <__kernel_rem_pio2f+0x264>
 80049bc:	f1b8 0f02 	cmp.w	r8, #2
 80049c0:	d130      	bne.n	8004a24 <__kernel_rem_pio2f+0x1c0>
 80049c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80049ca:	b359      	cbz	r1, 8004a24 <__kernel_rem_pio2f+0x1c0>
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fa5d 	bl	8004e8c <scalbnf>
 80049d2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80049d6:	e025      	b.n	8004a24 <__kernel_rem_pio2f+0x1c0>
 80049d8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80049dc:	a806      	add	r0, sp, #24
 80049de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80049ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80049ee:	ee10 1a10 	vmov	r1, s0
 80049f2:	ed32 0a01 	vldmdb	r2!, {s0}
 80049f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80049fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80049fe:	3301      	adds	r3, #1
 8004a00:	e79a      	b.n	8004938 <__kernel_rem_pio2f+0xd4>
 8004a02:	d106      	bne.n	8004a12 <__kernel_rem_pio2f+0x1ae>
 8004a04:	1e6b      	subs	r3, r5, #1
 8004a06:	aa06      	add	r2, sp, #24
 8004a08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a0c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8004a10:	e7c3      	b.n	800499a <__kernel_rem_pio2f+0x136>
 8004a12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a16:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	da31      	bge.n	8004a84 <__kernel_rem_pio2f+0x220>
 8004a20:	f04f 0800 	mov.w	r8, #0
 8004a24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2c:	f040 80a8 	bne.w	8004b80 <__kernel_rem_pio2f+0x31c>
 8004a30:	1e6b      	subs	r3, r5, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	4548      	cmp	r0, r9
 8004a38:	da4d      	bge.n	8004ad6 <__kernel_rem_pio2f+0x272>
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	f000 8087 	beq.w	8004b4e <__kernel_rem_pio2f+0x2ea>
 8004a40:	aa06      	add	r2, sp, #24
 8004a42:	3c08      	subs	r4, #8
 8004a44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	f000 808d 	beq.w	8004b68 <__kernel_rem_pio2f+0x304>
 8004a4e:	4620      	mov	r0, r4
 8004a50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a54:	9302      	str	r3, [sp, #8]
 8004a56:	f000 fa19 	bl	8004e8c <scalbnf>
 8004a5a:	9b02      	ldr	r3, [sp, #8]
 8004a5c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004b78 <__kernel_rem_pio2f+0x314>
 8004a60:	0099      	lsls	r1, r3, #2
 8004a62:	aa42      	add	r2, sp, #264	; 0x108
 8004a64:	1850      	adds	r0, r2, r1
 8004a66:	1d05      	adds	r5, r0, #4
 8004a68:	461c      	mov	r4, r3
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	f280 80b8 	bge.w	8004be0 <__kernel_rem_pio2f+0x37c>
 8004a70:	2500      	movs	r5, #0
 8004a72:	1b5c      	subs	r4, r3, r5
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	f2c0 80d8 	blt.w	8004c2a <__kernel_rem_pio2f+0x3c6>
 8004a7a:	4f3d      	ldr	r7, [pc, #244]	; (8004b70 <__kernel_rem_pio2f+0x30c>)
 8004a7c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004a80:	2400      	movs	r4, #0
 8004a82:	e0c6      	b.n	8004c12 <__kernel_rem_pio2f+0x3ae>
 8004a84:	f04f 0802 	mov.w	r8, #2
 8004a88:	e78a      	b.n	80049a0 <__kernel_rem_pio2f+0x13c>
 8004a8a:	ab06      	add	r3, sp, #24
 8004a8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004a90:	b949      	cbnz	r1, 8004aa6 <__kernel_rem_pio2f+0x242>
 8004a92:	b12b      	cbz	r3, 8004aa0 <__kernel_rem_pio2f+0x23c>
 8004a94:	aa06      	add	r2, sp, #24
 8004a96:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004a9a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	e781      	b.n	80049aa <__kernel_rem_pio2f+0x146>
 8004aa6:	aa06      	add	r2, sp, #24
 8004aa8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004aac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	e7f5      	b.n	8004aa0 <__kernel_rem_pio2f+0x23c>
 8004ab4:	1e68      	subs	r0, r5, #1
 8004ab6:	ab06      	add	r3, sp, #24
 8004ab8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac0:	aa06      	add	r2, sp, #24
 8004ac2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004ac6:	e779      	b.n	80049bc <__kernel_rem_pio2f+0x158>
 8004ac8:	1e68      	subs	r0, r5, #1
 8004aca:	ab06      	add	r3, sp, #24
 8004acc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad4:	e7f4      	b.n	8004ac0 <__kernel_rem_pio2f+0x25c>
 8004ad6:	a906      	add	r1, sp, #24
 8004ad8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004adc:	3801      	subs	r0, #1
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	e7a9      	b.n	8004a36 <__kernel_rem_pio2f+0x1d2>
 8004ae2:	f10c 0c01 	add.w	ip, ip, #1
 8004ae6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	d0f9      	beq.n	8004ae2 <__kernel_rem_pio2f+0x27e>
 8004aee:	eb0b 0305 	add.w	r3, fp, r5
 8004af2:	aa1a      	add	r2, sp, #104	; 0x68
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	1898      	adds	r0, r3, r2
 8004af8:	3004      	adds	r0, #4
 8004afa:	1c69      	adds	r1, r5, #1
 8004afc:	3704      	adds	r7, #4
 8004afe:	2200      	movs	r2, #0
 8004b00:	4465      	add	r5, ip
 8004b02:	9005      	str	r0, [sp, #20]
 8004b04:	428d      	cmp	r5, r1
 8004b06:	f6ff af0a 	blt.w	800491e <__kernel_rem_pio2f+0xba>
 8004b0a:	a81a      	add	r0, sp, #104	; 0x68
 8004b0c:	eb02 0c03 	add.w	ip, r2, r3
 8004b10:	4484      	add	ip, r0
 8004b12:	9803      	ldr	r0, [sp, #12]
 8004b14:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004b18:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8004b1c:	9001      	str	r0, [sp, #4]
 8004b1e:	ee07 0a90 	vmov	s15, r0
 8004b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b26:	9805      	ldr	r0, [sp, #20]
 8004b28:	edcc 7a00 	vstr	s15, [ip]
 8004b2c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004b30:	eb00 0802 	add.w	r8, r0, r2
 8004b34:	f04f 0c00 	mov.w	ip, #0
 8004b38:	45d4      	cmp	ip, sl
 8004b3a:	dd0c      	ble.n	8004b56 <__kernel_rem_pio2f+0x2f2>
 8004b3c:	eb02 0c07 	add.w	ip, r2, r7
 8004b40:	a842      	add	r0, sp, #264	; 0x108
 8004b42:	4484      	add	ip, r0
 8004b44:	edcc 7a01 	vstr	s15, [ip, #4]
 8004b48:	3101      	adds	r1, #1
 8004b4a:	3204      	adds	r2, #4
 8004b4c:	e7da      	b.n	8004b04 <__kernel_rem_pio2f+0x2a0>
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	f04f 0c01 	mov.w	ip, #1
 8004b54:	e7c7      	b.n	8004ae6 <__kernel_rem_pio2f+0x282>
 8004b56:	ecfe 6a01 	vldmia	lr!, {s13}
 8004b5a:	ed38 7a01 	vldmdb	r8!, {s14}
 8004b5e:	f10c 0c01 	add.w	ip, ip, #1
 8004b62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b66:	e7e7      	b.n	8004b38 <__kernel_rem_pio2f+0x2d4>
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	e769      	b.n	8004a40 <__kernel_rem_pio2f+0x1dc>
 8004b6c:	08022d60 	.word	0x08022d60
 8004b70:	08022d34 	.word	0x08022d34
 8004b74:	43800000 	.word	0x43800000
 8004b78:	3b800000 	.word	0x3b800000
 8004b7c:	00000000 	.word	0x00000000
 8004b80:	4260      	negs	r0, r4
 8004b82:	eeb0 0a48 	vmov.f32	s0, s16
 8004b86:	f000 f981 	bl	8004e8c <scalbnf>
 8004b8a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004b74 <__kernel_rem_pio2f+0x310>
 8004b8e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	db1a      	blt.n	8004bce <__kernel_rem_pio2f+0x36a>
 8004b98:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004b78 <__kernel_rem_pio2f+0x314>
 8004b9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004ba0:	aa06      	add	r2, sp, #24
 8004ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ba6:	a906      	add	r1, sp, #24
 8004ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bac:	3408      	adds	r4, #8
 8004bae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bba:	ee10 3a10 	vmov	r3, s0
 8004bbe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004bc2:	1c6b      	adds	r3, r5, #1
 8004bc4:	ee17 2a90 	vmov	r2, s15
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004bcc:	e73f      	b.n	8004a4e <__kernel_rem_pio2f+0x1ea>
 8004bce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bd2:	aa06      	add	r2, sp, #24
 8004bd4:	ee10 3a10 	vmov	r3, s0
 8004bd8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004bdc:	462b      	mov	r3, r5
 8004bde:	e736      	b.n	8004a4e <__kernel_rem_pio2f+0x1ea>
 8004be0:	aa06      	add	r2, sp, #24
 8004be2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004be6:	9202      	str	r2, [sp, #8]
 8004be8:	ee07 2a90 	vmov	s15, r2
 8004bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf0:	3c01      	subs	r4, #1
 8004bf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004bf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004bfa:	ed65 7a01 	vstmdb	r5!, {s15}
 8004bfe:	e734      	b.n	8004a6a <__kernel_rem_pio2f+0x206>
 8004c00:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8004c04:	ecf7 6a01 	vldmia	r7!, {s13}
 8004c08:	ed9c 7a00 	vldr	s14, [ip]
 8004c0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c10:	3401      	adds	r4, #1
 8004c12:	454c      	cmp	r4, r9
 8004c14:	dc01      	bgt.n	8004c1a <__kernel_rem_pio2f+0x3b6>
 8004c16:	42a5      	cmp	r5, r4
 8004c18:	daf2      	bge.n	8004c00 <__kernel_rem_pio2f+0x39c>
 8004c1a:	aa56      	add	r2, sp, #344	; 0x158
 8004c1c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8004c20:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8004c24:	3501      	adds	r5, #1
 8004c26:	3804      	subs	r0, #4
 8004c28:	e723      	b.n	8004a72 <__kernel_rem_pio2f+0x20e>
 8004c2a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004c2c:	2a03      	cmp	r2, #3
 8004c2e:	d84d      	bhi.n	8004ccc <__kernel_rem_pio2f+0x468>
 8004c30:	e8df f002 	tbb	[pc, r2]
 8004c34:	021f1f3e 	.word	0x021f1f3e
 8004c38:	aa56      	add	r2, sp, #344	; 0x158
 8004c3a:	4411      	add	r1, r2
 8004c3c:	399c      	subs	r1, #156	; 0x9c
 8004c3e:	4608      	mov	r0, r1
 8004c40:	461c      	mov	r4, r3
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	dc5f      	bgt.n	8004d06 <__kernel_rem_pio2f+0x4a2>
 8004c46:	4608      	mov	r0, r1
 8004c48:	461c      	mov	r4, r3
 8004c4a:	2c01      	cmp	r4, #1
 8004c4c:	dc6b      	bgt.n	8004d26 <__kernel_rem_pio2f+0x4c2>
 8004c4e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	dc77      	bgt.n	8004d46 <__kernel_rem_pio2f+0x4e2>
 8004c56:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8004c5a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8004c5e:	f1b8 0f00 	cmp.w	r8, #0
 8004c62:	d176      	bne.n	8004d52 <__kernel_rem_pio2f+0x4ee>
 8004c64:	edc6 6a00 	vstr	s13, [r6]
 8004c68:	ed86 7a01 	vstr	s14, [r6, #4]
 8004c6c:	edc6 7a02 	vstr	s15, [r6, #8]
 8004c70:	e02c      	b.n	8004ccc <__kernel_rem_pio2f+0x468>
 8004c72:	aa56      	add	r2, sp, #344	; 0x158
 8004c74:	4411      	add	r1, r2
 8004c76:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004c7a:	399c      	subs	r1, #156	; 0x9c
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	da32      	bge.n	8004ce8 <__kernel_rem_pio2f+0x484>
 8004c82:	f1b8 0f00 	cmp.w	r8, #0
 8004c86:	d035      	beq.n	8004cf4 <__kernel_rem_pio2f+0x490>
 8004c88:	eef1 7a47 	vneg.f32	s15, s14
 8004c8c:	edc6 7a00 	vstr	s15, [r6]
 8004c90:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c98:	a82f      	add	r0, sp, #188	; 0xbc
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	da2c      	bge.n	8004cfa <__kernel_rem_pio2f+0x496>
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	d001      	beq.n	8004caa <__kernel_rem_pio2f+0x446>
 8004ca6:	eef1 7a67 	vneg.f32	s15, s15
 8004caa:	edc6 7a01 	vstr	s15, [r6, #4]
 8004cae:	e00d      	b.n	8004ccc <__kernel_rem_pio2f+0x468>
 8004cb0:	aa56      	add	r2, sp, #344	; 0x158
 8004cb2:	4411      	add	r1, r2
 8004cb4:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8004b7c <__kernel_rem_pio2f+0x318>
 8004cb8:	399c      	subs	r1, #156	; 0x9c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da0e      	bge.n	8004cdc <__kernel_rem_pio2f+0x478>
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d001      	beq.n	8004cc8 <__kernel_rem_pio2f+0x464>
 8004cc4:	eef1 7a67 	vneg.f32	s15, s15
 8004cc8:	edc6 7a00 	vstr	s15, [r6]
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	f003 0007 	and.w	r0, r3, #7
 8004cd2:	b057      	add	sp, #348	; 0x15c
 8004cd4:	ecbd 8b04 	vpop	{d8-d9}
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	ed31 7a01 	vldmdb	r1!, {s14}
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ce6:	e7e8      	b.n	8004cba <__kernel_rem_pio2f+0x456>
 8004ce8:	ed71 7a01 	vldmdb	r1!, {s15}
 8004cec:	3801      	subs	r0, #1
 8004cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cf2:	e7c4      	b.n	8004c7e <__kernel_rem_pio2f+0x41a>
 8004cf4:	eef0 7a47 	vmov.f32	s15, s14
 8004cf8:	e7c8      	b.n	8004c8c <__kernel_rem_pio2f+0x428>
 8004cfa:	ecb0 7a01 	vldmia	r0!, {s14}
 8004cfe:	3101      	adds	r1, #1
 8004d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d04:	e7ca      	b.n	8004c9c <__kernel_rem_pio2f+0x438>
 8004d06:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004d0a:	ed70 6a01 	vldmdb	r0!, {s13}
 8004d0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d12:	3c01      	subs	r4, #1
 8004d14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d18:	ed00 7a01 	vstr	s14, [r0, #-4]
 8004d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d20:	edc0 7a00 	vstr	s15, [r0]
 8004d24:	e78d      	b.n	8004c42 <__kernel_rem_pio2f+0x3de>
 8004d26:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004d2a:	ed70 6a01 	vldmdb	r0!, {s13}
 8004d2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d32:	3c01      	subs	r4, #1
 8004d34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d38:	ed00 7a01 	vstr	s14, [r0, #-4]
 8004d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d40:	edc0 7a00 	vstr	s15, [r0]
 8004d44:	e781      	b.n	8004c4a <__kernel_rem_pio2f+0x3e6>
 8004d46:	ed31 7a01 	vldmdb	r1!, {s14}
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d50:	e77f      	b.n	8004c52 <__kernel_rem_pio2f+0x3ee>
 8004d52:	eef1 6a66 	vneg.f32	s13, s13
 8004d56:	eeb1 7a47 	vneg.f32	s14, s14
 8004d5a:	edc6 6a00 	vstr	s13, [r6]
 8004d5e:	ed86 7a01 	vstr	s14, [r6, #4]
 8004d62:	eef1 7a67 	vneg.f32	s15, s15
 8004d66:	e781      	b.n	8004c6c <__kernel_rem_pio2f+0x408>

08004d68 <__kernel_sinf>:
 8004d68:	ee10 3a10 	vmov	r3, s0
 8004d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004d74:	da04      	bge.n	8004d80 <__kernel_sinf+0x18>
 8004d76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004d7a:	ee17 3a90 	vmov	r3, s15
 8004d7e:	b35b      	cbz	r3, 8004dd8 <__kernel_sinf+0x70>
 8004d80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004d84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004ddc <__kernel_sinf+0x74>
 8004d88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004de0 <__kernel_sinf+0x78>
 8004d8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004de4 <__kernel_sinf+0x7c>
 8004d94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004de8 <__kernel_sinf+0x80>
 8004d9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004da0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004dec <__kernel_sinf+0x84>
 8004da4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004da8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004dac:	b930      	cbnz	r0, 8004dbc <__kernel_sinf+0x54>
 8004dae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004df0 <__kernel_sinf+0x88>
 8004db2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004db6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004dba:	4770      	bx	lr
 8004dbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004dc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004dc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004dc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004dcc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004df4 <__kernel_sinf+0x8c>
 8004dd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004dd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	2f2ec9d3 	.word	0x2f2ec9d3
 8004de0:	b2d72f34 	.word	0xb2d72f34
 8004de4:	3638ef1b 	.word	0x3638ef1b
 8004de8:	b9500d01 	.word	0xb9500d01
 8004dec:	3c088889 	.word	0x3c088889
 8004df0:	be2aaaab 	.word	0xbe2aaaab
 8004df4:	3e2aaaab 	.word	0x3e2aaaab

08004df8 <fabsf>:
 8004df8:	ee10 3a10 	vmov	r3, s0
 8004dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e00:	ee00 3a10 	vmov	s0, r3
 8004e04:	4770      	bx	lr
	...

08004e08 <floorf>:
 8004e08:	ee10 3a10 	vmov	r3, s0
 8004e0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e10:	0dca      	lsrs	r2, r1, #23
 8004e12:	3a7f      	subs	r2, #127	; 0x7f
 8004e14:	2a16      	cmp	r2, #22
 8004e16:	dc2a      	bgt.n	8004e6e <floorf+0x66>
 8004e18:	2a00      	cmp	r2, #0
 8004e1a:	da11      	bge.n	8004e40 <floorf+0x38>
 8004e1c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004e80 <floorf+0x78>
 8004e20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2c:	dd05      	ble.n	8004e3a <floorf+0x32>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	da23      	bge.n	8004e7a <floorf+0x72>
 8004e32:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <floorf+0x7c>)
 8004e34:	2900      	cmp	r1, #0
 8004e36:	bf18      	it	ne
 8004e38:	4613      	movne	r3, r2
 8004e3a:	ee00 3a10 	vmov	s0, r3
 8004e3e:	4770      	bx	lr
 8004e40:	4911      	ldr	r1, [pc, #68]	; (8004e88 <floorf+0x80>)
 8004e42:	4111      	asrs	r1, r2
 8004e44:	420b      	tst	r3, r1
 8004e46:	d0fa      	beq.n	8004e3e <floorf+0x36>
 8004e48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004e80 <floorf+0x78>
 8004e4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	ddef      	ble.n	8004e3a <floorf+0x32>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bfbe      	ittt	lt
 8004e5e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004e62:	fa40 f202 	asrlt.w	r2, r0, r2
 8004e66:	189b      	addlt	r3, r3, r2
 8004e68:	ea23 0301 	bic.w	r3, r3, r1
 8004e6c:	e7e5      	b.n	8004e3a <floorf+0x32>
 8004e6e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004e72:	d3e4      	bcc.n	8004e3e <floorf+0x36>
 8004e74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e78:	4770      	bx	lr
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e7dd      	b.n	8004e3a <floorf+0x32>
 8004e7e:	bf00      	nop
 8004e80:	7149f2ca 	.word	0x7149f2ca
 8004e84:	bf800000 	.word	0xbf800000
 8004e88:	007fffff 	.word	0x007fffff

08004e8c <scalbnf>:
 8004e8c:	b508      	push	{r3, lr}
 8004e8e:	ee10 2a10 	vmov	r2, s0
 8004e92:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004e96:	ed2d 8b02 	vpush	{d8}
 8004e9a:	eef0 0a40 	vmov.f32	s1, s0
 8004e9e:	d004      	beq.n	8004eaa <scalbnf+0x1e>
 8004ea0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004ea4:	d306      	bcc.n	8004eb4 <scalbnf+0x28>
 8004ea6:	ee70 0a00 	vadd.f32	s1, s0, s0
 8004eaa:	ecbd 8b02 	vpop	{d8}
 8004eae:	eeb0 0a60 	vmov.f32	s0, s1
 8004eb2:	bd08      	pop	{r3, pc}
 8004eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb8:	d21c      	bcs.n	8004ef4 <scalbnf+0x68>
 8004eba:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <scalbnf+0xac>)
 8004ebc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004f3c <scalbnf+0xb0>
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004ec6:	db10      	blt.n	8004eea <scalbnf+0x5e>
 8004ec8:	ee10 2a90 	vmov	r2, s1
 8004ecc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8004ed0:	3b19      	subs	r3, #25
 8004ed2:	4403      	add	r3, r0
 8004ed4:	2bfe      	cmp	r3, #254	; 0xfe
 8004ed6:	dd0f      	ble.n	8004ef8 <scalbnf+0x6c>
 8004ed8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004f40 <scalbnf+0xb4>
 8004edc:	eeb0 0a48 	vmov.f32	s0, s16
 8004ee0:	f000 f834 	bl	8004f4c <copysignf>
 8004ee4:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004ee8:	e7df      	b.n	8004eaa <scalbnf+0x1e>
 8004eea:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004f44 <scalbnf+0xb8>
 8004eee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8004ef2:	e7da      	b.n	8004eaa <scalbnf+0x1e>
 8004ef4:	0ddb      	lsrs	r3, r3, #23
 8004ef6:	e7ec      	b.n	8004ed2 <scalbnf+0x46>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dd06      	ble.n	8004f0a <scalbnf+0x7e>
 8004efc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004f00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004f04:	ee00 3a90 	vmov	s1, r3
 8004f08:	e7cf      	b.n	8004eaa <scalbnf+0x1e>
 8004f0a:	f113 0f16 	cmn.w	r3, #22
 8004f0e:	da06      	bge.n	8004f1e <scalbnf+0x92>
 8004f10:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f14:	4298      	cmp	r0, r3
 8004f16:	dcdf      	bgt.n	8004ed8 <scalbnf+0x4c>
 8004f18:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004f44 <scalbnf+0xb8>
 8004f1c:	e7de      	b.n	8004edc <scalbnf+0x50>
 8004f1e:	3319      	adds	r3, #25
 8004f20:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004f24:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004f28:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004f48 <scalbnf+0xbc>
 8004f2c:	ee07 3a10 	vmov	s14, r3
 8004f30:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004f34:	e7b9      	b.n	8004eaa <scalbnf+0x1e>
 8004f36:	bf00      	nop
 8004f38:	ffff3cb0 	.word	0xffff3cb0
 8004f3c:	4c000000 	.word	0x4c000000
 8004f40:	7149f2ca 	.word	0x7149f2ca
 8004f44:	0da24260 	.word	0x0da24260
 8004f48:	33000000 	.word	0x33000000

08004f4c <copysignf>:
 8004f4c:	ee10 3a10 	vmov	r3, s0
 8004f50:	ee10 2a90 	vmov	r2, s1
 8004f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	ee00 3a10 	vmov	s0, r3
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
